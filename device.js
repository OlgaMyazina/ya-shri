!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=50)}([function(t,e,r){"use strict";e.__esModule=!0,e.extend=s,e.indexOf=function(t,e){for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return r;return-1},e.escapeExpression=function(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}if(!a.test(t))return t;return t.replace(n,o)},e.isEmpty=function(t){return!t&&0!==t||!(!d(t)||0!==t.length)},e.createFrame=function(t){var e=s({},t);return e._parent=t,e},e.blockParams=function(t,e){return t.path=e,t},e.appendContextPath=function(t,e){return(t?t+".":"")+e};var i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},n=/[&<>"'`=]/g,a=/[&<>"'`=]/;function o(t){return i[t]}function s(t){for(var e=1;e<arguments.length;e++)for(var r in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],r)&&(t[r]=arguments[e][r]);return t}var l=Object.prototype.toString;e.toString=l;var u=function(t){return"function"==typeof t};u(/x/)&&(e.isFunction=u=function(t){return"function"==typeof t&&"[object Function]"===l.call(t)}),e.isFunction=u;var d=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===l.call(t)};e.isArray=d},function(t,e,r){"use strict";e.__esModule=!0;var i=["description","fileName","lineNumber","message","name","number","stack"];function n(t,e){var r=e&&e.loc,a=void 0,o=void 0;r&&(t+=" - "+(a=r.start.line)+":"+(o=r.start.column));for(var s=Error.prototype.constructor.call(this,t),l=0;l<i.length;l++)this[i[l]]=s[i[l]];Error.captureStackTrace&&Error.captureStackTrace(this,n);try{r&&(this.lineNumber=a,Object.defineProperty?Object.defineProperty(this,"column",{value:o,enumerable:!0}):this.column=o)}catch(t){}}n.prototype=new Error,e.default=n,t.exports=e.default},function(t,e,r){t.exports=r(21).default},function(t){t.exports={items:[{url:"index.html",title:"События"},{url:"#",title:"Сводка"},{url:"device.html",title:"Устройства"},{url:"#",title:"Сценарии"}]}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r=function(t,e){var r=t[1]||"",i=t[3];if(!i)return r;if(e&&"function"==typeof btoa){var n=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(i),a=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[r].concat(a).concat([n]).join("\n")}return[r].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},n=0;n<this.length;n++){var a=this[n][0];"number"==typeof a&&(i[a]=!0)}for(n=0;n<t.length;n++){var o=t[n];"number"==typeof o[0]&&i[o[0]]||(r&&!o[2]?o[2]=r:r&&(o[2]="("+o[2]+") and ("+r+")"),e.push(o))}},e}},function(t,e,r){var i={},n=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),a=function(t){var e={};return function(t,r){if("function"==typeof t)return t();if(void 0===e[t]){var i=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,r);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),o=null,s=0,l=[],u=r(20);function d(t,e){for(var r=0;r<t.length;r++){var n=t[r],a=i[n.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](n.parts[o]);for(;o<n.parts.length;o++)a.parts.push(v(n.parts[o],e))}else{var s=[];for(o=0;o<n.parts.length;o++)s.push(v(n.parts[o],e));i[n.id]={id:n.id,refs:1,parts:s}}}}function c(t,e){for(var r=[],i={},n=0;n<t.length;n++){var a=t[n],o=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};i[o]?i[o].parts.push(s):r.push(i[o]={id:o,parts:[s]})}return r}function h(t,e){var r=a(t.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=l[l.length-1];if("top"===t.insertAt)i?i.nextSibling?r.insertBefore(e,i.nextSibling):r.appendChild(e):r.insertBefore(e,r.firstChild),l.push(e);else if("bottom"===t.insertAt)r.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(t.insertAt.before,r);r.insertBefore(e,n)}}function f(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function p(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return r.nc}();i&&(t.attrs.nonce=i)}return g(e,t.attrs),h(t,e),e}function g(t,e){Object.keys(e).forEach(function(r){t.setAttribute(r,e[r])})}function v(t,e){var r,i,n,a;if(e.transform&&t.css){if(!(a="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=a}if(e.singleton){var l=s++;r=o||(o=p(e)),i=y.bind(null,r,l,!1),n=y.bind(null,r,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(e,t.attrs),h(t,e),e}(e),i=function(t,e,r){var i=r.css,n=r.sourceMap,a=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||a)&&(i=u(i));n&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var o=new Blob([i],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,r,e),n=function(){f(r),r.href&&URL.revokeObjectURL(r.href)}):(r=p(e),i=function(t,e){var r=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,r),n=function(){f(r)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=n()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var r=c(t,e);return d(r,e),function(t){for(var n=[],a=0;a<r.length;a++){var o=r[a];(s=i[o.id]).refs--,n.push(s)}t&&d(c(t,e),e);for(a=0;a<n.length;a++){var s;if(0===(s=n[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var m=function(){var t=[];return function(e,r){return t[e]=r,t.filter(Boolean).join("\n")}}();function y(t,e,r,i){var n=r?"":i.css;if(t.styleSheet)t.styleSheet.cssText=m(e,n);else{var a=document.createTextNode(n),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}},function(t,e,r){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0,e.HandlebarsEnvironment=u;var n=r(0),a=i(r(1)),o=r(22),s=r(30),l=i(r(32));e.VERSION="4.0.12";e.COMPILER_REVISION=7;e.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};function u(t,e,r){this.helpers=t||{},this.partials=e||{},this.decorators=r||{},o.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}u.prototype={constructor:u,logger:l.default,log:l.default.log,registerHelper:function(t,e){if("[object Object]"===n.toString.call(t)){if(e)throw new a.default("Arg not supported with multiple helpers");n.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if("[object Object]"===n.toString.call(t))n.extend(this.partials,t);else{if(void 0===e)throw new a.default('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if("[object Object]"===n.toString.call(t)){if(e)throw new a.default("Arg not supported with multiple decorators");n.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]}};var d=l.default.log;e.log=d,e.createFrame=n.createFrame,e.logger=l.default},function(t,e,r){var i=r(2);t.exports=(i.default||i).template({compiler:[7,">= 4.0.0"],main:function(t,e,r,i,n){var a,o=null!=e?e:t.nullContext||{},s=r.helperMissing,l="function",u=t.escapeExpression;return"<picture class="+u(typeof(a=null!=(a=r.class||(null!=e?e.class:e))?a:s)===l?a.call(o,{name:"class",hash:{},data:n}):a)+'>\n  <source srcset="'+u(typeof(a=null!=(a=r.sourceSrcset||(null!=e?e.sourceSrcset:e))?a:s)===l?a.call(o,{name:"sourceSrcset",hash:{},data:n}):a)+'" type="image/svg+xml" />\n  <img src="'+u(typeof(a=null!=(a=r.imgSrc||(null!=e?e.imgSrc:e))?a:s)===l?a.call(o,{name:"imgSrc",hash:{},data:n}):a)+'"" srcset="'+u(typeof(a=null!=(a=r.imgSrcset||(null!=e?e.imgSrcset:e))?a:s)===l?a.call(o,{name:"imgSrcset",hash:{},data:n}):a)+'"" alt='+u(typeof(a=null!=(a=r.imgAlt||(null!=e?e.imgAlt:e))?a:s)===l?a.call(o,{name:"imgAlt",hash:{},data:n}):a)+" />\n</picture>"},useData:!0})},function(t,e,r){"use strict";var i=r(9),n=r.n(i);r(37);e.a=n.a},function(t,e,r){var i=r(2);t.exports=(i.default||i).template({1:function(t,e,r,i,n){var a,o=null!=e?e:t.nullContext||{},s=r.helperMissing,l=t.escapeExpression;return'  <li>\n    <a href="'+l("function"==typeof(a=null!=(a=r.url||(null!=e?e.url:e))?a:s)?a.call(o,{name:"url",hash:{},data:n}):a)+'" class="foo-menu-a">\n      '+l("function"==typeof(a=null!=(a=r.title||(null!=e?e.title:e))?a:s)?a.call(o,{name:"title",hash:{},data:n}):a)+"\n    </a>\n  </li>\n"},compiler:[7,">= 4.0.0"],main:function(t,e,r,i,n){var a;return null!=(a=r.each.call(null!=e?e:t.nullContext||{},null!=e?e.items:e,{name:"each",hash:{},fn:t.program(1,n,0),inverse:t.noop,data:n}))?a:""},useData:!0})},function(t,e,r){"use strict";var i=r(11),n=r.n(i);r(40);e.a=n.a},function(t,e,r){var i=r(2);t.exports=(i.default||i).template({compiler:[7,">= 4.0.0"],main:function(t,e,i,n,a){var o;return'<header class="header">\n    <div class="header__logo header__logo_position"><a href="#" class="logo__logo-href">'+(null!=(o=t.invokePartial(r(7),null!=e?e.logo:e,{name:"../picture/picture",data:a,helpers:i,partials:n,decorators:t.decorators}))?o:"")+'</a></div>\n\n    <label class="header__menu-toggle" for="checkbox_toggle">\n'+(null!=(o=t.invokePartial(r(7),null!=e?e.icon:e,{name:"../picture/picture",data:a,indent:"      ",helpers:i,partials:n,decorators:t.decorators}))?o:"")+'    </label>\n\n    <input type="checkbox" id="checkbox_toggle" class="menu-toggle__checkbox">\n\n    <nav id="nav" class="header__nav">\n      <ul class="nav__nav-list">'+(null!=(o=t.invokePartial(r(39),e,{name:"../nav/nav",data:a,helpers:i,partials:n,decorators:t.decorators}))?o:"")+"</ul>\n    </nav>\n      \n  </header>\n"},usePartial:!0,useData:!0})},function(t){t.exports={items:[{url:"#",title:"Помощь"},{url:"#",title:"Обратная связь"},{url:"#",title:"Разработчикам"},{url:"files/license.pdf",title:"Условия использования"}]}},function(t,e,r){t.exports=r.p+"img/logo@1x.png"},function(t,e,r){t.exports=r.p+"img/logo@2x.png"},function(t,e,r){t.exports=r.p+"img/logo.svg"},function(t,e,r){t.exports=r.p+"img/icon_list_m.png"},function(t,e,r){t.exports=r.p+"img/icon_list_m@2x.png"},function(t,e,r){t.exports=r.p+"img/icon_list_m@1x.svg"},function(t,e,r){"undefined"!=typeof window&&function(e,r){t.exports=r()}(0,function(){return function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/dist/",r(r.s=11)}([function(t,e,r){"use strict";r.d(e,"a",function(){return d}),r.d(e,"b",function(){return c});var i=r(4),n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function a(){}var o={trace:a,debug:a,log:a,warn:a,info:a,error:a},s=o;var l=Object(i.a)();function u(t){for(var e=arguments.length,r=Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];r.forEach(function(e){s[e]=t[e]?t[e].bind(t):function(t){var e=l.console[t];return e?function(){for(var r=arguments.length,i=Array(r),n=0;n<r;n++)i[n]=arguments[n];i[0]&&(i[0]=function(t,e){return e="["+t+"] > "+e}(t,i[0])),e.apply(l.console,i)}:a}(e)})}var d=function(t){if(!0===t||"object"===(void 0===t?"undefined":n(t))){u(t,"debug","log","info","warn","error");try{s.log()}catch(t){s=o}}else s=o},c=s},function(t,e,r){"use strict";e.a={MEDIA_ATTACHING:"hlsMediaAttaching",MEDIA_ATTACHED:"hlsMediaAttached",MEDIA_DETACHING:"hlsMediaDetaching",MEDIA_DETACHED:"hlsMediaDetached",BUFFER_RESET:"hlsBufferReset",BUFFER_CODECS:"hlsBufferCodecs",BUFFER_CREATED:"hlsBufferCreated",BUFFER_APPENDING:"hlsBufferAppending",BUFFER_APPENDED:"hlsBufferAppended",BUFFER_EOS:"hlsBufferEos",BUFFER_FLUSHING:"hlsBufferFlushing",BUFFER_FLUSHED:"hlsBufferFlushed",MANIFEST_LOADING:"hlsManifestLoading",MANIFEST_LOADED:"hlsManifestLoaded",MANIFEST_PARSED:"hlsManifestParsed",LEVEL_SWITCHING:"hlsLevelSwitching",LEVEL_SWITCHED:"hlsLevelSwitched",LEVEL_LOADING:"hlsLevelLoading",LEVEL_LOADED:"hlsLevelLoaded",LEVEL_UPDATED:"hlsLevelUpdated",LEVEL_PTS_UPDATED:"hlsLevelPtsUpdated",AUDIO_TRACKS_UPDATED:"hlsAudioTracksUpdated",AUDIO_TRACK_SWITCHING:"hlsAudioTrackSwitching",AUDIO_TRACK_SWITCHED:"hlsAudioTrackSwitched",AUDIO_TRACK_LOADING:"hlsAudioTrackLoading",AUDIO_TRACK_LOADED:"hlsAudioTrackLoaded",SUBTITLE_TRACKS_UPDATED:"hlsSubtitleTracksUpdated",SUBTITLE_TRACK_SWITCH:"hlsSubtitleTrackSwitch",SUBTITLE_TRACK_LOADING:"hlsSubtitleTrackLoading",SUBTITLE_TRACK_LOADED:"hlsSubtitleTrackLoaded",SUBTITLE_FRAG_PROCESSED:"hlsSubtitleFragProcessed",INIT_PTS_FOUND:"hlsInitPtsFound",FRAG_LOADING:"hlsFragLoading",FRAG_LOAD_PROGRESS:"hlsFragLoadProgress",FRAG_LOAD_EMERGENCY_ABORTED:"hlsFragLoadEmergencyAborted",FRAG_LOADED:"hlsFragLoaded",FRAG_DECRYPTED:"hlsFragDecrypted",FRAG_PARSING_INIT_SEGMENT:"hlsFragParsingInitSegment",FRAG_PARSING_USERDATA:"hlsFragParsingUserdata",FRAG_PARSING_METADATA:"hlsFragParsingMetadata",FRAG_PARSING_DATA:"hlsFragParsingData",FRAG_PARSED:"hlsFragParsed",FRAG_BUFFERED:"hlsFragBuffered",FRAG_CHANGED:"hlsFragChanged",FPS_DROP:"hlsFpsDrop",FPS_DROP_LEVEL_CAPPING:"hlsFpsDropLevelCapping",ERROR:"hlsError",DESTROYING:"hlsDestroying",KEY_LOADING:"hlsKeyLoading",KEY_LOADED:"hlsKeyLoaded",STREAM_STATE_TRANSITION:"hlsStreamStateTransition"}},function(t,e,r){"use strict";r.d(e,"b",function(){return i}),r.d(e,"a",function(){return n});var i={NETWORK_ERROR:"networkError",MEDIA_ERROR:"mediaError",KEY_SYSTEM_ERROR:"keySystemError",MUX_ERROR:"muxError",OTHER_ERROR:"otherError"},n={KEY_SYSTEM_NO_KEYS:"keySystemNoKeys",KEY_SYSTEM_NO_ACCESS:"keySystemNoAccess",KEY_SYSTEM_NO_SESSION:"keySystemNoSession",KEY_SYSTEM_LICENSE_REQUEST_FAILED:"keySystemLicenseRequestFailed",MANIFEST_LOAD_ERROR:"manifestLoadError",MANIFEST_LOAD_TIMEOUT:"manifestLoadTimeOut",MANIFEST_PARSING_ERROR:"manifestParsingError",MANIFEST_INCOMPATIBLE_CODECS_ERROR:"manifestIncompatibleCodecsError",LEVEL_LOAD_ERROR:"levelLoadError",LEVEL_LOAD_TIMEOUT:"levelLoadTimeOut",LEVEL_SWITCH_ERROR:"levelSwitchError",AUDIO_TRACK_LOAD_ERROR:"audioTrackLoadError",AUDIO_TRACK_LOAD_TIMEOUT:"audioTrackLoadTimeOut",FRAG_LOAD_ERROR:"fragLoadError",FRAG_LOAD_TIMEOUT:"fragLoadTimeOut",FRAG_DECRYPT_ERROR:"fragDecryptError",FRAG_PARSING_ERROR:"fragParsingError",REMUX_ALLOC_ERROR:"remuxAllocError",KEY_LOAD_ERROR:"keyLoadError",KEY_LOAD_TIMEOUT:"keyLoadTimeOut",BUFFER_ADD_CODEC_ERROR:"bufferAddCodecError",BUFFER_APPEND_ERROR:"bufferAppendError",BUFFER_APPENDING_ERROR:"bufferAppendingError",BUFFER_STALLED_ERROR:"bufferStalledError",BUFFER_FULL_ERROR:"bufferFullError",BUFFER_SEEK_OVER_HOLE:"bufferSeekOverHole",BUFFER_NUDGE_ON_STALL:"bufferNudgeOnStall",INTERNAL_EXCEPTION:"internalException"}},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var i=Number.isFinite||function(t){return"number"==typeof t&&isFinite(t)}},function(t,e,r){"use strict";e.a=function(){return"undefined"==typeof window?self:window}},function(t,e,r){!function(e){var r=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/\;?#]*)?(.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,i=/^([^\/;?#]*)(.*)$/,n=/(?:\/|^)\.(?=\/)/g,a=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,o={buildAbsoluteURL:function(t,e,r){if(r=r||{},t=t.trim(),!(e=e.trim())){if(!r.alwaysNormalize)return t;var n=this.parseURL(t);if(!s)throw new Error("Error trying to parse base URL.");return n.path=o.normalizePath(n.path),o.buildURLFromParts(n)}var a=this.parseURL(e);if(!a)throw new Error("Error trying to parse relative URL.");if(a.scheme)return r.alwaysNormalize?(a.path=o.normalizePath(a.path),o.buildURLFromParts(a)):e;var s=this.parseURL(t);if(!s)throw new Error("Error trying to parse base URL.");if(!s.netLoc&&s.path&&"/"!==s.path[0]){var l=i.exec(s.path);s.netLoc=l[1],s.path=l[2]}s.netLoc&&!s.path&&(s.path="/");var u={scheme:s.scheme,netLoc:a.netLoc,path:null,params:a.params,query:a.query,fragment:a.fragment};if(!a.netLoc&&(u.netLoc=s.netLoc,"/"!==a.path[0]))if(a.path){var d=s.path,c=d.substring(0,d.lastIndexOf("/")+1)+a.path;u.path=o.normalizePath(c)}else u.path=s.path,a.params||(u.params=s.params,a.query||(u.query=s.query));return null===u.path&&(u.path=r.alwaysNormalize?o.normalizePath(a.path):a.path),o.buildURLFromParts(u)},parseURL:function(t){var e=r.exec(t);return e?{scheme:e[1]||"",netLoc:e[2]||"",path:e[3]||"",params:e[4]||"",query:e[5]||"",fragment:e[6]||""}:null},normalizePath:function(t){for(t=t.split("").reverse().join("").replace(n,"");t.length!==(t=t.replace(a,"")).length;);return t.split("").reverse().join("")},buildURLFromParts:function(t){return t.scheme+t.netLoc+t.path+t.params+t.query+t.fragment}};t.exports=o}()},function(t,e,r){"use strict";r.d(e,"b",function(){return n});var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.isHeader=function(t,e){return e+10<=t.length&&73===t[e]&&68===t[e+1]&&51===t[e+2]&&t[e+3]<255&&t[e+4]<255&&t[e+6]<128&&t[e+7]<128&&t[e+8]<128&&t[e+9]<128},t.isFooter=function(t,e){return e+10<=t.length&&51===t[e]&&68===t[e+1]&&73===t[e+2]&&t[e+3]<255&&t[e+4]<255&&t[e+6]<128&&t[e+7]<128&&t[e+8]<128&&t[e+9]<128},t.getID3Data=function(e,r){for(var i=r,n=0;t.isHeader(e,r);){n+=10,n+=t._readSize(e,r+6),t.isFooter(e,r+10)&&(n+=10),r+=n}if(n>0)return e.subarray(i,i+n)},t._readSize=function(t,e){var r=0;return r=(127&t[e])<<21,r|=(127&t[e+1])<<14,r|=(127&t[e+2])<<7,r|=127&t[e+3]},t.getTimeStamp=function(e){for(var r=t.getID3Frames(e),i=0;i<r.length;i++){var n=r[i];if(t.isTimeStampFrame(n))return t._readTimeStamp(n)}},t.isTimeStampFrame=function(t){return t&&"PRIV"===t.key&&"com.apple.streaming.transportStreamTimestamp"===t.info},t._getFrameData=function(e){var r=String.fromCharCode(e[0],e[1],e[2],e[3]),i=t._readSize(e,4);return{type:r,size:i,data:e.subarray(10,10+i)}},t.getID3Frames=function(e){for(var r=0,i=[];t.isHeader(e,r);){for(var n=t._readSize(e,r+6),a=(r+=10)+n;r+8<a;){var o=t._getFrameData(e.subarray(r)),s=t._decodeFrame(o);s&&i.push(s),r+=o.size+10}t.isFooter(e,r)&&(r+=10)}return i},t._decodeFrame=function(e){return"PRIV"===e.type?t._decodePrivFrame(e):"T"===e.type[0]?t._decodeTextFrame(e):"W"===e.type[0]?t._decodeURLFrame(e):void 0},t._readTimeStamp=function(t){if(8===t.data.byteLength){var e=new Uint8Array(t.data),r=1&e[3],i=(e[4]<<23)+(e[5]<<15)+(e[6]<<7)+e[7];return i/=45,r&&(i+=47721858.84),Math.round(i)}},t._decodePrivFrame=function(e){if(!(e.size<2)){var r=t._utf8ArrayToStr(e.data,!0),i=new Uint8Array(e.data.subarray(r.length+1));return{key:e.type,info:r,data:i.buffer}}},t._decodeTextFrame=function(e){if(!(e.size<2)){if("TXXX"===e.type){var r=1,i=t._utf8ArrayToStr(e.data.subarray(r));r+=i.length+1;var n=t._utf8ArrayToStr(e.data.subarray(r));return{key:e.type,info:i,data:n}}var a=t._utf8ArrayToStr(e.data.subarray(1));return{key:e.type,data:a}}},t._decodeURLFrame=function(e){if("WXXX"===e.type){if(e.size<2)return;var r=1,i=t._utf8ArrayToStr(e.data.subarray(r));r+=i.length+1;var n=t._utf8ArrayToStr(e.data.subarray(r));return{key:e.type,info:i,data:n}}var a=t._utf8ArrayToStr(e.data);return{key:e.type,data:a}},t._utf8ArrayToStr=function(t){for(var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.length,i=void 0,n=void 0,a=void 0,o="",s=0;s<r;){if(0===(i=t[s++])&&e)return o;if(0!==i&&3!==i)switch(i>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:o+=String.fromCharCode(i);break;case 12:case 13:n=t[s++],o+=String.fromCharCode((31&i)<<6|63&n);break;case 14:n=t[s++],a=t[s++],o+=String.fromCharCode((15&i)<<12|(63&n)<<6|(63&a)<<0)}}return o},t}(),n=i._utf8ArrayToStr;e.a=i},function(t,e){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(t){return"function"==typeof t}function n(t){return"object"==typeof t&&null!==t}function a(t){return void 0===t}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},r.prototype.emit=function(t){var e,r,o,s,l,u;if(this._events||(this._events={}),"error"===t&&(!this._events.error||n(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var d=new Error('Uncaught, unspecified "error" event. ('+e+")");throw d.context=e,d}if(a(r=this._events[t]))return!1;if(i(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(n(r))for(s=Array.prototype.slice.call(arguments,1),o=(u=r.slice()).length,l=0;l<o;l++)u[l].apply(this,s);return!0},r.prototype.addListener=function(t,e){var o;if(!i(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,i(e.listener)?e.listener:e),this._events[t]?n(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,n(this._events[t])&&!this._events[t].warned&&(o=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(t,e){if(!i(e))throw TypeError("listener must be a function");var r=!1;function n(){this.removeListener(t,n),r||(r=!0,e.apply(this,arguments))}return n.listener=e,this.on(t,n),this},r.prototype.removeListener=function(t,e){var r,a,o,s;if(!i(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(o=(r=this._events[t]).length,a=-1,r===e||i(r.listener)&&r.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(n(r)){for(s=o;s-- >0;)if(r[s]===e||r[s].listener&&r[s].listener===e){a=s;break}if(a<0)return this;1===r.length?(r.length=0,delete this._events[t]):r.splice(a,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},r.prototype.removeAllListeners=function(t){var e,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(i(r=this._events[t]))this.removeListener(t,r);else if(r)for(;r.length;)this.removeListener(t,r[r.length-1]);return delete this._events[t],this},r.prototype.listeners=function(t){return this._events&&this._events[t]?i(this._events[t])?[this._events[t]]:this._events[t].slice():[]},r.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(i(e))return 1;if(e)return e.length}return 0},r.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,r){"use strict";var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.subtle=e,this.aesIV=r}return t.prototype.decrypt=function(t,e){return this.subtle.decrypt({name:"AES-CBC",iv:this.aesIV},e,t)},t}();var n=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.subtle=e,this.key=r}return t.prototype.expandKey=function(){return this.subtle.importKey("raw",this.key,{name:"AES-CBC"},!1,["encrypt","decrypt"])},t}();var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.rcon=[0,1,2,4,8,16,32,64,128,27,54],this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.sBox=new Uint32Array(256),this.invSBox=new Uint32Array(256),this.key=new Uint32Array(0),this.initTable()}return t.prototype.uint8ArrayToUint32Array_=function(t){for(var e=new DataView(t),r=new Uint32Array(4),i=0;i<4;i++)r[i]=e.getUint32(4*i);return r},t.prototype.initTable=function(){var t=this.sBox,e=this.invSBox,r=this.subMix,i=r[0],n=r[1],a=r[2],o=r[3],s=this.invSubMix,l=s[0],u=s[1],d=s[2],c=s[3],h=new Uint32Array(256),f=0,p=0,g=0;for(g=0;g<256;g++)h[g]=g<128?g<<1:g<<1^283;for(g=0;g<256;g++){var v=p^p<<1^p<<2^p<<3^p<<4;v=v>>>8^255&v^99,t[f]=v,e[v]=f;var m=h[f],y=h[m],b=h[y],E=257*h[v]^16843008*v;i[f]=E<<24|E>>>8,n[f]=E<<16|E>>>16,a[f]=E<<8|E>>>24,o[f]=E,E=16843009*b^65537*y^257*m^16843008*f,l[v]=E<<24|E>>>8,u[v]=E<<16|E>>>16,d[v]=E<<8|E>>>24,c[v]=E,f?(f=m^h[h[h[b^m]]],p^=h[h[p]]):f=p=1}},t.prototype.expandKey=function(t){for(var e=this.uint8ArrayToUint32Array_(t),r=!0,i=0;i<e.length&&r;)r=e[i]===this.key[i],i++;if(!r){this.key=e;var n=this.keySize=e.length;if(4!==n&&6!==n&&8!==n)throw new Error("Invalid aes key size="+n);var a=this.ksRows=4*(n+6+1),o=void 0,s=void 0,l=this.keySchedule=new Uint32Array(a),u=this.invKeySchedule=new Uint32Array(a),d=this.sBox,c=this.rcon,h=this.invSubMix,f=h[0],p=h[1],g=h[2],v=h[3],m=void 0,y=void 0;for(o=0;o<a;o++)o<n?m=l[o]=e[o]:(y=m,o%n==0?(y=d[(y=y<<8|y>>>24)>>>24]<<24|d[y>>>16&255]<<16|d[y>>>8&255]<<8|d[255&y],y^=c[o/n|0]<<24):n>6&&o%n==4&&(y=d[y>>>24]<<24|d[y>>>16&255]<<16|d[y>>>8&255]<<8|d[255&y]),l[o]=m=(l[o-n]^y)>>>0);for(s=0;s<a;s++)o=a-s,y=3&s?l[o]:l[o-4],u[s]=s<4||o<=4?y:f[d[y>>>24]]^p[d[y>>>16&255]]^g[d[y>>>8&255]]^v[d[255&y]],u[s]=u[s]>>>0}},t.prototype.networkToHostOrderSwap=function(t){return t<<24|(65280&t)<<8|(16711680&t)>>8|t>>>24},t.prototype.decrypt=function(t,e,r,i){for(var n=this.keySize+6,a=this.invKeySchedule,o=this.invSBox,s=this.invSubMix,l=s[0],u=s[1],d=s[2],c=s[3],h=this.uint8ArrayToUint32Array_(r),f=h[0],p=h[1],g=h[2],v=h[3],m=new Int32Array(t),y=new Int32Array(m.length),b=void 0,E=void 0,T=void 0,S=void 0,_=void 0,A=void 0,R=void 0,w=void 0,L=void 0,D=void 0,k=void 0,I=void 0,O=void 0,C=void 0,x=this.networkToHostOrderSwap;e<m.length;){for(L=x(m[e]),D=x(m[e+1]),k=x(m[e+2]),I=x(m[e+3]),_=L^a[0],A=I^a[1],R=k^a[2],w=D^a[3],O=4,C=1;C<n;C++)b=l[_>>>24]^u[A>>16&255]^d[R>>8&255]^c[255&w]^a[O],E=l[A>>>24]^u[R>>16&255]^d[w>>8&255]^c[255&_]^a[O+1],T=l[R>>>24]^u[w>>16&255]^d[_>>8&255]^c[255&A]^a[O+2],S=l[w>>>24]^u[_>>16&255]^d[A>>8&255]^c[255&R]^a[O+3],_=b,A=E,R=T,w=S,O+=4;b=o[_>>>24]<<24^o[A>>16&255]<<16^o[R>>8&255]<<8^o[255&w]^a[O],E=o[A>>>24]<<24^o[R>>16&255]<<16^o[w>>8&255]<<8^o[255&_]^a[O+1],T=o[R>>>24]<<24^o[w>>16&255]<<16^o[_>>8&255]<<8^o[255&A]^a[O+2],S=o[w>>>24]<<24^o[_>>16&255]<<16^o[A>>8&255]<<8^o[255&R]^a[O+3],O+=3,y[e]=x(b^f),y[e+1]=x(S^p),y[e+2]=x(T^g),y[e+3]=x(E^v),f=L,p=D,g=k,v=I,e+=4}return i?function(t){var e=t.byteLength,r=e&&new DataView(t).getUint8(e-1);return r?t.slice(0,e-r):t}(y.buffer):y.buffer},t.prototype.destroy=function(){this.key=void 0,this.keySize=void 0,this.ksRows=void 0,this.sBox=void 0,this.invSBox=void 0,this.subMix=void 0,this.invSubMix=void 0,this.keySchedule=void 0,this.invKeySchedule=void 0,this.rcon=void 0},t}(),o=r(2),s=r(0),l=r(1),u=r(4);var d=Object(u.a)(),c=function(){function t(e,r){var i=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).removePKCS7Padding,n=void 0===i||i;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.logEnabled=!0,this.observer=e,this.config=r,this.removePKCS7Padding=n,n)try{var a=d.crypto;a&&(this.subtle=a.subtle||a.webkitSubtle)}catch(t){}this.disableWebCrypto=!this.subtle}return t.prototype.isSync=function(){return this.disableWebCrypto&&this.config.enableSoftwareAES},t.prototype.decrypt=function(t,e,r,o){var l=this;if(this.disableWebCrypto&&this.config.enableSoftwareAES){this.logEnabled&&(s.b.log("JS AES decrypt"),this.logEnabled=!1);var u=this.decryptor;u||(this.decryptor=u=new a),u.expandKey(e),o(u.decrypt(t,0,r,this.removePKCS7Padding))}else{this.logEnabled&&(s.b.log("WebCrypto AES decrypt"),this.logEnabled=!1);var d=this.subtle;this.key!==e&&(this.key=e,this.fastAesKey=new n(d,e)),this.fastAesKey.expandKey().then(function(n){new i(d,r).decrypt(t,n).catch(function(i){l.onWebCryptoError(i,t,e,r,o)}).then(function(t){o(t)})}).catch(function(i){l.onWebCryptoError(i,t,e,r,o)})}},t.prototype.onWebCryptoError=function(t,e,r,i,n){this.config.enableSoftwareAES?(s.b.log("WebCrypto Error, disable WebCrypto API"),this.disableWebCrypto=!0,this.logEnabled=!0,this.decrypt(e,r,i,n)):(s.b.error("decrypting error : "+t.message),this.observer.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.FRAG_DECRYPT_ERROR,fatal:!0,reason:t.message}))},t.prototype.destroy=function(){var t=this.decryptor;t&&(t.destroy(),this.decryptor=void 0)},t}();e.a=c},function(t,e,r){"use strict";var i=r(0),n=r(1);var a=Math.pow(2,32)-1,o=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e,this.remuxer=r}return t.prototype.resetTimeStamp=function(t){this.initPTS=t},t.prototype.resetInitSegment=function(e,r,i,a){if(e&&e.byteLength){var o=this.initData=t.parseInitSegment(e);null==r&&(r="mp4a.40.5"),null==i&&(i="avc1.42e01e");var s={};o.audio&&o.video?s.audiovideo={container:"video/mp4",codec:r+","+i,initSegment:a?e:null}:(o.audio&&(s.audio={container:"audio/mp4",codec:r,initSegment:a?e:null}),o.video&&(s.video={container:"video/mp4",codec:i,initSegment:a?e:null})),this.observer.trigger(n.a.FRAG_PARSING_INIT_SEGMENT,{tracks:s})}else r&&(this.audioCodec=r),i&&(this.videoCodec=i)},t.probe=function(e){return t.findBox({data:e,start:0,end:Math.min(e.length,16384)},["moof"]).length>0},t.bin2str=function(t){return String.fromCharCode.apply(null,t)},t.readUint16=function(t,e){t.data&&(e+=t.start,t=t.data);var r=t[e]<<8|t[e+1];return r<0?65536+r:r},t.readUint32=function(t,e){t.data&&(e+=t.start,t=t.data);var r=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3];return r<0?4294967296+r:r},t.writeUint32=function(t,e,r){t.data&&(e+=t.start,t=t.data),t[e]=r>>24,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=255&r},t.findBox=function(e,r){var i=[],n=void 0,a=void 0,o=void 0,s=void 0,l=void 0,u=void 0,d=void 0;if(e.data?(u=e.start,s=e.end,e=e.data):(u=0,s=e.byteLength),!r.length)return null;for(n=u;n<s;)a=t.readUint32(e,n),o=t.bin2str(e.subarray(n+4,n+8)),d=a>1?n+a:s,o===r[0]&&(1===r.length?i.push({data:e,start:n+8,end:d}):(l=t.findBox({data:e,start:n+8,end:d},r.slice(1))).length&&(i=i.concat(l))),n=d;return i},t.parseSegmentIndex=function(e){var r=t.findBox(e,["moov"])[0],i=r?r.end:null,n=0,a=t.findBox(e,["sidx"]),o=void 0;if(!a||!a[0])return null;o=[];var s=(a=a[0]).data[0];n=0===s?8:16;var l=t.readUint32(a,n);n+=4;n+=0===s?8:16,n+=2;var u=a.end+0,d=t.readUint16(a,n);n+=2;for(var c=0;c<d;c++){var h=n,f=t.readUint32(a,h);h+=4;var p=2147483647&f;if(1===(2147483648&f)>>>31)return void console.warn("SIDX has hierarchical references (not supported)");var g=t.readUint32(a,h);h+=4,o.push({referenceSize:p,subsegmentDuration:g,info:{duration:g/l,start:u,end:u+p-1}}),u+=p,n=h+=4}return{earliestPresentationTime:0,timescale:l,version:s,referencesCount:d,references:o,moovEndOffset:i}},t.parseInitSegment=function(e){var r=[];return t.findBox(e,["moov","trak"]).forEach(function(e){var n=t.findBox(e,["tkhd"])[0];if(n){var a=n.data[n.start],o=0===a?12:20,s=t.readUint32(n,o),l=t.findBox(e,["mdia","mdhd"])[0];if(l){o=0===(a=l.data[l.start])?12:20;var u=t.readUint32(l,o),d=t.findBox(e,["mdia","hdlr"])[0];if(d){var c={soun:"audio",vide:"video"}[t.bin2str(d.data.subarray(d.start+8,d.start+12))];if(c){var h=t.findBox(e,["mdia","minf","stbl","stsd"]);if(h.length){h=h[0];var f=t.bin2str(h.data.subarray(h.start+12,h.start+16));i.b.log("MP4Demuxer:"+c+":"+f+" found")}r[s]={timescale:u,type:c},r[c]={timescale:u,id:s}}}}}}),r},t.getStartDTS=function(e,r){var i,n,a=void 0;return a=t.findBox(r,["moof","traf"]),i=[].concat.apply([],a.map(function(r){return t.findBox(r,["tfhd"]).map(function(i){var n,a;return n=t.readUint32(i,4),a=e[n].timescale||9e4,t.findBox(r,["tfdt"]).map(function(e){var r,i=void 0;return r=e.data[e.start],i=t.readUint32(e,4),1===r&&(i*=Math.pow(2,32),i+=t.readUint32(e,8)),i})[0]/a})})),n=Math.min.apply(null,i),isFinite(n)?n:0},t.offsetStartDTS=function(e,r,i){t.findBox(r,["moof","traf"]).map(function(r){return t.findBox(r,["tfhd"]).map(function(n){var o=t.readUint32(n,4),s=e[o].timescale||9e4;t.findBox(r,["tfdt"]).map(function(e){var r=e.data[e.start],n=t.readUint32(e,4);if(0===r)t.writeUint32(e,4,n-i*s);else{n*=Math.pow(2,32),n+=t.readUint32(e,8),n-=i*s,n=Math.max(n,0);var o=Math.floor(n/(a+1)),l=Math.floor(n%(a+1));t.writeUint32(e,4,o),t.writeUint32(e,8,l)}})})})},t.prototype.append=function(e,r,i,a){var o=this.initData;o||(this.resetInitSegment(e,this.audioCodec,this.videoCodec,!1),o=this.initData);var s,l=this.initPTS;if(void 0===l){var u=t.getStartDTS(o,e);this.initPTS=l=u-r,this.observer.trigger(n.a.INIT_PTS_FOUND,{initPTS:l})}t.offsetStartDTS(o,e,l),s=t.getStartDTS(o,e),this.remuxer.remux(o.audio,o.video,null,null,s,i,a,e)},t.prototype.destroy=function(){},t}();e.a=o},function(t,e,r){"use strict";var i=r(1),n=r(2),a=r(8),o=r(3),s=r(0),l=r(4);function u(t,e){return 255===t[e]&&240==(246&t[e+1])}function d(t,e){return 1&t[e+1]?7:9}function c(t,e){return(3&t[e+3])<<11|t[e+4]<<3|(224&t[e+5])>>>5}function h(t,e){return!!(e+1<t.length&&u(t,e))}function f(t,e){if(e+1<t.length&&u(t,e)){var r=d(t,e);e+5<t.length&&(r=c(t,e));var i=e+r;if(i===t.length||i+1<t.length&&u(t,i))return!0}return!1}function p(t,e,r,a,o){if(!t.samplerate){var l=function(t,e,r,a){var o,l=void 0,u=void 0,d=void 0,c=void 0,h=navigator.userAgent.toLowerCase(),f=a,p=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];if(l=1+((192&e[r+2])>>>6),!((o=(60&e[r+2])>>>2)>p.length-1))return d=(1&e[r+2])<<2,d|=(192&e[r+3])>>>6,s.b.log("manifest codec:"+a+",ADTS data:type:"+l+",sampleingIndex:"+o+"["+p[o]+"Hz],channelConfig:"+d),/firefox/i.test(h)?o>=6?(l=5,c=new Array(4),u=o-3):(l=2,c=new Array(2),u=o):-1!==h.indexOf("android")?(l=2,c=new Array(2),u=o):(l=5,c=new Array(4),a&&(-1!==a.indexOf("mp4a.40.29")||-1!==a.indexOf("mp4a.40.5"))||!a&&o>=6?u=o-3:((a&&-1!==a.indexOf("mp4a.40.2")&&(o>=6&&1===d||/vivaldi/i.test(h))||!a&&1===d)&&(l=2,c=new Array(2)),u=o)),c[0]=l<<3,c[0]|=(14&o)>>1,c[1]|=(1&o)<<7,c[1]|=d<<3,5===l&&(c[1]|=(14&u)>>1,c[2]=(1&u)<<7,c[2]|=8,c[3]=0),{config:c,samplerate:p[o],channelCount:d,codec:"mp4a.40."+l,manifestCodec:f};t.trigger(i.a.ERROR,{type:n.b.MEDIA_ERROR,details:n.a.FRAG_PARSING_ERROR,fatal:!0,reason:"invalid ADTS sampling index:"+o})}(e,r,a,o);t.config=l.config,t.samplerate=l.samplerate,t.channelCount=l.channelCount,t.codec=l.codec,t.manifestCodec=l.manifestCodec,s.b.log("parsed codec:"+t.codec+",rate:"+l.samplerate+",nb channel:"+l.channelCount)}}function g(t){return 9216e4/t}function v(t,e,r,i,n){var a=function(t,e,r,i,n){var a,o=void 0,s=t.length;if(a=d(t,e),o=c(t,e),(o-=a)>0&&e+a+o<=s)return{headerLength:a,frameLength:o,stamp:r+i*n}}(e,r,i,n,g(t.samplerate));if(a){var o=a.stamp,s=a.headerLength,l=a.frameLength,u={unit:e.subarray(r+s,r+s+l),pts:o,dts:o};return t.samples.push(u),t.len+=l,{sample:u,length:l+s}}}var m=r(6);var y=function(){function t(e,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e,this.config=i,this.remuxer=r}return t.prototype.resetInitSegment=function(t,e,r,i){this._audioTrack={container:"audio/adts",type:"audio",id:0,sequenceNumber:0,isAAC:!0,samples:[],len:0,manifestCodec:e,duration:i,inputTimeScale:9e4}},t.prototype.resetTimeStamp=function(){},t.probe=function(t){if(!t)return!1;for(var e=(m.a.getID3Data(t,0)||[]).length,r=t.length;e<r;e++)if(f(t,e))return s.b.log("ADTS sync word found !"),!0;return!1},t.prototype.append=function(t,e,r,i){for(var n=this._audioTrack,a=m.a.getID3Data(t,0)||[],l=m.a.getTimeStamp(a),u=Object(o.a)(l)?90*l:9e4*e,d=0,c=u,f=t.length,g=a.length,y=[{pts:c,dts:c,data:a}];g<f-1;)if(h(t,g)&&g+5<f){p(n,this.observer,t,g,n.manifestCodec);var b=v(n,t,g,u,d);if(!b){s.b.log("Unable to parse AAC frame");break}g+=b.length,c=b.sample.pts,d++}else m.a.isHeader(t,g)?(a=m.a.getID3Data(t,g),y.push({pts:c,dts:c,data:a}),g+=a.length):g++;this.remuxer.remux(n,{samples:[]},{samples:y,inputTimeScale:9e4},{samples:[]},e,r,i)},t.prototype.destroy=function(){},t}(),b=r(9),E={BitratesMap:[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160],SamplingRateMap:[44100,48e3,32e3,22050,24e3,16e3,11025,12e3,8e3],SamplesCoefficients:[[0,72,144,12],[0,0,0,0],[0,72,144,12],[0,144,144,12]],BytesInSlot:[0,1,1,4],appendFrame:function(t,e,r,i,n){if(!(r+24>e.length)){var a=this.parseHeader(e,r);if(a&&r+a.frameLength<=e.length){var o=i+n*(9e4*a.samplesPerFrame/a.sampleRate),s={unit:e.subarray(r,r+a.frameLength),pts:o,dts:o};return t.config=[],t.channelCount=a.channelCount,t.samplerate=a.sampleRate,t.samples.push(s),t.len+=a.frameLength,{sample:s,length:a.frameLength}}}},parseHeader:function(t,e){var r=t[e+1]>>3&3,i=t[e+1]>>1&3,n=t[e+2]>>4&15,a=t[e+2]>>2&3,o=t[e+2]>>1&1;if(1!==r&&0!==n&&15!==n&&3!==a){var s=3===r?3-i:3===i?3:4,l=1e3*E.BitratesMap[14*s+n-1],u=3===r?0:2===r?1:2,d=E.SamplingRateMap[3*u+a],c=t[e+3]>>6==3?1:2,h=E.SamplesCoefficients[r][i],f=E.BytesInSlot[i],p=8*h*f;return{sampleRate:d,channelCount:c,frameLength:parseInt(h*l/d+o,10)*f,samplesPerFrame:p}}},isHeaderPattern:function(t,e){return 255===t[e]&&224==(224&t[e+1])&&0!=(6&t[e+1])},isHeader:function(t,e){return!!(e+1<t.length&&this.isHeaderPattern(t,e))},probe:function(t,e){if(e+1<t.length&&this.isHeaderPattern(t,e)){var r=this.parseHeader(t,e),i=4;r&&r.frameLength&&(i=r.frameLength);var n=e+i;if(n===t.length||n+1<t.length&&this.isHeaderPattern(t,n))return!0}return!1}},T=E;var S=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=e,this.bytesAvailable=e.byteLength,this.word=0,this.bitsAvailable=0}return t.prototype.loadWord=function(){var t=this.data,e=this.bytesAvailable,r=t.byteLength-e,i=new Uint8Array(4),n=Math.min(4,e);if(0===n)throw new Error("no bytes available");i.set(t.subarray(r,r+n)),this.word=new DataView(i.buffer).getUint32(0),this.bitsAvailable=8*n,this.bytesAvailable-=n},t.prototype.skipBits=function(t){var e=void 0;this.bitsAvailable>t?(this.word<<=t,this.bitsAvailable-=t):(t-=this.bitsAvailable,t-=(e=t>>3)>>3,this.bytesAvailable-=e,this.loadWord(),this.word<<=t,this.bitsAvailable-=t)},t.prototype.readBits=function(t){var e=Math.min(this.bitsAvailable,t),r=this.word>>>32-e;return t>32&&s.b.error("Cannot read more than 32 bits at a time"),this.bitsAvailable-=e,this.bitsAvailable>0?this.word<<=e:this.bytesAvailable>0&&this.loadWord(),(e=t-e)>0&&this.bitsAvailable?r<<e|this.readBits(e):r},t.prototype.skipLZ=function(){var t=void 0;for(t=0;t<this.bitsAvailable;++t)if(0!=(this.word&2147483648>>>t))return this.word<<=t,this.bitsAvailable-=t,t;return this.loadWord(),t+this.skipLZ()},t.prototype.skipUEG=function(){this.skipBits(1+this.skipLZ())},t.prototype.skipEG=function(){this.skipBits(1+this.skipLZ())},t.prototype.readUEG=function(){var t=this.skipLZ();return this.readBits(t+1)-1},t.prototype.readEG=function(){var t=this.readUEG();return 1&t?1+t>>>1:-1*(t>>>1)},t.prototype.readBoolean=function(){return 1===this.readBits(1)},t.prototype.readUByte=function(){return this.readBits(8)},t.prototype.readUShort=function(){return this.readBits(16)},t.prototype.readUInt=function(){return this.readBits(32)},t.prototype.skipScalingList=function(t){var e=8,r=8,i=void 0;for(i=0;i<t;i++)0!==r&&(r=(e+this.readEG()+256)%256),e=0===r?e:r},t.prototype.readSPS=function(){var t,e,r,i,n=0,a=0,o=0,s=0,l=void 0,u=void 0,d=void 0,c=this.readUByte.bind(this),h=this.readBits.bind(this),f=this.readUEG.bind(this),p=this.readBoolean.bind(this),g=this.skipBits.bind(this),v=this.skipEG.bind(this),m=this.skipUEG.bind(this),y=this.skipScalingList.bind(this);if(c(),t=c(),h(5),g(3),c(),m(),100===t||110===t||122===t||244===t||44===t||83===t||86===t||118===t||128===t){var b=f();if(3===b&&g(1),m(),m(),g(1),p())for(u=3!==b?8:12,d=0;d<u;d++)p()&&y(d<6?16:64)}m();var E=f();if(0===E)f();else if(1===E)for(g(1),v(),v(),l=f(),d=0;d<l;d++)v();m(),g(1),e=f(),r=f(),0===(i=h(1))&&g(1),g(1),p()&&(n=f(),a=f(),o=f(),s=f());var T=[1,1];if(p()&&p())switch(c()){case 1:T=[1,1];break;case 2:T=[12,11];break;case 3:T=[10,11];break;case 4:T=[16,11];break;case 5:T=[40,33];break;case 6:T=[24,11];break;case 7:T=[20,11];break;case 8:T=[32,11];break;case 9:T=[80,33];break;case 10:T=[18,11];break;case 11:T=[15,11];break;case 12:T=[64,33];break;case 13:T=[160,99];break;case 14:T=[4,3];break;case 15:T=[3,2];break;case 16:T=[2,1];break;case 255:T=[c()<<8|c(),c()<<8|c()]}return{width:Math.ceil(16*(e+1)-2*n-2*a),height:(2-i)*(r+1)*16-(i?2:4)*(o+s),pixelRatio:T}},t.prototype.readSliceType=function(){return this.readUByte(),this.readUEG(),this.readUEG()},t}();var _=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.decryptdata=i,this.discardEPB=n,this.decrypter=new a.a(e,r,{removePKCS7Padding:!1})}return t.prototype.decryptBuffer=function(t,e){this.decrypter.decrypt(t,this.decryptdata.key.buffer,this.decryptdata.iv.buffer,e)},t.prototype.decryptAacSample=function(t,e,r,i){var n=t[e].unit,a=n.subarray(16,n.length-n.length%16),o=a.buffer.slice(a.byteOffset,a.byteOffset+a.length),s=this;this.decryptBuffer(o,function(a){a=new Uint8Array(a),n.set(a,16),i||s.decryptAacSamples(t,e+1,r)})},t.prototype.decryptAacSamples=function(t,e,r){for(;;e++){if(e>=t.length)return void r();if(!(t[e].unit.length<32)){var i=this.decrypter.isSync();if(this.decryptAacSample(t,e,r,i),!i)return}}},t.prototype.getAvcEncryptedData=function(t){for(var e=16*Math.floor((t.length-48)/160)+16,r=new Int8Array(e),i=0,n=32;n<=t.length-16;n+=160,i+=16)r.set(t.subarray(n,n+16),i);return r},t.prototype.getAvcDecryptedUnit=function(t,e){e=new Uint8Array(e);for(var r=0,i=32;i<=t.length-16;i+=160,r+=16)t.set(e.subarray(r,r+16),i);return t},t.prototype.decryptAvcSample=function(t,e,r,i,n,a){var o=this.discardEPB(n.data),s=this.getAvcEncryptedData(o),l=this;this.decryptBuffer(s.buffer,function(s){n.data=l.getAvcDecryptedUnit(o,s),a||l.decryptAvcSamples(t,e,r+1,i)})},t.prototype.decryptAvcSamples=function(t,e,r,i){for(;;e++,r=0){if(e>=t.length)return void i();for(var n=t[e].units;!(r>=n.length);r++){var a=n[r];if(!(a.length<=48||1!==a.type&&5!==a.type)){var o=this.decrypter.isSync();if(this.decryptAvcSample(t,e,r,i,a,o),!o)return}}}},t}();var A={video:1,audio:2,id3:3,text:4},R=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e,this.config=i,this.typeSupported=n,this.remuxer=r,this.sampleAes=null}return t.prototype.setDecryptData=function(t){null!=t&&null!=t.key&&"SAMPLE-AES"===t.method?this.sampleAes=new _(this.observer,this.config,t,this.discardEPB):this.sampleAes=null},t.probe=function(e){var r=t._syncOffset(e);return!(r<0)&&(r&&s.b.warn("MPEG2-TS detected but first sync word found @ offset "+r+", junk ahead ?"),!0)},t._syncOffset=function(t){for(var e=Math.min(1e3,t.length-564),r=0;r<e;){if(71===t[r]&&71===t[r+188]&&71===t[r+376])return r;r++}return-1},t.createTrack=function(t,e){return{container:"video"===t||"audio"===t?"video/mp2t":void 0,type:t,id:A[t],pid:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],len:0,dropped:"video"===t?0:void 0,isAAC:"audio"===t||void 0,duration:"audio"===t?e:void 0}},t.prototype.resetInitSegment=function(e,r,i,n){this.pmtParsed=!1,this._pmtId=-1,this._avcTrack=t.createTrack("video",n),this._audioTrack=t.createTrack("audio",n),this._id3Track=t.createTrack("id3",n),this._txtTrack=t.createTrack("text",n),this.aacOverFlow=null,this.aacLastPTS=null,this.avcSample=null,this.audioCodec=r,this.videoCodec=i,this._duration=n},t.prototype.resetTimeStamp=function(){},t.prototype.append=function(e,r,a,o){var l=void 0,u=e.length,d=void 0,c=void 0,h=void 0,f=void 0,p=!1;this.contiguous=a;var g=this.pmtParsed,v=this._avcTrack,m=this._audioTrack,y=this._id3Track,b=v.pid,E=m.pid,T=y.pid,S=this._pmtId,_=v.pesData,A=m.pesData,R=y.pesData,w=this._parsePAT,L=this._parsePMT,D=this._parsePES,k=this._parseAVCPES.bind(this),I=this._parseAACPES.bind(this),O=this._parseMPEGPES.bind(this),C=this._parseID3PES.bind(this),x=t._syncOffset(e);for(u-=(u+x)%188,l=x;l<u;l+=188)if(71===e[l]){if(d=!!(64&e[l+1]),c=((31&e[l+1])<<8)+e[l+2],(48&e[l+3])>>4>1){if((h=l+5+e[l+4])===l+188)continue}else h=l+4;switch(c){case b:d&&(_&&(f=D(_))&&void 0!==f.pts&&k(f,!1),_={data:[],size:0}),_&&(_.data.push(e.subarray(h,l+188)),_.size+=l+188-h);break;case E:d&&(A&&(f=D(A))&&void 0!==f.pts&&(m.isAAC?I(f):O(f)),A={data:[],size:0}),A&&(A.data.push(e.subarray(h,l+188)),A.size+=l+188-h);break;case T:d&&(R&&(f=D(R))&&void 0!==f.pts&&C(f),R={data:[],size:0}),R&&(R.data.push(e.subarray(h,l+188)),R.size+=l+188-h);break;case 0:d&&(h+=e[h]+1),S=this._pmtId=w(e,h);break;case S:d&&(h+=e[h]+1);var P=L(e,h,!0===this.typeSupported.mpeg||!0===this.typeSupported.mp3,null!=this.sampleAes);(b=P.avc)>0&&(v.pid=b),(E=P.audio)>0&&(m.pid=E,m.isAAC=P.isAAC),(T=P.id3)>0&&(y.pid=T),p&&!g&&(s.b.log("reparse from beginning"),p=!1,l=x-188),g=this.pmtParsed=!0;break;case 17:case 8191:break;default:p=!0}}else this.observer.trigger(i.a.ERROR,{type:n.b.MEDIA_ERROR,details:n.a.FRAG_PARSING_ERROR,fatal:!1,reason:"TS packet did not start with 0x47"});_&&(f=D(_))&&void 0!==f.pts?(k(f,!0),v.pesData=null):v.pesData=_,A&&(f=D(A))&&void 0!==f.pts?(m.isAAC?I(f):O(f),m.pesData=null):(A&&A.size&&s.b.log("last AAC PES packet truncated,might overlap between fragments"),m.pesData=A),R&&(f=D(R))&&void 0!==f.pts?(C(f),y.pesData=null):y.pesData=R,null==this.sampleAes?this.remuxer.remux(m,v,y,this._txtTrack,r,a,o):this.decryptAndRemux(m,v,y,this._txtTrack,r,a,o)},t.prototype.decryptAndRemux=function(t,e,r,i,n,a,o){if(t.samples&&t.isAAC){var s=this;this.sampleAes.decryptAacSamples(t.samples,0,function(){s.decryptAndRemuxAvc(t,e,r,i,n,a,o)})}else this.decryptAndRemuxAvc(t,e,r,i,n,a,o)},t.prototype.decryptAndRemuxAvc=function(t,e,r,i,n,a,o){if(e.samples){var s=this;this.sampleAes.decryptAvcSamples(e.samples,0,0,function(){s.remuxer.remux(t,e,r,i,n,a,o)})}else this.remuxer.remux(t,e,r,i,n,a,o)},t.prototype.destroy=function(){this._initPTS=this._initDTS=void 0,this._duration=0},t.prototype._parsePAT=function(t,e){return(31&t[e+10])<<8|t[e+11]},t.prototype._parsePMT=function(t,e,r,i){var n,a=void 0,o={audio:-1,avc:-1,id3:-1,isAAC:!0};for(n=e+3+((15&t[e+1])<<8|t[e+2])-4,e+=12+((15&t[e+10])<<8|t[e+11]);e<n;){switch(a=(31&t[e+1])<<8|t[e+2],t[e]){case 207:if(!i){s.b.log("unkown stream type:"+t[e]);break}case 15:-1===o.audio&&(o.audio=a);break;case 21:-1===o.id3&&(o.id3=a);break;case 219:if(!i){s.b.log("unkown stream type:"+t[e]);break}case 27:-1===o.avc&&(o.avc=a);break;case 3:case 4:r?-1===o.audio&&(o.audio=a,o.isAAC=!1):s.b.log("MPEG audio found, not supported in this browser for now");break;case 36:s.b.warn("HEVC stream type found, not supported for now");break;default:s.b.log("unkown stream type:"+t[e])}e+=5+((15&t[e+3])<<8|t[e+4])}return o},t.prototype._parsePES=function(t){var e=0,r=void 0,i=void 0,n=void 0,a=void 0,o=void 0,l=void 0,u=void 0,d=void 0,c=t.data;if(!t||0===t.size)return null;for(;c[0].length<19&&c.length>1;){var h=new Uint8Array(c[0].length+c[1].length);h.set(c[0]),h.set(c[1],c[0].length),c[0]=h,c.splice(1,1)}if(1===((r=c[0])[0]<<16)+(r[1]<<8)+r[2]){if((n=(r[4]<<8)+r[5])&&n>t.size-6)return null;192&(i=r[7])&&((l=536870912*(14&r[9])+4194304*(255&r[10])+16384*(254&r[11])+128*(255&r[12])+(254&r[13])/2)>4294967295&&(l-=8589934592),64&i?((u=536870912*(14&r[14])+4194304*(255&r[15])+16384*(254&r[16])+128*(255&r[17])+(254&r[18])/2)>4294967295&&(u-=8589934592),l-u>54e5&&(s.b.warn(Math.round((l-u)/9e4)+"s delta between PTS and DTS, align them"),l=u)):u=l),d=(a=r[8])+9,t.size-=d,o=new Uint8Array(t.size);for(var f=0,p=c.length;f<p;f++){var g=(r=c[f]).byteLength;if(d){if(d>g){d-=g;continue}r=r.subarray(d),g-=d,d=0}o.set(r,e),e+=g}return n&&(n-=a+3),{data:o,pts:l,dts:u,len:n}}return null},t.prototype.pushAccesUnit=function(t,e){if(t.units.length&&t.frame){var r=e.samples,i=r.length;!this.config.forceKeyFrameOnDiscontinuity||!0===t.key||e.sps&&(i||this.contiguous)?(t.id=i,r.push(t)):e.dropped++}t.debug.length&&s.b.log(t.pts+"/"+t.dts+":"+t.debug)},t.prototype._parseAVCPES=function(t,e){var r=this,i=this._avcTrack,n=this._parseAVCNALu(t.data),a=void 0,o=this.avcSample,s=void 0,l=!1,u=void 0,d=this.pushAccesUnit.bind(this),c=function(t,e,r,i){return{key:t,pts:e,dts:r,units:[],debug:i}};t.data=null,o&&n.length&&!i.audFound&&(d(o,i),o=this.avcSample=c(!1,t.pts,t.dts,"")),n.forEach(function(e){switch(e.type){case 1:s=!0,o||(o=r.avcSample=c(!0,t.pts,t.dts,"")),o.frame=!0;var n=e.data;if(l&&n.length>4){var h=new S(n).readSliceType();2!==h&&4!==h&&7!==h&&9!==h||(o.key=!0)}break;case 5:s=!0,o||(o=r.avcSample=c(!0,t.pts,t.dts,"")),o.key=!0,o.frame=!0;break;case 6:s=!0,(a=new S(r.discardEPB(e.data))).readUByte();for(var f=0,p=0,g=!1,v=0;!g&&a.bytesAvailable>1;){f=0;do{f+=v=a.readUByte()}while(255===v);p=0;do{p+=v=a.readUByte()}while(255===v);if(4===f&&0!==a.bytesAvailable){if(g=!0,181===a.readUByte())if(49===a.readUShort())if(1195456820===a.readUInt())if(3===a.readUByte()){var m=a.readUByte(),y=31&m,b=[m,a.readUByte()];for(u=0;u<y;u++)b.push(a.readUByte()),b.push(a.readUByte()),b.push(a.readUByte());r._insertSampleInOrder(r._txtTrack.samples,{type:3,pts:t.pts,bytes:b})}}else if(p<a.bytesAvailable)for(u=0;u<p;u++)a.readUByte()}break;case 7:if(s=!0,l=!0,!i.sps){var E=(a=new S(e.data)).readSPS();i.width=E.width,i.height=E.height,i.pixelRatio=E.pixelRatio,i.sps=[e.data],i.duration=r._duration;var T=e.data.subarray(1,4),_="avc1.";for(u=0;u<3;u++){var A=T[u].toString(16);A.length<2&&(A="0"+A),_+=A}i.codec=_}break;case 8:s=!0,i.pps||(i.pps=[e.data]);break;case 9:s=!1,i.audFound=!0,o&&d(o,i),o=r.avcSample=c(!1,t.pts,t.dts,"");break;case 12:s=!1;break;default:s=!1,o&&(o.debug+="unknown NAL "+e.type+" ")}o&&s&&o.units.push(e)}),e&&o&&(d(o,i),this.avcSample=null)},t.prototype._insertSampleInOrder=function(t,e){var r=t.length;if(r>0){if(e.pts>=t[r-1].pts)t.push(e);else for(var i=r-1;i>=0;i--)if(e.pts<t[i].pts){t.splice(i,0,e);break}}else t.push(e)},t.prototype._getLastNalUnit=function(){var t=this.avcSample,e=void 0;if(!t||0===t.units.length){var r=this._avcTrack.samples;t=r[r.length-1]}if(t){var i=t.units;e=i[i.length-1]}return e},t.prototype._parseAVCNALu=function(t){var e=0,r=t.byteLength,i=void 0,n=void 0,a=this._avcTrack,o=a.naluState||0,s=o,l=[],u=void 0,d=-1,c=void 0;for(-1===o&&(d=0,c=31&t[0],o=0,e=1);e<r;)if(i=t[e++],o)if(1!==o)if(i)if(1===i){if(d>=0)u={data:t.subarray(d,e-o-1),type:c},l.push(u);else{var h=this._getLastNalUnit();if(h&&(s&&e<=4-s&&h.state&&(h.data=h.data.subarray(0,h.data.byteLength-s)),(n=e-o-1)>0)){var f=new Uint8Array(h.data.byteLength+n);f.set(h.data,0),f.set(t.subarray(0,n),h.data.byteLength),h.data=f}}e<r?(d=e,c=31&t[e],o=0):o=-1}else o=0;else o=3;else o=i?0:2;else o=i?0:1;if(d>=0&&o>=0&&(u={data:t.subarray(d,r),type:c,state:o},l.push(u)),0===l.length){var p=this._getLastNalUnit();if(p){var g=new Uint8Array(p.data.byteLength+t.byteLength);g.set(p.data,0),g.set(t,p.data.byteLength),p.data=g}}return a.naluState=o,l},t.prototype.discardEPB=function(t){for(var e,r=t.byteLength,i=[],n=1,a=void 0;n<r-2;)0===t[n]&&0===t[n+1]&&3===t[n+2]?(i.push(n+2),n+=2):n++;if(0===i.length)return t;e=r-i.length,a=new Uint8Array(e);var o=0;for(n=0;n<e;o++,n++)o===i[0]&&(o++,i.shift()),a[n]=t[o];return a},t.prototype._parseAACPES=function(t){var e,r,a=this._audioTrack,o=t.data,l=t.pts,u=this.aacOverFlow,d=this.aacLastPTS,c=void 0,f=void 0,m=void 0;if(u){var y=new Uint8Array(u.byteLength+o.byteLength);y.set(u,0),y.set(o,u.byteLength),o=y}for(f=0,r=o.length;f<r-1&&!h(o,f);f++);if(f){var b=void 0,E=void 0;if(f<r-1?(b="AAC PES did not start with ADTS header,offset:"+f,E=!1):(b="no ADTS header found in AAC PES",E=!0),s.b.warn("parsing error:"+b),this.observer.trigger(i.a.ERROR,{type:n.b.MEDIA_ERROR,details:n.a.FRAG_PARSING_ERROR,fatal:E,reason:b}),E)return}if(p(a,this.observer,o,f,this.audioCodec),c=0,e=g(a.samplerate),u&&d){var T=d+e;Math.abs(T-l)>1&&(s.b.log("AAC: align PTS for overlapping frames by "+Math.round((T-l)/90)),l=T)}for(;f<r;)if(h(o,f)&&f+5<r){var S=v(a,o,f,l,c);if(!S)break;f+=S.length,m=S.sample.pts,c++}else f++;u=f<r?o.subarray(f,r):null,this.aacOverFlow=u,this.aacLastPTS=m},t.prototype._parseMPEGPES=function(t){for(var e=t.data,r=e.length,i=0,n=0,a=t.pts;n<r;)if(T.isHeader(e,n)){var o=T.appendFrame(this._audioTrack,e,n,a,i);if(!o)break;n+=o.length,i++}else n++},t.prototype._parseID3PES=function(t){this._id3Track.samples.push(t)},t}();var w=function(){function t(e,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e,this.config=i,this.remuxer=r}return t.prototype.resetInitSegment=function(t,e,r,i){this._audioTrack={container:"audio/mpeg",type:"audio",id:-1,sequenceNumber:0,isAAC:!1,samples:[],len:0,manifestCodec:e,duration:i,inputTimeScale:9e4}},t.prototype.resetTimeStamp=function(){},t.probe=function(t){var e=void 0,r=void 0,i=m.a.getID3Data(t,0);if(i&&void 0!==m.a.getTimeStamp(i))for(e=i.length,r=Math.min(t.length-1,e+100);e<r;e++)if(T.probe(t,e))return s.b.log("MPEG Audio sync word found !"),!0;return!1},t.prototype.append=function(t,e,r,i){for(var n=m.a.getID3Data(t,0),a=m.a.getTimeStamp(n),o=a?90*a:9e4*e,s=n.length,l=t.length,u=0,d=0,c=this._audioTrack,h=[{pts:o,dts:o,data:n}];s<l;)if(T.isHeader(t,s)){var f=T.appendFrame(c,t,s,o,u);if(!f)break;s+=f.length,d=f.sample.pts,u++}else m.a.isHeader(t,s)?(n=m.a.getID3Data(t,s),h.push({pts:d,dts:d,data:n}),s+=n.length):s++;this.remuxer.remux(c,{samples:[]},{samples:h,inputTimeScale:9e4},{samples:[]},e,r,i)},t.prototype.destroy=function(){},t}();var L=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.getSilentFrame=function(t,e){switch(t){case"mp4a.40.2":if(1===e)return new Uint8Array([0,200,0,128,35,128]);if(2===e)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]);break;default:if(1===e)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===e)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===e)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null},t}();var D=Math.pow(2,32)-1,k=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.init=function(){t.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]};var e=void 0;for(e in t.types)t.types.hasOwnProperty(e)&&(t.types[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]);var r=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),i=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]);t.HDLR_TYPES={video:r,audio:i};var n=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),a=new Uint8Array([0,0,0,0,0,0,0,0]);t.STTS=t.STSC=t.STCO=a,t.STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),t.VMHD=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),t.SMHD=new Uint8Array([0,0,0,0,0,0,0,0]),t.STSD=new Uint8Array([0,0,0,0,0,0,0,1]);var o=new Uint8Array([105,115,111,109]),s=new Uint8Array([97,118,99,49]),l=new Uint8Array([0,0,0,1]);t.FTYP=t.box(t.types.ftyp,o,l,o,s),t.DINF=t.box(t.types.dinf,t.box(t.types.dref,n))},t.box=function(t){for(var e=Array.prototype.slice.call(arguments,1),r=8,i=e.length,n=i,a=void 0;i--;)r+=e[i].byteLength;for((a=new Uint8Array(r))[0]=r>>24&255,a[1]=r>>16&255,a[2]=r>>8&255,a[3]=255&r,a.set(t,4),i=0,r=8;i<n;i++)a.set(e[i],r),r+=e[i].byteLength;return a},t.hdlr=function(e){return t.box(t.types.hdlr,t.HDLR_TYPES[e])},t.mdat=function(e){return t.box(t.types.mdat,e)},t.mdhd=function(e,r){r*=e;var i=Math.floor(r/(D+1)),n=Math.floor(r%(D+1));return t.box(t.types.mdhd,new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,e>>24&255,e>>16&255,e>>8&255,255&e,i>>24,i>>16&255,i>>8&255,255&i,n>>24,n>>16&255,n>>8&255,255&n,85,196,0,0]))},t.mdia=function(e){return t.box(t.types.mdia,t.mdhd(e.timescale,e.duration),t.hdlr(e.type),t.minf(e))},t.mfhd=function(e){return t.box(t.types.mfhd,new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e]))},t.minf=function(e){return"audio"===e.type?t.box(t.types.minf,t.box(t.types.smhd,t.SMHD),t.DINF,t.stbl(e)):t.box(t.types.minf,t.box(t.types.vmhd,t.VMHD),t.DINF,t.stbl(e))},t.moof=function(e,r,i){return t.box(t.types.moof,t.mfhd(e),t.traf(i,r))},t.moov=function(e){for(var r=e.length,i=[];r--;)i[r]=t.trak(e[r]);return t.box.apply(null,[t.types.moov,t.mvhd(e[0].timescale,e[0].duration)].concat(i).concat(t.mvex(e)))},t.mvex=function(e){for(var r=e.length,i=[];r--;)i[r]=t.trex(e[r]);return t.box.apply(null,[t.types.mvex].concat(i))},t.mvhd=function(e,r){r*=e;var i=Math.floor(r/(D+1)),n=Math.floor(r%(D+1)),a=new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,e>>24&255,e>>16&255,e>>8&255,255&e,i>>24,i>>16&255,i>>8&255,255&i,n>>24,n>>16&255,n>>8&255,255&n,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return t.box(t.types.mvhd,a)},t.sdtp=function(e){var r=e.samples||[],i=new Uint8Array(4+r.length),n=void 0,a=void 0;for(a=0;a<r.length;a++)n=r[a].flags,i[a+4]=n.dependsOn<<4|n.isDependedOn<<2|n.hasRedundancy;return t.box(t.types.sdtp,i)},t.stbl=function(e){return t.box(t.types.stbl,t.stsd(e),t.box(t.types.stts,t.STTS),t.box(t.types.stsc,t.STSC),t.box(t.types.stsz,t.STSZ),t.box(t.types.stco,t.STCO))},t.avc1=function(e){var r=[],i=[],n=void 0,a=void 0,o=void 0;for(n=0;n<e.sps.length;n++)o=(a=e.sps[n]).byteLength,r.push(o>>>8&255),r.push(255&o),r=r.concat(Array.prototype.slice.call(a));for(n=0;n<e.pps.length;n++)o=(a=e.pps[n]).byteLength,i.push(o>>>8&255),i.push(255&o),i=i.concat(Array.prototype.slice.call(a));var s=t.box(t.types.avcC,new Uint8Array([1,r[3],r[4],r[5],255,224|e.sps.length].concat(r).concat([e.pps.length]).concat(i))),l=e.width,u=e.height,d=e.pixelRatio[0],c=e.pixelRatio[1];return t.box(t.types.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,l>>8&255,255&l,u>>8&255,255&u,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),s,t.box(t.types.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192])),t.box(t.types.pasp,new Uint8Array([d>>24,d>>16&255,d>>8&255,255&d,c>>24,c>>16&255,c>>8&255,255&c])))},t.esds=function(t){var e=t.config.length;return new Uint8Array([0,0,0,0,3,23+e,0,1,0,4,15+e,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([e]).concat(t.config).concat([6,1,2]))},t.mp4a=function(e){var r=e.samplerate;return t.box(t.types.mp4a,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,r>>8&255,255&r,0,0]),t.box(t.types.esds,t.esds(e)))},t.mp3=function(e){var r=e.samplerate;return t.box(t.types[".mp3"],new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,r>>8&255,255&r,0,0]))},t.stsd=function(e){return"audio"===e.type?e.isAAC||"mp3"!==e.codec?t.box(t.types.stsd,t.STSD,t.mp4a(e)):t.box(t.types.stsd,t.STSD,t.mp3(e)):t.box(t.types.stsd,t.STSD,t.avc1(e))},t.tkhd=function(e){var r=e.id,i=e.duration*e.timescale,n=e.width,a=e.height,o=Math.floor(i/(D+1)),s=Math.floor(i%(D+1));return t.box(t.types.tkhd,new Uint8Array([1,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,r>>24&255,r>>16&255,r>>8&255,255&r,0,0,0,0,o>>24,o>>16&255,o>>8&255,255&o,s>>24,s>>16&255,s>>8&255,255&s,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,n>>8&255,255&n,0,0,a>>8&255,255&a,0,0]))},t.traf=function(e,r){var i=t.sdtp(e),n=e.id,a=Math.floor(r/(D+1)),o=Math.floor(r%(D+1));return t.box(t.types.traf,t.box(t.types.tfhd,new Uint8Array([0,0,0,0,n>>24,n>>16&255,n>>8&255,255&n])),t.box(t.types.tfdt,new Uint8Array([1,0,0,0,a>>24,a>>16&255,a>>8&255,255&a,o>>24,o>>16&255,o>>8&255,255&o])),t.trun(e,i.length+16+20+8+16+8+8),i)},t.trak=function(e){return e.duration=e.duration||4294967295,t.box(t.types.trak,t.tkhd(e),t.mdia(e))},t.trex=function(e){var r=e.id;return t.box(t.types.trex,new Uint8Array([0,0,0,0,r>>24,r>>16&255,r>>8&255,255&r,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]))},t.trun=function(e,r){var i=e.samples||[],n=i.length,a=12+16*n,o=new Uint8Array(a),s=void 0,l=void 0,u=void 0,d=void 0,c=void 0,h=void 0;for(r+=8+a,o.set([0,0,15,1,n>>>24&255,n>>>16&255,n>>>8&255,255&n,r>>>24&255,r>>>16&255,r>>>8&255,255&r],0),s=0;s<n;s++)u=(l=i[s]).duration,d=l.size,c=l.flags,h=l.cts,o.set([u>>>24&255,u>>>16&255,u>>>8&255,255&u,d>>>24&255,d>>>16&255,d>>>8&255,255&d,c.isLeading<<2|c.dependsOn,c.isDependedOn<<6|c.hasRedundancy<<4|c.paddingValue<<1|c.isNonSync,61440&c.degradPrio,15&c.degradPrio,h>>>24&255,h>>>16&255,h>>>8&255,255&h],12+16*s);return t.box(t.types.trun,o)},t.initSegment=function(e){t.types||t.init();var r=t.moov(e),i=void 0;return(i=new Uint8Array(t.FTYP.byteLength+r.byteLength)).set(t.FTYP),i.set(r,t.FTYP.byteLength),i},t}();var I=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e,this.config=r,this.typeSupported=i;var a=navigator.userAgent;this.isSafari=n&&n.indexOf("Apple")>-1&&a&&!a.match("CriOS"),this.ISGenerated=!1}return t.prototype.destroy=function(){},t.prototype.resetTimeStamp=function(t){this._initPTS=this._initDTS=t},t.prototype.resetInitSegment=function(){this.ISGenerated=!1},t.prototype.remux=function(t,e,r,n,a,o,l){if(this.ISGenerated||this.generateIS(t,e,a),this.ISGenerated){var u=t.samples.length,d=e.samples.length,c=a,h=a;if(u&&d){var f=(t.samples[0].dts-e.samples[0].dts)/e.inputTimeScale;c+=Math.max(0,f),h+=Math.max(0,-f)}if(u){t.timescale||(s.b.warn("regenerate InitSegment as audio detected"),this.generateIS(t,e,a));var p=this.remuxAudio(t,c,o,l);if(d){var g=void 0;p&&(g=p.endPTS-p.startPTS),e.timescale||(s.b.warn("regenerate InitSegment as video detected"),this.generateIS(t,e,a)),this.remuxVideo(e,h,o,g,l)}}else if(d){var v=this.remuxVideo(e,h,o,0,l);v&&t.codec&&this.remuxEmptyAudio(t,c,o,v)}}r.samples.length&&this.remuxID3(r,a),n.samples.length&&this.remuxText(n,a),this.observer.trigger(i.a.FRAG_PARSED)},t.prototype.generateIS=function(t,e,r){var a=this.observer,o=t.samples,l=e.samples,u=this.typeSupported,d="audio/mp4",c={},h={tracks:c},f=void 0===this._initPTS,p=void 0,g=void 0;if(f&&(p=g=1/0),t.config&&o.length&&(t.timescale=t.samplerate,s.b.log("audio sampling rate : "+t.samplerate),t.isAAC||(u.mpeg?(d="audio/mpeg",t.codec=""):u.mp3&&(t.codec="mp3")),c.audio={container:d,codec:t.codec,initSegment:!t.isAAC&&u.mpeg?new Uint8Array:k.initSegment([t]),metadata:{channelCount:t.channelCount}},f&&(p=g=o[0].pts-t.inputTimeScale*r)),e.sps&&e.pps&&l.length){var v=e.inputTimeScale;e.timescale=v,c.video={container:"video/mp4",codec:e.codec,initSegment:k.initSegment([e]),metadata:{width:e.width,height:e.height}},f&&(p=Math.min(p,l[0].pts-v*r),g=Math.min(g,l[0].dts-v*r),this.observer.trigger(i.a.INIT_PTS_FOUND,{initPTS:p}))}Object.keys(c).length?(a.trigger(i.a.FRAG_PARSING_INIT_SEGMENT,h),this.ISGenerated=!0,f&&(this._initPTS=p,this._initDTS=g)):a.trigger(i.a.ERROR,{type:n.b.MEDIA_ERROR,details:n.a.FRAG_PARSING_ERROR,fatal:!1,reason:"no audio/video samples found"})},t.prototype.remuxVideo=function(t,e,r,a,o){var l,u,d,c=8,h=t.timescale,f=void 0,p=void 0,g=void 0,v=void 0,m=t.samples,y=[],b=m.length,E=this._PTSNormalize,T=this._initDTS,S=this.nextAvcDts,_=this.isSafari;if(0!==b){_&&(r|=m.length&&S&&(o&&Math.abs(e-S/h)<.1||Math.abs(m[0].pts-S-T)<h/5)),r||(S=e*h),m.forEach(function(t){t.pts=E(t.pts-T,S),t.dts=E(t.dts-T,S)}),m.sort(function(t,e){var r=t.dts-e.dts,i=t.pts-e.pts;return r||i||t.id-e.id});var A=m.reduce(function(t,e){return Math.max(Math.min(t,e.pts-e.dts),-18e3)},0);if(A<0){s.b.warn("PTS < DTS detected in video samples, shifting DTS by "+Math.round(A/90)+" ms to overcome this issue");for(var R=0;R<m.length;R++)m[R].dts+=A}var w=m[0];v=Math.max(w.dts,0),g=Math.max(w.pts,0);var L=Math.round((v-S)/90);r&&L&&(L>1?s.b.log("AVC:"+L+" ms hole between fragments detected,filling it"):L<-1&&s.b.log("AVC:"+-L+" ms overlapping between fragments detected"),v=S,m[0].dts=v,g=Math.max(g-L,S),m[0].pts=g,s.b.log("Video/PTS/DTS adjusted: "+Math.round(g/90)+"/"+Math.round(v/90)+",delta:"+L+" ms")),v,w=m[m.length-1],d=Math.max(w.dts,0),u=Math.max(w.pts,0,d),_&&(f=Math.round((d-v)/(m.length-1)));for(var D=0,I=0,O=0;O<b;O++){for(var C=m[O],x=C.units,P=x.length,F=0,M=0;M<P;M++)F+=x[M].data.length;I+=F,D+=P,C.length=F,C.dts=_?v+O*f:Math.max(C.dts,v),C.pts=Math.max(C.pts,C.dts)}var N=I+4*D+8;try{p=new Uint8Array(N)}catch(t){return void this.observer.trigger(i.a.ERROR,{type:n.b.MUX_ERROR,details:n.a.REMUX_ALLOC_ERROR,fatal:!1,bytes:N,reason:"fail allocating video mdat "+N})}var U=new DataView(p.buffer);U.setUint32(0,N),p.set(k.types.mdat,4);for(var B=0;B<b;B++){for(var G=m[B],j=G.units,K=0,H=void 0,V=0,Y=j.length;V<Y;V++){var W=j[V],q=W.data,z=W.data.byteLength;U.setUint32(c,z),c+=4,p.set(q,c),c+=z,K+=4+z}if(_)H=Math.max(0,f*Math.round((G.pts-G.dts)/f));else{if(B<b-1)f=m[B+1].dts-G.dts;else{var X=this.config,Q=G.dts-m[B>0?B-1:B].dts;if(X.stretchShortVideoTrack){var $=X.maxBufferHole,J=Math.floor($*h),Z=(a?g+a*h:this.nextAudioPts)-G.pts;Z>J?((f=Z-Q)<0&&(f=Q),s.b.log("It is approximately "+Z/90+" ms to the next segment; using duration "+f/90+" ms for the last video frame.")):f=Q}else f=Q}H=Math.round(G.pts-G.dts)}y.push({size:K,duration:f,cts:H,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:G.key?2:1,isNonSync:G.key?0:1}})}this.nextAvcDts=d+f;var tt=t.dropped;if(t.len=0,t.nbNalu=0,t.dropped=0,y.length&&navigator.userAgent.toLowerCase().indexOf("chrome")>-1){var et=y[0].flags;et.dependsOn=2,et.isNonSync=0}t.samples=y,l=k.moof(t.sequenceNumber++,v,t),t.samples=[];var rt={data1:l,data2:p,startPTS:g/h,endPTS:(u+f)/h,startDTS:v/h,endDTS:this.nextAvcDts/h,type:"video",hasAudio:!1,hasVideo:!0,nb:y.length,dropped:tt};return this.observer.trigger(i.a.FRAG_PARSING_DATA,rt),rt}},t.prototype.remuxAudio=function(t,e,r,a){var o=t.inputTimeScale,l=t.timescale,u=o/l,d=(t.isAAC?1024:1152)*u,c=this._PTSNormalize,h=this._initDTS,f=!t.isAAC&&this.typeSupported.mpeg,p=void 0,g=void 0,v=void 0,m=void 0,y=void 0,b=void 0,E=void 0,T=t.samples,S=[],_=this.nextAudioPts;if(r|=T.length&&_&&(a&&Math.abs(e-_/o)<.1||Math.abs(T[0].pts-_-h)<20*d),T.forEach(function(t){t.pts=t.dts=c(t.pts-h,e*o)}),0!==(T=T.filter(function(t){return t.pts>=0})).length){if(r||(_=a?e*o:T[0].pts),t.isAAC)for(var A=this.config.maxAudioFramesDrift,R=0,w=_;R<T.length;){var D,I=T[R];D=I.pts-w;var O=Math.abs(1e3*D/o);if(D<=-A*d)s.b.warn("Dropping 1 audio frame @ "+(w/o).toFixed(3)+"s due to "+Math.round(O)+" ms overlap."),T.splice(R,1),t.len-=I.unit.length;else if(D>=A*d&&O<1e4&&w){var C=Math.round(D/d);s.b.warn("Injecting "+C+" audio frame @ "+(w/o).toFixed(3)+"s due to "+Math.round(1e3*D/o)+" ms gap.");for(var x=0;x<C;x++){var P=Math.max(w,0);(v=L.getSilentFrame(t.manifestCodec||t.codec,t.channelCount))||(s.b.log("Unable to get silent frame for given audio codec; duplicating last frame instead."),v=I.unit.subarray()),T.splice(R,0,{unit:v,pts:P,dts:P}),t.len+=v.length,w+=d,R++}I.pts=I.dts=w,w+=d,R++}else Math.abs(D),I.pts=I.dts=w,w+=d,R++}for(var F=0,M=T.length;F<M;F++){var N=T[F],U=N.unit,B=N.pts;if(void 0!==E)g.duration=Math.round((B-E)/u);else{var G=Math.round(1e3*(B-_)/o),j=0;if(r&&t.isAAC&&G){if(G>0&&G<1e4)j=Math.round((B-_)/d),s.b.log(G+" ms hole between AAC samples detected,filling it"),j>0&&((v=L.getSilentFrame(t.manifestCodec||t.codec,t.channelCount))||(v=U.subarray()),t.len+=j*v.length);else if(G<-12){s.b.log("drop overlapping AAC sample, expected/parsed/delta:"+(_/o).toFixed(3)+"s/"+(B/o).toFixed(3)+"s/"+-G+"ms"),t.len-=U.byteLength;continue}B=_}if(b=B,!(t.len>0))return;var K=f?t.len:t.len+8;p=f?0:8;try{m=new Uint8Array(K)}catch(t){return void this.observer.trigger(i.a.ERROR,{type:n.b.MUX_ERROR,details:n.a.REMUX_ALLOC_ERROR,fatal:!1,bytes:K,reason:"fail allocating audio mdat "+K})}f||(new DataView(m.buffer).setUint32(0,K),m.set(k.types.mdat,4));for(var H=0;H<j;H++)(v=L.getSilentFrame(t.manifestCodec||t.codec,t.channelCount))||(s.b.log("Unable to get silent frame for given audio codec; duplicating this frame instead."),v=U.subarray()),m.set(v,p),p+=v.byteLength,g={size:v.byteLength,cts:0,duration:1024,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},S.push(g)}m.set(U,p);var V=U.byteLength;p+=V,g={size:V,cts:0,duration:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},S.push(g),E=B}var Y=0,W=S.length;if(W>=2&&(Y=S[W-2].duration,g.duration=Y),W){this.nextAudioPts=_=E+u*Y,t.len=0,t.samples=S,y=f?new Uint8Array:k.moof(t.sequenceNumber++,b/u,t),t.samples=[];var q=b/o,z=_/o,X={data1:y,data2:m,startPTS:q,endPTS:z,startDTS:q,endDTS:z,type:"audio",hasAudio:!0,hasVideo:!1,nb:W};return this.observer.trigger(i.a.FRAG_PARSING_DATA,X),X}return null}},t.prototype.remuxEmptyAudio=function(t,e,r,i){var n=t.inputTimeScale,a=n/(t.samplerate?t.samplerate:n),o=this.nextAudioPts,l=(void 0!==o?o:i.startDTS*n)+this._initDTS,u=i.endDTS*n+this._initDTS,d=1024*a,c=Math.ceil((u-l)/d),h=L.getSilentFrame(t.manifestCodec||t.codec,t.channelCount);if(s.b.warn("remux empty Audio"),h){for(var f=[],p=0;p<c;p++){var g=l+p*d;f.push({unit:h,pts:g,dts:g}),t.len+=h.length}t.samples=f,this.remuxAudio(t,e,r)}else s.b.trace("Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!")},t.prototype.remuxID3=function(t,e){var r=t.samples.length,n=void 0,a=t.inputTimeScale,o=this._initPTS,s=this._initDTS;if(r){for(var l=0;l<r;l++)(n=t.samples[l]).pts=(n.pts-o)/a,n.dts=(n.dts-s)/a;this.observer.trigger(i.a.FRAG_PARSING_METADATA,{samples:t.samples})}t.samples=[],e=e},t.prototype.remuxText=function(t,e){t.samples.sort(function(t,e){return t.pts-e.pts});var r=t.samples.length,n=void 0,a=t.inputTimeScale,o=this._initPTS;if(r){for(var s=0;s<r;s++)(n=t.samples[s]).pts=(n.pts-o)/a;this.observer.trigger(i.a.FRAG_PARSING_USERDATA,{samples:t.samples})}t.samples=[],e=e},t.prototype._PTSNormalize=function(t,e){var r=void 0;if(void 0===e)return t;for(r=e<t?-8589934592:8589934592;Math.abs(t-e)>4294967296;)t+=r;return t},t}();var O=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e}return t.prototype.destroy=function(){},t.prototype.resetTimeStamp=function(){},t.prototype.resetInitSegment=function(){},t.prototype.remux=function(t,e,r,n,a,o,s,l){var u=this.observer,d="";t&&(d+="audio"),e&&(d+="video"),u.trigger(i.a.FRAG_PARSING_DATA,{data1:l,startPTS:a,startDTS:a,type:d,hasAudio:!!t,hasVideo:!!e,nb:1,dropped:0}),u.trigger(i.a.FRAG_PARSED)},t}();var C=Object(l.a)().performance,x=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observer=e,this.typeSupported=r,this.config=i,this.vendor=n}return t.prototype.destroy=function(){var t=this.demuxer;t&&t.destroy()},t.prototype.push=function(t,e,r,n,o,s,l,u,d,c,h,f){if(t.byteLength>0&&null!=e&&null!=e.key&&"AES-128"===e.method){var p=this.decrypter;null==p&&(p=this.decrypter=new a.a(this.observer,this.config));var g=this,v=void 0;try{v=C.now()}catch(t){v=Date.now()}p.decrypt(t,e.key.buffer,e.iv.buffer,function(t){var a=void 0;try{a=C.now()}catch(t){a=Date.now()}g.observer.trigger(i.a.FRAG_DECRYPTED,{stats:{tstart:v,tdecrypt:a}}),g.pushDecrypted(new Uint8Array(t),e,new Uint8Array(r),n,o,s,l,u,d,c,h,f)})}else this.pushDecrypted(new Uint8Array(t),e,new Uint8Array(r),n,o,s,l,u,d,c,h,f)},t.prototype.pushDecrypted=function(t,e,r,a,o,s,l,u,d,c,h,f){var p=this.demuxer;if(!p||(l||u)&&!this.probe(t)){for(var g=this.observer,v=this.typeSupported,m=this.config,E=[{demux:R,remux:I},{demux:b.a,remux:O},{demux:y,remux:I},{demux:w,remux:I}],T=0,S=E.length;T<S;T++){var _=E[T],A=_.demux.probe;if(A(t)){var L=this.remuxer=new _.remux(g,m,v,this.vendor);p=new _.demux(g,L,m,v),this.probe=A;break}}if(!p)return void g.trigger(i.a.ERROR,{type:n.b.MEDIA_ERROR,details:n.a.FRAG_PARSING_ERROR,fatal:!0,reason:"no demux matching with content found"});this.demuxer=p}var D=this.remuxer;(l||u)&&(p.resetInitSegment(r,a,o,c),D.resetInitSegment()),l&&(p.resetTimeStamp(f),D.resetTimeStamp(f)),"function"==typeof p.setDecryptData&&p.setDecryptData(e),p.append(t,s,d,h)},t}();e.a=x},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={};r.d(i,"newCue",function(){return ee});var n=r(5),a=r.n(n),o=r(2),s=r(3),l=r(1),u=r(0),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var c=new Set(["hlsEventGeneric","hlsHandlerDestroying","hlsHandlerDestroyed"]),h=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.hls=e,this.onEvent=this.onEvent.bind(this);for(var r=arguments.length,i=Array(r>1?r-1:0),n=1;n<r;n++)i[n-1]=arguments[n];this.handledEvents=i,this.useGenericHandler=!0,this.registerListeners()}return t.prototype.destroy=function(){this.onHandlerDestroying(),this.unregisterListeners(),this.onHandlerDestroyed()},t.prototype.onHandlerDestroying=function(){},t.prototype.onHandlerDestroyed=function(){},t.prototype.isEventHandler=function(){return"object"===d(this.handledEvents)&&this.handledEvents.length&&"function"==typeof this.onEvent},t.prototype.registerListeners=function(){this.isEventHandler()&&this.handledEvents.forEach(function(t){if(c.has(t))throw new Error("Forbidden event-name: "+t);this.hls.on(t,this.onEvent)},this)},t.prototype.unregisterListeners=function(){this.isEventHandler()&&this.handledEvents.forEach(function(t){this.hls.off(t,this.onEvent)},this)},t.prototype.onEvent=function(t,e){this.onEventGeneric(t,e)},t.prototype.onEventGeneric=function(t,e){try{(function(t,e){var r="on"+t.replace("hls","");if("function"!=typeof this[r])throw new Error("Event "+t+" has no generic handler in this "+this.constructor.name+" class (tried "+r+")");return this[r].bind(this,e)}).call(this,t,e).call()}catch(e){u.b.error("An internal error happened while handling event "+t+'. Error message: "'+e.message+'". Here is a stacktrace:',e),this.hls.trigger(l.a.ERROR,{type:o.b.OTHER_ERROR,details:o.a.INTERNAL_EXCEPTION,fatal:!1,event:t,err:e})}},t}(),f=r(9),p=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var g=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.method=null,this.key=null,this.iv=null,this._uri=null}return p(t,[{key:"uri",get:function(){return!this._uri&&this.reluri&&(this._uri=a.a.buildAbsoluteURL(this.baseuri,this.reluri,{alwaysNormalize:!0})),this._uri}}]),t}(),v=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var m=function(){function t(){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=null,this._byteRange=null,this._decryptdata=null,this.tagList=[],this.programDateTime=null,this.rawProgramDateTime=null,this._elementaryStreams=((e={})[t.ElementaryStreamTypes.AUDIO]=!1,e[t.ElementaryStreamTypes.VIDEO]=!1,e)}return t.prototype.addElementaryStream=function(t){this._elementaryStreams[t]=!0},t.prototype.hasElementaryStream=function(t){return!0===this._elementaryStreams[t]},t.prototype.createInitializationVector=function(t){for(var e=new Uint8Array(16),r=12;r<16;r++)e[r]=t>>8*(15-r)&255;return e},t.prototype.fragmentDecryptdataFromLevelkey=function(t,e){var r=t;return t&&t.method&&t.uri&&!t.iv&&((r=new g).method=t.method,r.baseuri=t.baseuri,r.reluri=t.reluri,r.iv=this.createInitializationVector(e)),r},v(t,[{key:"url",get:function(){return!this._url&&this.relurl&&(this._url=a.a.buildAbsoluteURL(this.baseurl,this.relurl,{alwaysNormalize:!0})),this._url},set:function(t){this._url=t}},{key:"byteRange",get:function(){if(!this._byteRange&&!this.rawByteRange)return[];if(this._byteRange)return this._byteRange;var t=[];if(this.rawByteRange){var e=this.rawByteRange.split("@",2);if(1===e.length){var r=this.lastByteRangeEndOffset;t[0]=r||0}else t[0]=parseInt(e[1]);t[1]=parseInt(e[0])+t[0],this._byteRange=t}return t}},{key:"byteRangeStartOffset",get:function(){return this.byteRange[0]}},{key:"byteRangeEndOffset",get:function(){return this.byteRange[1]}},{key:"decryptdata",get:function(){return this._decryptdata||(this._decryptdata=this.fragmentDecryptdataFromLevelkey(this.levelkey,this.sn)),this._decryptdata}},{key:"endProgramDateTime",get:function(){if(!Object(s.a)(this.programDateTime))return null;var t=Object(s.a)(this.duration)?this.duration:0;return this.programDateTime+1e3*t}},{key:"encrypted",get:function(){return!(!this.decryptdata||null===this.decryptdata.uri||null!==this.decryptdata.key)}}],[{key:"ElementaryStreamTypes",get:function(){return{AUDIO:"audio",VIDEO:"video"}}}]),t}(),y=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var b=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.endCC=0,this.endSN=0,this.fragments=[],this.initSegment=null,this.live=!0,this.needSidxRanges=!1,this.startCC=0,this.startSN=0,this.startTimeOffset=null,this.targetduration=0,this.totalduration=0,this.type=null,this.url=e,this.version=null}return y(t,[{key:"hasProgramDateTime",get:function(){return!(!this.fragments[0]||!Object(s.a)(this.fragments[0].programDateTime))}}]),t}();var E=/^(\d+)x(\d+)$/,T=/\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,S=function(){function t(e){for(var r in function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"==typeof e&&(e=t.parseAttrList(e)),e)e.hasOwnProperty(r)&&(this[r]=e[r])}return t.prototype.decimalInteger=function(t){var e=parseInt(this[t],10);return e>Number.MAX_SAFE_INTEGER?1/0:e},t.prototype.hexadecimalInteger=function(t){if(this[t]){var e=(this[t]||"0x").slice(2);e=(1&e.length?"0":"")+e;for(var r=new Uint8Array(e.length/2),i=0;i<e.length/2;i++)r[i]=parseInt(e.slice(2*i,2*i+2),16);return r}return null},t.prototype.hexadecimalIntegerAsNumber=function(t){var e=parseInt(this[t],16);return e>Number.MAX_SAFE_INTEGER?1/0:e},t.prototype.decimalFloatingPoint=function(t){return parseFloat(this[t])},t.prototype.enumeratedString=function(t){return this[t]},t.prototype.decimalResolution=function(t){var e=E.exec(this[t]);if(null!==e)return{width:parseInt(e[1],10),height:parseInt(e[2],10)}},t.parseAttrList=function(t){var e=void 0,r={};for(T.lastIndex=0;null!==(e=T.exec(t));){var i=e[2];0===i.indexOf('"')&&i.lastIndexOf('"')===i.length-1&&(i=i.slice(1,-1)),r[e[1]]=i}return r},t}(),_={audio:{a3ds:!0,"ac-3":!0,"ac-4":!0,alac:!0,alaw:!0,dra1:!0,"dts+":!0,"dts-":!0,dtsc:!0,dtse:!0,dtsh:!0,"ec-3":!0,enca:!0,g719:!0,g726:!0,m4ae:!0,mha1:!0,mha2:!0,mhm1:!0,mhm2:!0,mlpa:!0,mp4a:!0,"raw ":!0,Opus:!0,samr:!0,sawb:!0,sawp:!0,sevc:!0,sqcp:!0,ssmv:!0,twos:!0,ulaw:!0},video:{avc1:!0,avc2:!0,avc3:!0,avc4:!0,avcp:!0,drac:!0,dvav:!0,dvhe:!0,encv:!0,hev1:!0,hvc1:!0,mjp2:!0,mp4v:!0,mvc1:!0,mvc2:!0,mvc3:!0,mvc4:!0,resv:!0,rv60:!0,s263:!0,svc1:!0,svc2:!0,"vc-1":!0,vp08:!0,vp09:!0}};function A(t,e){return window.MediaSource.isTypeSupported((e||"video")+'/mp4;codecs="'+t+'"')}var R=/#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g,w=/#EXT-X-MEDIA:(.*)/g,L=new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,/|(?!#)(\S+)/.source,/|#EXT-X-BYTERANGE:*(.+)/.source,/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,/|#.*/.source].join(""),"g"),D=/(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/,k=/\.(mp4|m4s|m4v|m4a)$/i,I=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.findGroup=function(t,e){if(!t)return null;for(var r=null,i=0;i<t.length;i++){var n=t[i];n.id===e&&(r=n)}return r},t.convertAVC1ToAVCOTI=function(t){var e=void 0,r=t.split(".");return r.length>2?(e=r.shift()+".",e+=parseInt(r.shift()).toString(16),e+=("000"+parseInt(r.shift()).toString(16)).substr(-4)):e=t,e},t.resolve=function(t,e){return a.a.buildAbsoluteURL(e,t,{alwaysNormalize:!0})},t.parseMasterPlaylist=function(e,r){var i=[],n=void 0;function a(t,e){["video","audio"].forEach(function(r){var i=t.filter(function(t){return function(t,e){var r=_[e];return!!r&&!0===r[t.slice(0,4)]}(t,r)});if(i.length){var n=i.filter(function(t){return 0===t.lastIndexOf("avc1",0)||0===t.lastIndexOf("mp4a",0)});e[r+"Codec"]=n.length>0?n[0]:i[0],t=t.filter(function(t){return-1===i.indexOf(t)})}}),e.unknownCodecs=t}for(R.lastIndex=0;null!=(n=R.exec(e));){var o={},s=o.attrs=new S(n[1]);o.url=t.resolve(n[2],r);var l=s.decimalResolution("RESOLUTION");l&&(o.width=l.width,o.height=l.height),o.bitrate=s.decimalInteger("AVERAGE-BANDWIDTH")||s.decimalInteger("BANDWIDTH"),o.name=s.NAME,a([].concat((s.CODECS||"").split(/[ ,]+/)),o),o.videoCodec&&-1!==o.videoCodec.indexOf("avc1")&&(o.videoCodec=t.convertAVC1ToAVCOTI(o.videoCodec)),i.push(o)}return i},t.parseMasterPlaylistMedia=function(e,r,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],a=void 0,o=[],s=0;for(w.lastIndex=0;null!==(a=w.exec(e));){var l={},u=new S(a[1]);if(u.TYPE===i){if(l.groupId=u["GROUP-ID"],l.name=u.NAME,l.type=i,l.default="YES"===u.DEFAULT,l.autoselect="YES"===u.AUTOSELECT,l.forced="YES"===u.FORCED,u.URI&&(l.url=t.resolve(u.URI,r)),l.lang=u.LANGUAGE,l.name||(l.name=l.lang),n.length){var d=t.findGroup(n,l.groupId);l.audioCodec=d?d.codec:n[0].codec}l.id=s++,o.push(l)}}return o},t.parseLevelPlaylist=function(t,e,r,i,n){var a=0,o=0,l=new b(e),d=new g,c=0,h=null,f=new m,p=void 0,v=void 0,y=null;for(L.lastIndex=0;null!==(p=L.exec(t));){var E=p[1];if(E){f.duration=parseFloat(E);var T=(" "+p[2]).slice(1);f.title=T||null,f.tagList.push(T?["INF",E,T]:["INF",E])}else if(p[3]){if(Object(s.a)(f.duration)){var _=a++;f.type=i,f.start=o,f.levelkey=d,f.sn=_,f.level=r,f.cc=c,f.urlId=n,f.baseurl=e,f.relurl=(" "+p[3]).slice(1),O(f,h),l.fragments.push(f),h=f,o+=f.duration,f=new m}}else if(p[4]){if(f.rawByteRange=(" "+p[4]).slice(1),h){var A=h.byteRangeEndOffset;A&&(f.lastByteRangeEndOffset=A)}}else if(p[5])f.rawProgramDateTime=(" "+p[5]).slice(1),f.tagList.push(["PROGRAM-DATE-TIME",f.rawProgramDateTime]),null===y&&(y=l.fragments.length);else{for(p=p[0].match(D),v=1;v<p.length&&void 0===p[v];v++);var R=(" "+p[v+1]).slice(1),w=(" "+p[v+2]).slice(1);switch(p[v]){case"#":f.tagList.push(w?[R,w]:[R]);break;case"PLAYLIST-TYPE":l.type=R.toUpperCase();break;case"MEDIA-SEQUENCE":a=l.startSN=parseInt(R);break;case"TARGETDURATION":l.targetduration=parseFloat(R);break;case"VERSION":l.version=parseInt(R);break;case"EXTM3U":break;case"ENDLIST":l.live=!1;break;case"DIS":c++,f.tagList.push(["DIS"]);break;case"DISCONTINUITY-SEQ":c=parseInt(R);break;case"KEY":var I=new S(R),C=I.enumeratedString("METHOD"),x=I.URI,P=I.hexadecimalInteger("IV");C&&(d=new g,x&&["AES-128","SAMPLE-AES","SAMPLE-AES-CENC"].indexOf(C)>=0&&(d.method=C,d.baseuri=e,d.reluri=x,d.key=null,d.iv=P));break;case"START":var F=new S(R).decimalFloatingPoint("TIME-OFFSET");Object(s.a)(F)&&(l.startTimeOffset=F);break;case"MAP":var M=new S(R);f.relurl=M.URI,f.rawByteRange=M.BYTERANGE,f.baseurl=e,f.level=r,f.type=i,f.sn="initSegment",l.initSegment=f,(f=new m).rawProgramDateTime=l.initSegment.rawProgramDateTime;break;default:u.b.warn("line parsed but not handled: "+p)}}}return(f=h)&&!f.relurl&&(l.fragments.pop(),o-=f.duration),l.totalduration=o,l.averagetargetduration=o/l.fragments.length,l.endSN=a-1,l.startCC=l.fragments[0]?l.fragments[0].cc:0,l.endCC=c,!l.initSegment&&l.fragments.length&&l.fragments.every(function(t){return k.test(t.relurl)})&&(u.b.warn("MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX"),(f=new m).relurl=l.fragments[0].relurl,f.baseurl=e,f.level=r,f.type=i,f.sn="initSegment",l.initSegment=f,l.needSidxRanges=!0),y&&function(t,e){for(var r=t[e],i=e-1;i>=0;i--){var n=t[i];n.programDateTime=r.programDateTime-1e3*n.duration,r=n}}(l.fragments,y),l},t}();function O(t,e){t.rawProgramDateTime?t.programDateTime=Date.parse(t.rawProgramDateTime):e&&e.programDateTime&&(t.programDateTime=e.endProgramDateTime),Object(s.a)(t.programDateTime)||(t.programDateTime=null,t.rawProgramDateTime=null)}var C=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var x=window.performance,P={MANIFEST:"manifest",LEVEL:"level",AUDIO_TRACK:"audioTrack",SUBTITLE_TRACK:"subtitleTrack"},F={MAIN:"main",AUDIO:"audio",SUBTITLE:"subtitle"},M=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MANIFEST_LOADING,l.a.LEVEL_LOADING,l.a.AUDIO_TRACK_LOADING,l.a.SUBTITLE_TRACK_LOADING));return i.loaders={},i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.canHaveQualityLevels=function(t){return t!==P.AUDIO_TRACK&&t!==P.SUBTITLE_TRACK},e.mapContextToLevelType=function(t){switch(t.type){case P.AUDIO_TRACK:return F.AUDIO;case P.SUBTITLE_TRACK:return F.SUBTITLE;default:return F.MAIN}},e.getResponseUrl=function(t,e){var r=t.url;return void 0!==r&&0!==r.indexOf("data:")||(r=e.url),r},e.prototype.createInternalLoader=function(t){var e=this.hls.config,r=e.pLoader,i=e.loader,n=new(r||i)(e);return t.loader=n,this.loaders[t.type]=n,n},e.prototype.getInternalLoader=function(t){return this.loaders[t.type]},e.prototype.resetInternalLoader=function(t){this.loaders[t]&&delete this.loaders[t]},e.prototype.destroyInternalLoaders=function(){for(var t in this.loaders){var e=this.loaders[t];e&&e.destroy(),this.resetInternalLoader(t)}},e.prototype.destroy=function(){this.destroyInternalLoaders(),t.prototype.destroy.call(this)},e.prototype.onManifestLoading=function(t){this.load(t.url,{type:P.MANIFEST,level:0,id:null})},e.prototype.onLevelLoading=function(t){this.load(t.url,{type:P.LEVEL,level:t.level,id:t.id})},e.prototype.onAudioTrackLoading=function(t){this.load(t.url,{type:P.AUDIO_TRACK,level:null,id:t.id})},e.prototype.onSubtitleTrackLoading=function(t){this.load(t.url,{type:P.SUBTITLE_TRACK,level:null,id:t.id})},e.prototype.load=function(t,e){var r=this.hls.config;u.b.debug("Loading playlist of type "+e.type+", level: "+e.level+", id: "+e.id);var i=this.getInternalLoader(e);if(i){var n=i.context;if(n&&n.url===t)return u.b.trace("playlist request ongoing"),!1;u.b.warn("aborting previous loader for type: "+e.type),i.abort()}var a=void 0,o=void 0,s=void 0,l=void 0;switch(e.type){case P.MANIFEST:a=r.manifestLoadingMaxRetry,o=r.manifestLoadingTimeOut,s=r.manifestLoadingRetryDelay,l=r.manifestLoadingMaxRetryTimeout;break;case P.LEVEL:a=0,o=r.levelLoadingTimeOut;break;default:a=r.levelLoadingMaxRetry,o=r.levelLoadingTimeOut,s=r.levelLoadingRetryDelay,l=r.levelLoadingMaxRetryTimeout}i=this.createInternalLoader(e),e.url=t,e.responseType=e.responseType||"";var d={timeout:o,maxRetry:a,retryDelay:s,maxRetryDelay:l},c={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)};return u.b.debug("Calling internal loader delegate for URL: "+t),i.load(e,d,c),!0},e.prototype.loadsuccess=function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if(r.isSidxRequest)return this._handleSidxRequest(t,r),void this._handlePlaylistLoaded(t,e,r,i);this.resetInternalLoader(r.type);var n=t.data;e.tload=x.now(),0===n.indexOf("#EXTM3U")?n.indexOf("#EXTINF:")>0||n.indexOf("#EXT-X-TARGETDURATION:")>0?this._handleTrackOrLevelPlaylist(t,e,r,i):this._handleMasterPlaylist(t,e,r,i):this._handleManifestParsingError(t,r,"no EXTM3U delimiter",i)},e.prototype.loaderror=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._handleNetworkError(e,r)},e.prototype.loadtimeout=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._handleNetworkError(e,r,!0)},e.prototype._handleMasterPlaylist=function(t,r,i,n){var a=this.hls,o=t.data,s=e.getResponseUrl(t,i),d=I.parseMasterPlaylist(o,s);if(d.length){var c=d.map(function(t){return{id:t.attrs.AUDIO,codec:t.audioCodec}}),h=I.parseMasterPlaylistMedia(o,s,"AUDIO",c),f=I.parseMasterPlaylistMedia(o,s,"SUBTITLES");if(h.length){var p=!1;h.forEach(function(t){t.url||(p=!0)}),!1===p&&d[0].audioCodec&&!d[0].attrs.AUDIO&&(u.b.log("audio codec signaled in quality level, but no embedded audio track signaled, create one"),h.unshift({type:"main",name:"main"}))}a.trigger(l.a.MANIFEST_LOADED,{levels:d,audioTracks:h,subtitles:f,url:s,stats:r,networkDetails:n})}else this._handleManifestParsingError(t,i,"no level found in manifest",n)},e.prototype._handleTrackOrLevelPlaylist=function(t,r,i,n){var a=this.hls,o=i.id,u=i.level,d=i.type,c=e.getResponseUrl(t,i),h=Object(s.a)(o)?o:0,f=Object(s.a)(u)?u:h,p=e.mapContextToLevelType(i),g=I.parseLevelPlaylist(t.data,c,f,p,h);if(g.tload=r.tload,d===P.MANIFEST){var v={url:c,details:g};a.trigger(l.a.MANIFEST_LOADED,{levels:[v],audioTracks:[],url:c,stats:r,networkDetails:n})}if(r.tparsed=x.now(),g.needSidxRanges){var m=g.initSegment.url;this.load(m,{isSidxRequest:!0,type:d,level:u,levelDetails:g,id:o,rangeStart:0,rangeEnd:2048,responseType:"arraybuffer"})}else i.levelDetails=g,this._handlePlaylistLoaded(t,r,i,n)},e.prototype._handleSidxRequest=function(t,e){var r=f.a.parseSegmentIndex(new Uint8Array(t.data));r.references.forEach(function(t,r){var i=t.info,n=e.levelDetails.fragments[r];0===n.byteRange.length&&(n.rawByteRange=String(1+i.end-i.start)+"@"+String(i.start))}),e.levelDetails.initSegment.rawByteRange=String(r.moovEndOffset)+"@0"},e.prototype._handleManifestParsingError=function(t,e,r,i){this.hls.trigger(l.a.ERROR,{type:o.b.NETWORK_ERROR,details:o.a.MANIFEST_PARSING_ERROR,fatal:!0,url:t.url,reason:r,networkDetails:i})},e.prototype._handleNetworkError=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];u.b.info("A network error occured while loading a "+t.type+"-type playlist");var i=void 0,n=void 0,a=this.getInternalLoader(t);switch(t.type){case P.MANIFEST:i=r?o.a.MANIFEST_LOAD_TIMEOUT:o.a.MANIFEST_LOAD_ERROR,n=!0;break;case P.LEVEL:i=r?o.a.LEVEL_LOAD_TIMEOUT:o.a.LEVEL_LOAD_ERROR,n=!1;break;case P.AUDIO_TRACK:i=r?o.a.AUDIO_TRACK_LOAD_TIMEOUT:o.a.AUDIO_TRACK_LOAD_ERROR,n=!1;break;default:n=!1}a&&(a.abort(),this.resetInternalLoader(t.type)),this.hls.trigger(l.a.ERROR,{type:o.b.NETWORK_ERROR,details:i,fatal:n,url:a.url,loader:a,context:t,networkDetails:e})},e.prototype._handlePlaylistLoaded=function(t,r,i,n){var a=i.type,o=i.level,s=i.id,u=i.levelDetails;if(u.targetduration)if(e.canHaveQualityLevels(i.type))this.hls.trigger(l.a.LEVEL_LOADED,{details:u,level:o||0,id:s||0,stats:r,networkDetails:n});else switch(a){case P.AUDIO_TRACK:this.hls.trigger(l.a.AUDIO_TRACK_LOADED,{details:u,id:s,stats:r,networkDetails:n});break;case P.SUBTITLE_TRACK:this.hls.trigger(l.a.SUBTITLE_TRACK_LOADED,{details:u,id:s,stats:r,networkDetails:n})}else this._handleManifestParsingError(t,i,"invalid target duration",n)},C(e,null,[{key:"ContextType",get:function(){return P}},{key:"LevelType",get:function(){return F}}]),e}(h);var N=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.FRAG_LOADING));return i.loaders={},i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){var e=this.loaders;for(var r in e){var i=e[r];i&&i.destroy()}this.loaders={},t.prototype.destroy.call(this)},e.prototype.onFragLoading=function(t){var e=t.frag,r=e.type,i=this.loaders,n=this.hls.config,a=n.fLoader,o=n.loader;e.loaded=0;var l=i[r];l&&(u.b.warn("abort previous fragment loader for type: "+r),l.abort()),l=i[r]=e.loader=n.fLoader?new a(n):new o(n);var d,c,h=void 0;h={url:e.url,frag:e,responseType:"arraybuffer",progressData:!1};var f=e.byteRangeStartOffset,p=e.byteRangeEndOffset;Object(s.a)(f)&&Object(s.a)(p)&&(h.rangeStart=f,h.rangeEnd=p),d={timeout:n.fragLoadingTimeOut,maxRetry:0,retryDelay:0,maxRetryDelay:n.fragLoadingMaxRetryTimeout},c={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this),onProgress:this.loadprogress.bind(this)},l.load(h,d,c)},e.prototype.loadsuccess=function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,n=t.data,a=r.frag;a.loader=void 0,this.loaders[a.type]=void 0,this.hls.trigger(l.a.FRAG_LOADED,{payload:n,frag:a,stats:e,networkDetails:i})},e.prototype.loaderror=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=e.frag,n=i.loader;n&&n.abort(),this.loaders[i.type]=void 0,this.hls.trigger(l.a.ERROR,{type:o.b.NETWORK_ERROR,details:o.a.FRAG_LOAD_ERROR,fatal:!1,frag:e.frag,response:t,networkDetails:r})},e.prototype.loadtimeout=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=e.frag,n=i.loader;n&&n.abort(),this.loaders[i.type]=void 0,this.hls.trigger(l.a.ERROR,{type:o.b.NETWORK_ERROR,details:o.a.FRAG_LOAD_TIMEOUT,fatal:!1,frag:e.frag,networkDetails:r})},e.prototype.loadprogress=function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,n=e.frag;n.loaded=t.loaded,this.hls.trigger(l.a.FRAG_LOAD_PROGRESS,{frag:n,stats:t,networkDetails:i})},e}(h);var U=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.KEY_LOADING));return i.loaders={},i.decryptkey=null,i.decrypturl=null,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){for(var t in this.loaders){var e=this.loaders[t];e&&e.destroy()}this.loaders={},h.prototype.destroy.call(this)},e.prototype.onKeyLoading=function(t){var e=t.frag,r=e.type,i=this.loaders[r],n=e.decryptdata,a=n.uri;if(a!==this.decrypturl||null===this.decryptkey){var o=this.hls.config;i&&(u.b.warn("abort previous key loader for type:"+r),i.abort()),e.loader=this.loaders[r]=new o.loader(o),this.decrypturl=a,this.decryptkey=null;var s,d,c;s={url:a,frag:e,responseType:"arraybuffer"},d={timeout:o.fragLoadingTimeOut,maxRetry:o.fragLoadingMaxRetry,retryDelay:o.fragLoadingRetryDelay,maxRetryDelay:o.fragLoadingMaxRetryTimeout},c={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)},e.loader.load(s,d,c)}else this.decryptkey&&(n.key=this.decryptkey,this.hls.trigger(l.a.KEY_LOADED,{frag:e}))},e.prototype.loadsuccess=function(t,e,r){var i=r.frag;this.decryptkey=i.decryptdata.key=new Uint8Array(t.data),i.loader=void 0,this.loaders[i.type]=void 0,this.hls.trigger(l.a.KEY_LOADED,{frag:i})},e.prototype.loaderror=function(t,e){var r=e.frag,i=r.loader;i&&i.abort(),this.loaders[e.type]=void 0,this.hls.trigger(l.a.ERROR,{type:o.b.NETWORK_ERROR,details:o.a.KEY_LOAD_ERROR,fatal:!1,frag:r,response:t})},e.prototype.loadtimeout=function(t,e){var r=e.frag,i=r.loader;i&&i.abort(),this.loaders[e.type]=void 0,this.hls.trigger(l.a.ERROR,{type:o.b.NETWORK_ERROR,details:o.a.KEY_LOAD_TIMEOUT,fatal:!1,frag:r})},e}(h);var B="NOT_LOADED",G="APPENDING",j="PARTIAL",K="OK",H=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.BUFFER_APPENDED,l.a.FRAG_BUFFERED,l.a.FRAG_LOADED));return i.bufferPadding=.2,i.fragments=Object.create(null),i.timeRanges=Object.create(null),i.config=r.config,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){this.fragments=null,this.timeRanges=null,this.config=null,h.prototype.destroy.call(this),t.prototype.destroy.call(this)},e.prototype.getBufferedFrag=function(t,e){var r=this.fragments,i=Object.keys(r).filter(function(i){var n=r[i];if(n.body.type!==e)return!1;if(!n.buffered)return!1;var a=n.body;return a.startPTS<=t&&t<=a.endPTS});if(0===i.length)return null;var n=i.pop();return r[n].body},e.prototype.detectEvictedFragments=function(t,e){var r=this,i=void 0,n=void 0;Object.keys(this.fragments).forEach(function(a){var o=r.fragments[a];if(!0===o.buffered){var s=o.range[t];if(s){i=s.time;for(var l=0;l<i.length;l++)if(n=i[l],!1===r.isTimeBuffered(n.startPTS,n.endPTS,e)){r.removeFragment(o.body);break}}}})},e.prototype.detectPartialFragments=function(t){var e=this,r=this.getFragmentKey(t),i=this.fragments[r];i&&(i.buffered=!0,Object.keys(this.timeRanges).forEach(function(r){if(t.hasElementaryStream(r)){var n=e.timeRanges[r];i.range[r]=e.getBufferedTimes(t.startPTS,t.endPTS,n)}}))},e.prototype.getBufferedTimes=function(t,e,r){for(var i=[],n=void 0,a=void 0,o=!1,s=0;s<r.length;s++){if(n=r.start(s)-this.bufferPadding,a=r.end(s)+this.bufferPadding,t>=n&&e<=a){i.push({startPTS:Math.max(t,r.start(s)),endPTS:Math.min(e,r.end(s))});break}if(t<a&&e>n)i.push({startPTS:Math.max(t,r.start(s)),endPTS:Math.min(e,r.end(s))}),o=!0;else if(e<=n)break}return{time:i,partial:o}},e.prototype.getFragmentKey=function(t){return t.type+"_"+t.level+"_"+t.urlId+"_"+t.sn},e.prototype.getPartialFragment=function(t){var e=this,r=void 0,i=void 0,n=void 0,a=null,o=0;return Object.keys(this.fragments).forEach(function(s){var l=e.fragments[s];e.isPartial(l)&&(i=l.body.startPTS-e.bufferPadding,n=l.body.endPTS+e.bufferPadding,t>=i&&t<=n&&(r=Math.min(t-i,n-t),o<=r&&(a=l.body,o=r)))}),a},e.prototype.getState=function(t){var e=this.getFragmentKey(t),r=this.fragments[e],i=B;return void 0!==r&&(i=r.buffered?!0===this.isPartial(r)?j:K:G),i},e.prototype.isPartial=function(t){return!0===t.buffered&&(void 0!==t.range.video&&!0===t.range.video.partial||void 0!==t.range.audio&&!0===t.range.audio.partial)},e.prototype.isTimeBuffered=function(t,e,r){for(var i=void 0,n=void 0,a=0;a<r.length;a++){if(i=r.start(a)-this.bufferPadding,n=r.end(a)+this.bufferPadding,t>=i&&e<=n)return!0;if(e<=i)return!1}return!1},e.prototype.onFragLoaded=function(t){var e=t.frag;Object(s.a)(e.sn)&&!e.bitrateTest&&(this.fragments[this.getFragmentKey(e)]={body:e,range:Object.create(null),buffered:!1})},e.prototype.onBufferAppended=function(t){var e=this;this.timeRanges=t.timeRanges,Object.keys(this.timeRanges).forEach(function(t){var r=e.timeRanges[t];e.detectEvictedFragments(t,r)})},e.prototype.onFragBuffered=function(t){this.detectPartialFragments(t.frag)},e.prototype.hasFragment=function(t){var e=this.getFragmentKey(t);return void 0!==this.fragments[e]},e.prototype.removeFragment=function(t){var e=this.getFragmentKey(t);delete this.fragments[e]},e.prototype.removeAllFragments=function(){this.fragments=Object.create(null)},e}(h),V={search:function(t,e){for(var r=0,i=t.length-1,n=null,a=null;r<=i;){var o=e(a=t[n=(r+i)/2|0]);if(o>0)r=n+1;else{if(!(o<0))return a;i=n-1}}return null}};var Y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.isBuffered=function(t,e){try{if(t)for(var r=t.buffered,i=0;i<r.length;i++)if(e>=r.start(i)&&e<=r.end(i))return!0}catch(t){}return!1},t.bufferInfo=function(t,e,r){try{if(t){var i=t.buffered,n=[],a=void 0;for(a=0;a<i.length;a++)n.push({start:i.start(a),end:i.end(a)});return this.bufferedInfo(n,e,r)}}catch(t){}return{len:0,start:e,end:e,nextStart:void 0}},t.bufferedInfo=function(t,e,r){var i=[],n=void 0,a=void 0,o=void 0,s=void 0,l=void 0;for(t.sort(function(t,e){var r=t.start-e.start;return r||e.end-t.end}),l=0;l<t.length;l++){var u=i.length;if(u){var d=i[u-1].end;t[l].start-d<r?t[l].end>d&&(i[u-1].end=t[l].end):i.push(t[l])}else i.push(t[l])}for(l=0,n=0,a=o=e;l<i.length;l++){var c=i[l].start,h=i[l].end;if(e+r>=c&&e<h)a=c,n=(o=h)-e;else if(e+r<c){s=c;break}}return{len:n,start:a,end:o,nextStart:s}},t}(),W=r(7),q=r.n(W),z=r(12),X=r.n(z),Q=r(10);function $(){if("undefined"!=typeof window)return window.MediaSource||window.WebKitMediaSource}var J=r(4);var Z=Object(J.a)(),tt=$(),et=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.hls=e,this.id=r;var i=this.observer=new q.a,n=e.config;i.trigger=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];i.emit.apply(i,[t,t].concat(r))},i.off=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];i.removeListener.apply(i,[t].concat(r))};var a=function(t,r){(r=r||{}).frag=this.frag,r.id=this.id,e.trigger(t,r)}.bind(this);i.on(l.a.FRAG_DECRYPTED,a),i.on(l.a.FRAG_PARSING_INIT_SEGMENT,a),i.on(l.a.FRAG_PARSING_DATA,a),i.on(l.a.FRAG_PARSED,a),i.on(l.a.ERROR,a),i.on(l.a.FRAG_PARSING_METADATA,a),i.on(l.a.FRAG_PARSING_USERDATA,a),i.on(l.a.INIT_PTS_FOUND,a);var s={mp4:tt.isTypeSupported("video/mp4"),mpeg:tt.isTypeSupported("audio/mpeg"),mp3:tt.isTypeSupported('audio/mp4; codecs="mp3"')},d=navigator.vendor;if(n.enableWorker&&"undefined"!=typeof Worker){u.b.log("demuxing in webworker");var c=void 0;try{c=this.w=X()(13),this.onwmsg=this.onWorkerMessage.bind(this),c.addEventListener("message",this.onwmsg),c.onerror=function(t){e.trigger(l.a.ERROR,{type:o.b.OTHER_ERROR,details:o.a.INTERNAL_EXCEPTION,fatal:!0,event:"demuxerWorker",err:{message:t.message+" ("+t.filename+":"+t.lineno+")"}})},c.postMessage({cmd:"init",typeSupported:s,vendor:d,id:r,config:JSON.stringify(n)})}catch(t){u.b.error("error while initializing DemuxerWorker, fallback on DemuxerInline"),c&&Z.URL.revokeObjectURL(c.objectURL),this.demuxer=new Q.a(i,s,n,d),this.w=void 0}}else this.demuxer=new Q.a(i,s,n,d)}return t.prototype.destroy=function(){var t=this.w;if(t)t.removeEventListener("message",this.onwmsg),t.terminate(),this.w=null;else{var e=this.demuxer;e&&(e.destroy(),this.demuxer=null)}var r=this.observer;r&&(r.removeAllListeners(),this.observer=null)},t.prototype.push=function(t,e,r,i,n,a,o,l){var d=this.w,c=Object(s.a)(n.startDTS)?n.startDTS:n.start,h=n.decryptdata,f=this.frag,p=!(f&&n.cc===f.cc),g=!(f&&n.level===f.level),v=f&&n.sn===f.sn+1,m=!g&&v;if(p&&u.b.log(this.id+":discontinuity detected"),g&&u.b.log(this.id+":switch detected"),this.frag=n,d)d.postMessage({cmd:"demux",data:t,decryptdata:h,initSegment:e,audioCodec:r,videoCodec:i,timeOffset:c,discontinuity:p,trackSwitch:g,contiguous:m,duration:a,accurateTimeOffset:o,defaultInitPTS:l},t instanceof ArrayBuffer?[t]:[]);else{var y=this.demuxer;y&&y.push(t,h,e,r,i,c,p,g,m,a,o,l)}},t.prototype.onWorkerMessage=function(t){var e=t.data,r=this.hls;switch(e.event){case"init":Z.URL.revokeObjectURL(this.w.objectURL);break;case l.a.FRAG_PARSING_DATA:e.data.data1=new Uint8Array(e.data1),e.data2&&(e.data.data2=new Uint8Array(e.data2));default:e.data=e.data||{},e.data.frag=this.frag,e.data.id=this.id,r.trigger(e.event,e.data)}},t}();function rt(t,e,r){switch(e){case"audio":t.audioGroupIds||(t.audioGroupIds=[]),t.audioGroupIds.push(r);break;case"text":t.textGroupIds||(t.textGroupIds=[]),t.textGroupIds.push(r)}}function it(t,e,r){var i=t[e],n=t[r],a=n.startPTS;Object(s.a)(a)?r>e?(i.duration=a-i.start,i.duration<0&&u.b.warn("negative duration computed for frag "+i.sn+",level "+i.level+", there should be some duration drift between playlist and fragment!")):(n.duration=i.start-a,n.duration<0&&u.b.warn("negative duration computed for frag "+n.sn+",level "+n.level+", there should be some duration drift between playlist and fragment!")):n.start=r>e?i.start+i.duration:Math.max(i.start-n.duration,0)}function nt(t,e,r,i,n,a){var o=r;if(Object(s.a)(e.startPTS)){var l=Math.abs(e.startPTS-r);Object(s.a)(e.deltaPTS)?e.deltaPTS=Math.max(l,e.deltaPTS):e.deltaPTS=l,o=Math.max(r,e.startPTS),r=Math.min(r,e.startPTS),i=Math.max(i,e.endPTS),n=Math.min(n,e.startDTS),a=Math.max(a,e.endDTS)}var u=r-e.start;e.start=e.startPTS=r,e.maxStartPTS=o,e.endPTS=i,e.startDTS=n,e.endDTS=a,e.duration=i-r;var d=e.sn;if(!t||d<t.startSN||d>t.endSN)return 0;var c,h=void 0,f=void 0;for(c=d-t.startSN,(h=t.fragments)[c]=e,f=c;f>0;f--)it(h,f,f-1);for(f=c;f<h.length-1;f++)it(h,f,f+1);return t.PTSKnown=!0,u}function at(t,e){var r=Math.max(t.startSN,e.startSN)-e.startSN,i=Math.min(t.endSN,e.endSN)-e.startSN,n=e.startSN-t.startSN,a=t.fragments,o=e.fragments,l=0,d=void 0;if(e.initSegment&&t.initSegment&&(e.initSegment=t.initSegment),i<r)e.PTSKnown=!1;else{for(var c=r;c<=i;c++){var h=a[n+c],f=o[c];f&&h&&(l=h.cc-f.cc,Object(s.a)(h.startPTS)&&(f.start=f.startPTS=h.startPTS,f.endPTS=h.endPTS,f.duration=h.duration,f.backtracked=h.backtracked,f.dropped=h.dropped,d=f))}if(l)for(u.b.log("discontinuity sliding from playlist, take drift into account"),c=0;c<o.length;c++)o[c].cc+=l;if(d)nt(e,d,d.startPTS,d.endPTS,d.startDTS,d.endDTS);else if(n>=0&&n<a.length){var p=a[n].start;for(c=0;c<o.length;c++)o[c].start+=p}e.PTSKnown=t.PTSKnown}}var ot={toString:function(t){for(var e="",r=t.length,i=0;i<r;i++)e+="["+t.start(i).toFixed(3)+","+t.end(i).toFixed(3)+"]";return e}};function st(t,e){e.fragments.forEach(function(e){if(e){var r=e.start+t;e.start=e.startPTS=r,e.endPTS=r+e.duration}}),e.PTSKnown=!0}function lt(t,e,r){!function(t,e,r){if(function(t,e,r){var i=!1;return e&&e.details&&r&&(r.endCC>r.startCC||t&&t.cc<r.startCC)&&(i=!0),i}(t,r,e)){var i=function(t,e){var r=t.fragments,i=e.fragments;if(i.length&&r.length){var n=function(t,e){for(var r=null,i=0;i<t.length;i+=1){var n=t[i];if(n&&n.cc===e){r=n;break}}return r}(r,i[0].cc);if(n&&(!n||n.startPTS))return n;u.b.log("No frag in previous level to align on")}else u.b.log("No fragments to align")}(r.details,e);i&&(u.b.log("Adjusting PTS using last level due to CC increase within current level"),st(i.start,e))}}(t,r,e),!r.PTSKnown&&e&&function(t,e){if(e&&e.fragments.length){if(!t.hasProgramDateTime||!e.hasProgramDateTime)return;var r=e.fragments[0].programDateTime,i=t.fragments[0].programDateTime,n=(i-r)/1e3+e.fragments[0].start;Object(s.a)(n)&&(u.b.log("adjusting PTS using programDateTime delta, sliding:"+n.toFixed(3)),st(n,t))}}(r,e.details)}var ut=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,n=Array(i>1?i-1:0),a=1;a<i;a++)n[a-1]=arguments[a];var o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call.apply(t,[this,r].concat(n)));return o._tickInterval=null,o._tickTimer=null,o._tickCallCount=0,o._boundTick=o.tick.bind(o),o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.onHandlerDestroying=function(){this.clearNextTick(),this.clearInterval()},e.prototype.hasInterval=function(){return!!this._tickInterval},e.prototype.hasNextTick=function(){return!!this._tickTimer},e.prototype.setInterval=function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(t){return!this._tickInterval&&(this._tickInterval=setInterval(this._boundTick,t),!0)}),e.prototype.clearInterval=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){return!!this._tickInterval&&(clearInterval(this._tickInterval),this._tickInterval=null,!0)}),e.prototype.clearNextTick=function(){return!!this._tickTimer&&(clearTimeout(this._tickTimer),this._tickTimer=null,!0)},e.prototype.tick=function(){this._tickCallCount++,1===this._tickCallCount&&(this.doTick(),this._tickCallCount>1&&(this.clearNextTick(),this._tickTimer=setTimeout(this._boundTick,0)),this._tickCallCount=0)},e.prototype.doTick=function(){},e}(h);function dt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments[2],i=Math.min(e,r.duration+(r.deltaPTS?r.deltaPTS:0));return r.start+r.duration-i<=t?1:r.start-i>t&&r.start?-1:0}function ct(t,e,r){var i=1e3*Math.min(e,r.duration+(r.deltaPTS?r.deltaPTS:0));return r.endProgramDateTime-i>t}var ht=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.config=e,this.media=r,this.fragmentTracker=i,this.hls=n,this.stallReported=!1}return t.prototype.poll=function(t,e){var r=this.config,i=this.media,n=i.currentTime,a=window.performance.now();if(n!==t)return this.stallReported&&(u.b.warn("playback not stuck anymore @"+n+", after "+Math.round(a-this.stalled)+"ms"),this.stallReported=!1),this.stalled=null,void(this.nudgeRetry=0);if(!(i.ended||!i.buffered.length||i.readyState>2||i.seeking&&Y.isBuffered(i,n))){var o=a-this.stalled,s=Y.bufferInfo(i,n,r.maxBufferHole);this.stalled?(o>=1e3&&this._reportStall(s.len),this._tryFixBufferStall(s,o)):this.stalled=a}},t.prototype._tryFixBufferStall=function(t,e){var r=this.config,i=this.fragmentTracker,n=this.media.currentTime,a=i.getPartialFragment(n);a&&this._trySkipBufferHole(a),t.len>.5&&e>1e3*r.highBufferWatchdogPeriod&&(this.stalled=null,this._tryNudgeBuffer())},t.prototype._reportStall=function(t){var e=this.hls,r=this.media;this.stallReported||(this.stallReported=!0,u.b.warn("Playback stalling at @"+r.currentTime+" due to low buffer"),e.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_STALLED_ERROR,fatal:!1,buffer:t}))},t.prototype._trySkipBufferHole=function(t){for(var e=this.hls,r=this.media,i=r.currentTime,n=0,a=0;a<r.buffered.length;a++){var s=r.buffered.start(a);if(i>=n&&i<s)return r.currentTime=Math.max(s,r.currentTime+.1),u.b.warn("skipping hole, adjusting currentTime from "+i+" to "+r.currentTime),this.stalled=null,void e.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_SEEK_OVER_HOLE,fatal:!1,reason:"fragment loaded with buffer holes, seeking from "+i+" to "+r.currentTime,frag:t});n=r.buffered.end(a)}},t.prototype._tryNudgeBuffer=function(){var t=this.config,e=this.hls,r=this.media,i=r.currentTime,n=(this.nudgeRetry||0)+1;if(this.nudgeRetry=n,n<t.nudgeMaxRetry){var a=i+n*t.nudgeOffset;u.b.log("adjust currentTime from "+i+" to "+a),r.currentTime=a,e.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_NUDGE_ON_STALL,fatal:!1})}else u.b.error("still stuck in high buffer @"+i+" after "+t.nudgeMaxRetry+", raise fatal error"),e.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_STALLED_ERROR,fatal:!0})},t}(),ft=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var pt={STOPPED:"STOPPED",IDLE:"IDLE",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING",FRAG_LOADING_WAITING_RETRY:"FRAG_LOADING_WAITING_RETRY",WAITING_LEVEL:"WAITING_LEVEL",PARSING:"PARSING",PARSED:"PARSED",BUFFER_FLUSHING:"BUFFER_FLUSHING",ENDED:"ENDED",ERROR:"ERROR"},gt=function(t){function e(r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHED,l.a.MEDIA_DETACHING,l.a.MANIFEST_LOADING,l.a.MANIFEST_PARSED,l.a.LEVEL_LOADED,l.a.KEY_LOADED,l.a.FRAG_LOADED,l.a.FRAG_LOAD_EMERGENCY_ABORTED,l.a.FRAG_PARSING_INIT_SEGMENT,l.a.FRAG_PARSING_DATA,l.a.FRAG_PARSED,l.a.ERROR,l.a.AUDIO_TRACK_SWITCHING,l.a.AUDIO_TRACK_SWITCHED,l.a.BUFFER_CREATED,l.a.BUFFER_APPENDED,l.a.BUFFER_FLUSHED));return n.fragmentTracker=i,n.config=r.config,n.audioCodecSwap=!1,n._state=pt.STOPPED,n.stallReported=!1,n.gapController=null,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.onHandlerDestroying=function(){this.stopLoad(),t.prototype.onHandlerDestroying.call(this)},e.prototype.onHandlerDestroyed=function(){this.state=pt.STOPPED,this.fragmentTracker=null,t.prototype.onHandlerDestroyed.call(this)},e.prototype.startLoad=function(t){if(this.levels){var e=this.lastCurrentTime,r=this.hls;if(this.stopLoad(),this.setInterval(100),this.level=-1,this.fragLoadError=0,!this.startFragRequested){var i=r.startLevel;-1===i&&(i=0,this.bitrateTest=!0),this.level=r.nextLoadLevel=i,this.loadedmetadata=!1}e>0&&-1===t&&(u.b.log("override startPosition with lastCurrentTime @"+e.toFixed(3)),t=e),this.state=pt.IDLE,this.nextLoadPosition=this.startPosition=this.lastCurrentTime=t,this.tick()}else this.forceStartLoad=!0,this.state=pt.STOPPED},e.prototype.stopLoad=function(){var t=this.fragCurrent;t&&(t.loader&&t.loader.abort(),this.fragmentTracker.removeFragment(t),this.fragCurrent=null),this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.clearInterval(),this.state=pt.STOPPED,this.forceStartLoad=!1},e.prototype.doTick=function(){switch(this.state){case pt.BUFFER_FLUSHING:this.fragLoadError=0;break;case pt.IDLE:this._doTickIdle();break;case pt.WAITING_LEVEL:var t=this.levels[this.level];t&&t.details&&(this.state=pt.IDLE);break;case pt.FRAG_LOADING_WAITING_RETRY:var e=window.performance.now(),r=this.retryDate;(!r||e>=r||this.media&&this.media.seeking)&&(u.b.log("mediaController: retryDate reached, switch back to IDLE state"),this.state=pt.IDLE);break;case pt.ERROR:case pt.STOPPED:case pt.FRAG_LOADING:case pt.PARSING:case pt.PARSED:case pt.ENDED:}this._checkBuffer(),this._checkFragmentChanged()},e.prototype._doTickIdle=function(){var t=this.hls,e=t.config,r=this.media;if(void 0!==this.levelLastLoaded&&(r||!this.startFragRequested&&e.startFragPrefetch)){var i=void 0;i=this.loadedmetadata?r.currentTime:this.nextLoadPosition;var n=t.nextLoadLevel,a=this.levels[n];if(a){var o=a.bitrate,s=void 0;s=o?Math.max(8*e.maxBufferSize/o,e.maxBufferLength):e.maxBufferLength,s=Math.min(s,e.maxMaxBufferLength);var d=Y.bufferInfo(this.mediaBuffer?this.mediaBuffer:r,i,e.maxBufferHole),c=d.len;if(!(c>=s)){u.b.trace("buffer length of "+c.toFixed(3)+" is below max of "+s.toFixed(3)+". checking for more payload ..."),this.level=t.nextLoadLevel=n;var h=a.details;if(!h||h.live&&this.levelLastLoaded!==n)this.state=pt.WAITING_LEVEL;else{var f=this.fragPrevious;if(!h.live&&f&&!f.backtracked&&f.sn===h.endSN&&!d.nextStart)if(Math.min(r.duration,f.start+f.duration)-Math.max(d.end,f.start)<=Math.max(.2,f.duration)){var p={};return this.altAudio&&(p.type="video"),this.hls.trigger(l.a.BUFFER_EOS,p),void(this.state=pt.ENDED)}this._fetchPayloadOrEos(i,d,h)}}}}},e.prototype._fetchPayloadOrEos=function(t,e,r){var i=this.fragPrevious,n=this.level,a=r.fragments,o=a.length;if(0!==o){var s=a[0].start,l=a[o-1].start+a[o-1].duration,d=e.end,c=void 0;if(r.initSegment&&!r.initSegment.data)c=r.initSegment;else if(r.live){var h=this.config.initialLiveManifestSize;if(o<h)return void u.b.warn("Can not start playback of a level, reason: not enough fragments "+o+" < "+h);if(null===(c=this._ensureFragmentAtLivePoint(r,d,s,l,i,a,o)))return}else d<s&&(c=a[0]);c||(c=this._findFragment(s,i,o,a,d,l,r)),c&&(c.encrypted?(u.b.log("Loading key for "+c.sn+" of ["+r.startSN+" ,"+r.endSN+"],level "+n),this._loadKey(c)):(u.b.log("Loading "+c.sn+" of ["+r.startSN+" ,"+r.endSN+"],level "+n+", currentTime:"+t.toFixed(3)+",bufferEnd:"+d.toFixed(3)),this._loadFragment(c)))}},e.prototype._ensureFragmentAtLivePoint=function(t,e,r,i,n,a,o){var l=this.hls.config,d=this.media,c=void 0,h=void 0!==l.liveMaxLatencyDuration?l.liveMaxLatencyDuration:l.liveMaxLatencyDurationCount*t.targetduration;if(e<Math.max(r-l.maxFragLookUpTolerance,i-h)){var f=this.liveSyncPosition=this.computeLivePosition(r,t);u.b.log("buffer end: "+e.toFixed(3)+" is located too far from the end of live sliding playlist, reset currentTime to : "+f.toFixed(3)),e=f,d&&d.readyState&&d.duration>f&&(d.currentTime=f),this.nextLoadPosition=f}if(t.PTSKnown&&e>i&&d&&d.readyState)return null;if(this.startFragRequested&&!t.PTSKnown){if(n)if(t.hasProgramDateTime)u.b.log("live playlist, switching playlist, load frag with same PDT: "+n.programDateTime),c=function(t,e,r){if(!Array.isArray(t)||!t.length||!Object(s.a)(e))return null;if(e<t[0].programDateTime)return null;if(e>=t[t.length-1].endProgramDateTime)return null;r=r||0;for(var i=0;i<t.length;++i){var n=t[i];if(ct(e,r,n))return n}return null}(a,n.endProgramDateTime,l.maxFragLookUpTolerance);else{var p=n.sn+1;if(p>=t.startSN&&p<=t.endSN){var g=a[p-t.startSN];n.cc===g.cc&&(c=g,u.b.log("live playlist, switching playlist, load frag with next SN: "+c.sn))}c||(c=V.search(a,function(t){return n.cc-t.cc}))&&u.b.log("live playlist, switching playlist, load frag with same CC: "+c.sn)}c||(c=a[Math.min(o-1,Math.round(o/2))],u.b.log("live playlist, switching playlist, unknown, load middle frag : "+c.sn))}return c},e.prototype._findFragment=function(t,e,r,i,n,a,o){var s=this.hls.config,l=void 0;n<a?l=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=t?e[t.sn-e[0].sn+1]:null;return n&&!dt(r,i,n)?n:V.search(e,dt.bind(null,r,i))}(e,i,n,n>a-s.maxFragLookUpTolerance?0:s.maxFragLookUpTolerance):l=i[r-1];if(l){var d=l.sn-o.startSN,c=e&&l.level===e.level,h=i[d-1],f=i[d+1];if(e&&l.sn===e.sn)if(c&&!l.backtracked)if(l.sn<o.endSN){var p=e.deltaPTS;p&&p>s.maxBufferHole&&e.dropped&&d?(l=h,u.b.warn("SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this")):(l=f,u.b.log("SN just loaded, load next one: "+l.sn,l))}else l=null;else l.backtracked&&(f&&f.backtracked?(u.b.warn("Already backtracked from fragment "+f.sn+", will not backtrack to fragment "+l.sn+". Loading fragment "+f.sn),l=f):(u.b.warn("Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe"),l.dropped=0,h?(l=h).backtracked=!0:d&&(l=null)))}return l},e.prototype._loadKey=function(t){this.state=pt.KEY_LOADING,this.hls.trigger(l.a.KEY_LOADING,{frag:t})},e.prototype._loadFragment=function(t){var e=this.fragmentTracker.getState(t);this.fragCurrent=t,this.startFragRequested=!0,Object(s.a)(t.sn)&&!t.bitrateTest&&(this.nextLoadPosition=t.start+t.duration),t.backtracked||e===B||e===j?(t.autoLevel=this.hls.autoLevelEnabled,t.bitrateTest=this.bitrateTest,this.hls.trigger(l.a.FRAG_LOADING,{frag:t}),this.demuxer||(this.demuxer=new et(this.hls,"main")),this.state=pt.FRAG_LOADING):e===G&&this._reduceMaxBufferLength(t.duration)&&this.fragmentTracker.removeFragment(t)},e.prototype.getBufferedFrag=function(t){return this.fragmentTracker.getBufferedFrag(t,M.LevelType.MAIN)},e.prototype.followingBufferedFrag=function(t){return t?this.getBufferedFrag(t.endPTS+.5):null},e.prototype._checkFragmentChanged=function(){var t=void 0,e=void 0,r=this.media;if(r&&r.readyState&&!1===r.seeking&&((e=r.currentTime)>this.lastCurrentTime&&(this.lastCurrentTime=e),Y.isBuffered(r,e)?t=this.getBufferedFrag(e):Y.isBuffered(r,e+.1)&&(t=this.getBufferedFrag(e+.1)),t)){var i=t;if(i!==this.fragPlaying){this.hls.trigger(l.a.FRAG_CHANGED,{frag:i});var n=i.level;this.fragPlaying&&this.fragPlaying.level===n||this.hls.trigger(l.a.LEVEL_SWITCHED,{level:n}),this.fragPlaying=i}}},e.prototype.immediateLevelSwitch=function(){if(u.b.log("immediateLevelSwitch"),!this.immediateSwitch){this.immediateSwitch=!0;var t=this.media,e=void 0;t?(e=t.paused,t.pause()):e=!0,this.previouslyPaused=e}var r=this.fragCurrent;r&&r.loader&&r.loader.abort(),this.fragCurrent=null,this.flushMainBuffer(0,Number.POSITIVE_INFINITY)},e.prototype.immediateLevelSwitchEnd=function(){var t=this.media;t&&t.buffered.length&&(this.immediateSwitch=!1,Y.isBuffered(t,t.currentTime)&&(t.currentTime-=1e-4),this.previouslyPaused||t.play())},e.prototype.nextLevelSwitch=function(){var t=this.media;if(t&&t.readyState){var e,r=void 0,i=void 0;if((e=this.getBufferedFrag(t.currentTime))&&e.startPTS>1&&this.flushMainBuffer(0,e.startPTS-1),t.paused)r=0;else{var n=this.hls.nextLoadLevel,a=this.levels[n],o=this.fragLastKbps;r=o&&this.fragCurrent?this.fragCurrent.duration*a.bitrate/(1e3*o)+1:0}if((i=this.getBufferedFrag(t.currentTime+r))&&(i=this.followingBufferedFrag(i))){var s=this.fragCurrent;s&&s.loader&&s.loader.abort(),this.fragCurrent=null,this.flushMainBuffer(i.maxStartPTS,Number.POSITIVE_INFINITY)}}},e.prototype.flushMainBuffer=function(t,e){this.state=pt.BUFFER_FLUSHING;var r={startOffset:t,endOffset:e};this.altAudio&&(r.type="video"),this.hls.trigger(l.a.BUFFER_FLUSHING,r)},e.prototype.onMediaAttached=function(t){var e=this.media=this.mediaBuffer=t.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvseeked=this.onMediaSeeked.bind(this),this.onvended=this.onMediaEnded.bind(this),e.addEventListener("seeking",this.onvseeking),e.addEventListener("seeked",this.onvseeked),e.addEventListener("ended",this.onvended);var r=this.config;this.levels&&r.autoStartLoad&&this.hls.startLoad(r.startPosition),this.gapController=new ht(r,e,this.fragmentTracker,this.hls)},e.prototype.onMediaDetaching=function(){var t=this.media;t&&t.ended&&(u.b.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0);var e=this.levels;e&&e.forEach(function(t){t.details&&t.details.fragments.forEach(function(t){t.backtracked=void 0})}),t&&(t.removeEventListener("seeking",this.onvseeking),t.removeEventListener("seeked",this.onvseeked),t.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=null,this.loadedmetadata=!1,this.stopLoad()},e.prototype.onMediaSeeking=function(){var t=this.media,e=t?t.currentTime:void 0,r=this.config;Object(s.a)(e)&&u.b.log("media seeking to "+e.toFixed(3));var i=this.mediaBuffer?this.mediaBuffer:t,n=Y.bufferInfo(i,e,this.config.maxBufferHole);if(this.state===pt.FRAG_LOADING){var a=this.fragCurrent;if(0===n.len&&a){var o=r.maxFragLookUpTolerance,l=a.start-o,d=a.start+a.duration+o;e<l||e>d?(a.loader&&(u.b.log("seeking outside of buffer while fragment load in progress, cancel fragment load"),a.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.state=pt.IDLE):u.b.log("seeking outside of buffer but within currently loaded fragment range")}}else this.state===pt.ENDED&&(0===n.len&&(this.fragPrevious=0),this.state=pt.IDLE);t&&(this.lastCurrentTime=e),this.loadedmetadata||(this.nextLoadPosition=this.startPosition=e),this.tick()},e.prototype.onMediaSeeked=function(){var t=this.media,e=t?t.currentTime:void 0;Object(s.a)(e)&&u.b.log("media seeked to "+e.toFixed(3)),this.tick()},e.prototype.onMediaEnded=function(){u.b.log("media ended"),this.startPosition=this.lastCurrentTime=0},e.prototype.onManifestLoading=function(){u.b.log("trigger BUFFER_RESET"),this.hls.trigger(l.a.BUFFER_RESET),this.fragmentTracker.removeAllFragments(),this.stalled=!1,this.startPosition=this.lastCurrentTime=0},e.prototype.onManifestParsed=function(t){var e=!1,r=!1,i=void 0;t.levels.forEach(function(t){(i=t.audioCodec)&&(-1!==i.indexOf("mp4a.40.2")&&(e=!0),-1!==i.indexOf("mp4a.40.5")&&(r=!0))}),this.audioCodecSwitch=e&&r,this.audioCodecSwitch&&u.b.log("both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"),this.levels=t.levels,this.startFragRequested=!1;var n=this.config;(n.autoStartLoad||this.forceStartLoad)&&this.hls.startLoad(n.startPosition)},e.prototype.onLevelLoaded=function(t){var e=t.details,r=t.level,i=this.levels[this.levelLastLoaded],n=this.levels[r],a=e.totalduration,o=0;if(u.b.log("level "+r+" loaded ["+e.startSN+","+e.endSN+"],duration:"+a),e.live){var d=n.details;d&&e.fragments.length>0?(at(d,e),o=e.fragments[0].start,this.liveSyncPosition=this.computeLivePosition(o,d),e.PTSKnown&&Object(s.a)(o)?u.b.log("live playlist sliding:"+o.toFixed(3)):(u.b.log("live playlist - outdated PTS, unknown sliding"),lt(this.fragPrevious,i,e))):(u.b.log("live playlist - first load, unknown sliding"),e.PTSKnown=!1,lt(this.fragPrevious,i,e))}else e.PTSKnown=!1;if(n.details=e,this.levelLastLoaded=r,this.hls.trigger(l.a.LEVEL_UPDATED,{details:e,level:r}),!1===this.startFragRequested){if(-1===this.startPosition||-1===this.lastCurrentTime){var c=e.startTimeOffset;Object(s.a)(c)?(c<0&&(u.b.log("negative start time offset "+c+", count from end of last fragment"),c=o+a+c),u.b.log("start time offset found in playlist, adjust startPosition to "+c),this.startPosition=c):e.live?(this.startPosition=this.computeLivePosition(o,e),u.b.log("configure startPosition to "+this.startPosition)):this.startPosition=0,this.lastCurrentTime=this.startPosition}this.nextLoadPosition=this.startPosition}this.state===pt.WAITING_LEVEL&&(this.state=pt.IDLE),this.tick()},e.prototype.onKeyLoaded=function(){this.state===pt.KEY_LOADING&&(this.state=pt.IDLE,this.tick())},e.prototype.onFragLoaded=function(t){var e=this.fragCurrent,r=this.hls,i=this.levels,n=this.media,a=t.frag;if(this.state===pt.FRAG_LOADING&&e&&"main"===a.type&&a.level===e.level&&a.sn===e.sn){var o=t.stats,s=i[e.level],d=s.details;if(this.bitrateTest=!1,this.stats=o,u.b.log("Loaded "+e.sn+" of ["+d.startSN+" ,"+d.endSN+"],level "+e.level),a.bitrateTest&&r.nextLoadLevel)this.state=pt.IDLE,this.startFragRequested=!1,o.tparsed=o.tbuffered=window.performance.now(),r.trigger(l.a.FRAG_BUFFERED,{stats:o,frag:e,id:"main"}),this.tick();else if("initSegment"===a.sn)this.state=pt.IDLE,o.tparsed=o.tbuffered=window.performance.now(),d.initSegment.data=t.payload,r.trigger(l.a.FRAG_BUFFERED,{stats:o,frag:e,id:"main"}),this.tick();else{u.b.log("Parsing "+e.sn+" of ["+d.startSN+" ,"+d.endSN+"],level "+e.level+", cc "+e.cc),this.state=pt.PARSING,this.pendingBuffering=!0,this.appended=!1,a.bitrateTest&&(a.bitrateTest=!1,this.fragmentTracker.onFragLoaded({frag:a}));var c=!(n&&n.seeking)&&(d.PTSKnown||!d.live),h=d.initSegment?d.initSegment.data:[],f=this._getAudioCodec(s);(this.demuxer=this.demuxer||new et(this.hls,"main")).push(t.payload,h,f,s.videoCodec,e,d.totalduration,c)}}this.fragLoadError=0},e.prototype.onFragParsingInitSegment=function(t){var e=this.fragCurrent,r=t.frag;if(e&&"main"===t.id&&r.sn===e.sn&&r.level===e.level&&this.state===pt.PARSING){var i=t.tracks,n=void 0,a=void 0;if(i.audio&&this.altAudio&&delete i.audio,a=i.audio){var o=this.levels[this.level].audioCodec,s=navigator.userAgent.toLowerCase();o&&this.audioCodecSwap&&(u.b.log("swapping playlist audio codec"),o=-1!==o.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5"),this.audioCodecSwitch&&1!==a.metadata.channelCount&&-1===s.indexOf("firefox")&&(o="mp4a.40.5"),-1!==s.indexOf("android")&&"audio/mpeg"!==a.container&&(o="mp4a.40.2",u.b.log("Android: force audio codec to "+o)),a.levelCodec=o,a.id=t.id}for(n in(a=i.video)&&(a.levelCodec=this.levels[this.level].videoCodec,a.id=t.id),this.hls.trigger(l.a.BUFFER_CODECS,i),i){a=i[n],u.b.log("main track:"+n+",container:"+a.container+",codecs[level/parsed]=["+a.levelCodec+"/"+a.codec+"]");var d=a.initSegment;d&&(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(l.a.BUFFER_APPENDING,{type:n,data:d,parent:"main",content:"initSegment"}))}this.tick()}},e.prototype.onFragParsingData=function(t){var e=this,r=this.fragCurrent,i=t.frag;if(r&&"main"===t.id&&i.sn===r.sn&&i.level===r.level&&("audio"!==t.type||!this.altAudio)&&this.state===pt.PARSING){var n=this.levels[this.level],a=r;if(Object(s.a)(t.endPTS)||(t.endPTS=t.startPTS+r.duration,t.endDTS=t.startDTS+r.duration),!0===t.hasAudio&&a.addElementaryStream(m.ElementaryStreamTypes.AUDIO),!0===t.hasVideo&&a.addElementaryStream(m.ElementaryStreamTypes.VIDEO),u.b.log("Parsed "+t.type+",PTS:["+t.startPTS.toFixed(3)+","+t.endPTS.toFixed(3)+"],DTS:["+t.startDTS.toFixed(3)+"/"+t.endDTS.toFixed(3)+"],nb:"+t.nb+",dropped:"+(t.dropped||0)),"video"===t.type)if(a.dropped=t.dropped,a.dropped)if(a.backtracked)u.b.warn("Already backtracked on this fragment, appending with the gap",a.sn);else{var o=n.details;if(!o||a.sn!==o.startSN)return u.b.warn("missing video frame(s), backtracking fragment",a.sn),this.fragmentTracker.removeFragment(a),a.backtracked=!0,this.nextLoadPosition=t.startPTS,this.state=pt.IDLE,this.fragPrevious=a,void this.tick();u.b.warn("missing video frame(s) on first frag, appending with gap",a.sn)}else a.backtracked=!1;var d=nt(n.details,a,t.startPTS,t.endPTS,t.startDTS,t.endDTS),c=this.hls;c.trigger(l.a.LEVEL_PTS_UPDATED,{details:n.details,level:this.level,drift:d,type:t.type,start:t.startPTS,end:t.endPTS}),[t.data1,t.data2].forEach(function(r){r&&r.length&&e.state===pt.PARSING&&(e.appended=!0,e.pendingBuffering=!0,c.trigger(l.a.BUFFER_APPENDING,{type:t.type,data:r,parent:"main",content:"data"}))}),this.tick()}},e.prototype.onFragParsed=function(t){var e=this.fragCurrent,r=t.frag;e&&"main"===t.id&&r.sn===e.sn&&r.level===e.level&&this.state===pt.PARSING&&(this.stats.tparsed=window.performance.now(),this.state=pt.PARSED,this._checkAppendedParsed())},e.prototype.onAudioTrackSwitching=function(t){var e=!!t.url,r=t.id;if(!e){if(this.mediaBuffer!==this.media){u.b.log("switching on main audio, use media.buffered to schedule main fragment loading"),this.mediaBuffer=this.media;var i=this.fragCurrent;i.loader&&(u.b.log("switching to main audio track, cancel main fragment load"),i.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=pt.IDLE}var n=this.hls;n.trigger(l.a.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"}),n.trigger(l.a.AUDIO_TRACK_SWITCHED,{id:r}),this.altAudio=!1}},e.prototype.onAudioTrackSwitched=function(t){var e=t.id,r=!!this.hls.audioTracks[e].url;if(r){var i=this.videoBuffer;i&&this.mediaBuffer!==i&&(u.b.log("switching on alternate audio, use video.buffered to schedule main fragment loading"),this.mediaBuffer=i)}this.altAudio=r,this.tick()},e.prototype.onBufferCreated=function(t){var e=t.tracks,r=void 0,i=void 0,n=!1;for(var a in e){var o=e[a];"main"===o.id?(i=a,r=o,"video"===a&&(this.videoBuffer=e[a].buffer)):n=!0}n&&r?(u.b.log("alternate track found, use "+i+".buffered to schedule main fragment loading"),this.mediaBuffer=r.buffer):this.mediaBuffer=this.media},e.prototype.onBufferAppended=function(t){if("main"===t.parent){var e=this.state;e!==pt.PARSING&&e!==pt.PARSED||(this.pendingBuffering=t.pending>0,this._checkAppendedParsed())}},e.prototype._checkAppendedParsed=function(){if(!(this.state!==pt.PARSED||this.appended&&this.pendingBuffering)){var t=this.fragCurrent;if(t){var e=this.mediaBuffer?this.mediaBuffer:this.media;u.b.log("main buffered : "+ot.toString(e.buffered)),this.fragPrevious=t;var r=this.stats;r.tbuffered=window.performance.now(),this.fragLastKbps=Math.round(8*r.total/(r.tbuffered-r.tfirst)),this.hls.trigger(l.a.FRAG_BUFFERED,{stats:r,frag:t,id:"main"}),this.state=pt.IDLE}this.tick()}},e.prototype.onError=function(t){var e=t.frag||this.fragCurrent;if(!e||"main"===e.type){var r=!!this.media&&Y.isBuffered(this.media,this.media.currentTime)&&Y.isBuffered(this.media,this.media.currentTime+.5);switch(t.details){case o.a.FRAG_LOAD_ERROR:case o.a.FRAG_LOAD_TIMEOUT:case o.a.KEY_LOAD_ERROR:case o.a.KEY_LOAD_TIMEOUT:if(!t.fatal)if(this.fragLoadError+1<=this.config.fragLoadingMaxRetry){var i=Math.min(Math.pow(2,this.fragLoadError)*this.config.fragLoadingRetryDelay,this.config.fragLoadingMaxRetryTimeout);u.b.warn("mediaController: frag loading failed, retry in "+i+" ms"),this.retryDate=window.performance.now()+i,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.fragLoadError++,this.state=pt.FRAG_LOADING_WAITING_RETRY}else u.b.error("mediaController: "+t.details+" reaches max retry, redispatch as fatal ..."),t.fatal=!0,this.state=pt.ERROR;break;case o.a.LEVEL_LOAD_ERROR:case o.a.LEVEL_LOAD_TIMEOUT:this.state!==pt.ERROR&&(t.fatal?(this.state=pt.ERROR,u.b.warn("streamController: "+t.details+",switch to "+this.state+" state ...")):t.levelRetry||this.state!==pt.WAITING_LEVEL||(this.state=pt.IDLE));break;case o.a.BUFFER_FULL_ERROR:"main"!==t.parent||this.state!==pt.PARSING&&this.state!==pt.PARSED||(r?(this._reduceMaxBufferLength(this.config.maxBufferLength),this.state=pt.IDLE):(u.b.warn("buffer full error also media.currentTime is not buffered, flush everything"),this.fragCurrent=null,this.flushMainBuffer(0,Number.POSITIVE_INFINITY)))}}},e.prototype._reduceMaxBufferLength=function(t){var e=this.config;return e.maxMaxBufferLength>=t&&(e.maxMaxBufferLength/=2,u.b.warn("main:reduce max buffer length to "+e.maxMaxBufferLength+"s"),!0)},e.prototype._checkBuffer=function(){var t=this.media;if(t&&0!==t.readyState){var e=(this.mediaBuffer?this.mediaBuffer:t).buffered;!this.loadedmetadata&&e.length?(this.loadedmetadata=!0,this._seekToStartPos()):this.immediateSwitch?this.immediateLevelSwitchEnd():this.gapController.poll(this.lastCurrentTime,e)}},e.prototype.onFragLoadEmergencyAborted=function(){this.state=pt.IDLE,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.tick()},e.prototype.onBufferFlushed=function(){var t=this.mediaBuffer?this.mediaBuffer:this.media;t&&this.fragmentTracker.detectEvictedFragments(m.ElementaryStreamTypes.VIDEO,t.buffered),this.state=pt.IDLE,this.fragPrevious=null},e.prototype.swapAudioCodec=function(){this.audioCodecSwap=!this.audioCodecSwap},e.prototype.computeLivePosition=function(t,e){var r=void 0!==this.config.liveSyncDuration?this.config.liveSyncDuration:this.config.liveSyncDurationCount*e.targetduration;return t+Math.max(0,e.totalduration-r)},e.prototype._seekToStartPos=function(){var t=this.media,e=t.currentTime,r=t.seeking?e:this.startPosition;e!==r&&(u.b.log("target start position not buffered, seek to buffered.start(0) "+r+" from current time "+e+" "),t.currentTime=r)},e.prototype._getAudioCodec=function(t){var e=this.config.defaultAudioCodec||t.audioCodec;return this.audioCodecSwap&&(u.b.log("swapping playlist audio codec"),e&&(e=-1!==e.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5")),e},ft(e,[{key:"state",set:function(t){if(this.state!==t){var e=this.state;this._state=t,u.b.log("main stream:"+e+"->"+t),this.hls.trigger(l.a.STREAM_STATE_TRANSITION,{previousState:e,nextState:t})}},get:function(){return this._state}},{key:"currentLevel",get:function(){var t=this.media;if(t){var e=this.getBufferedFrag(t.currentTime);if(e)return e.level}return-1}},{key:"nextBufferedFrag",get:function(){var t=this.media;return t?this.followingBufferedFrag(this.getBufferedFrag(t.currentTime)):null}},{key:"nextLevel",get:function(){var t=this.nextBufferedFrag;return t?t.level:-1}},{key:"liveSyncPosition",get:function(){return this._liveSyncPosition},set:function(t){this._liveSyncPosition=t}}]),e}(ut),vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},mt=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var yt=window.performance,bt=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MANIFEST_LOADED,l.a.LEVEL_LOADED,l.a.AUDIO_TRACK_SWITCHED,l.a.FRAG_LOADED,l.a.ERROR));return i.canload=!1,i.currentLevelIndex=null,i.manualLevelIndex=-1,i.timer=null,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.onHandlerDestroying=function(){this.clearTimer(),this.manualLevelIndex=-1},e.prototype.clearTimer=function(){null!==this.timer&&(clearTimeout(this.timer),this.timer=null)},e.prototype.startLoad=function(){var t=this._levels;this.canload=!0,this.levelRetryCount=0,t&&t.forEach(function(t){t.loadError=0;var e=t.details;e&&e.live&&(t.details=void 0)}),null!==this.timer&&this.loadLevel()},e.prototype.stopLoad=function(){this.canload=!1},e.prototype.onManifestLoaded=function(t){var e=[],r=void 0,i={},n=null,a=!1,s=!1,d=/chrome|firefox/.test(navigator.userAgent.toLowerCase()),c=[];if(t.levels.forEach(function(t){t.loadError=0,t.fragmentError=!1,a=a||!!t.videoCodec,s=s||!!t.audioCodec||!(!t.attrs||!t.attrs.AUDIO),d&&t.audioCodec&&-1!==t.audioCodec.indexOf("mp4a.40.34")&&(t.audioCodec=void 0),(n=i[t.bitrate])?n.url.push(t.url):(t.url=[t.url],t.urlId=0,i[t.bitrate]=t,e.push(t)),t.attrs&&t.attrs.AUDIO&&rt(n||t,"audio",t.attrs.AUDIO),t.attrs&&t.attrs.SUBTITLES&&rt(n||t,"text",t.attrs.SUBTITLES)}),a&&s&&(e=e.filter(function(t){return!!t.videoCodec})),e=e.filter(function(t){var e=t.audioCodec,r=t.videoCodec;return(!e||A(e))&&(!r||A(r))}),t.audioTracks&&(c=t.audioTracks.filter(function(t){return!t.audioCodec||A(t.audioCodec,"audio")})).forEach(function(t,e){t.id=e}),e.length>0){r=e[0].bitrate,e.sort(function(t,e){return t.bitrate-e.bitrate}),this._levels=e;for(var h=0;h<e.length;h++)if(e[h].bitrate===r){this._firstLevel=h,u.b.log("manifest loaded,"+e.length+" level(s) found, first bitrate:"+r);break}this.hls.trigger(l.a.MANIFEST_PARSED,{levels:e,audioTracks:c,firstLevel:this._firstLevel,stats:t.stats,audio:s,video:a,altAudio:c.length>0&&a})}else this.hls.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:!0,url:this.hls.url,reason:"no level with compatible codecs found in manifest"})},e.prototype.setLevelInternal=function(t){var e=this._levels,r=this.hls;if(t>=0&&t<e.length){if(this.clearTimer(),this.currentLevelIndex!==t){u.b.log("switching to level "+t),this.currentLevelIndex=t;var i=e[t];i.level=t,r.trigger(l.a.LEVEL_SWITCHING,i)}var n=e[t],a=n.details;if(!a||a.live){var s=n.urlId;r.trigger(l.a.LEVEL_LOADING,{url:n.url[s],level:t,id:s})}}else r.trigger(l.a.ERROR,{type:o.b.OTHER_ERROR,details:o.a.LEVEL_SWITCH_ERROR,level:t,fatal:!1,reason:"invalid level idx"})},e.prototype.onError=function(t){if(t.fatal)t.type===o.b.NETWORK_ERROR&&this.clearTimer();else{var e=!1,r=!1,i=void 0;switch(t.details){case o.a.FRAG_LOAD_ERROR:case o.a.FRAG_LOAD_TIMEOUT:case o.a.KEY_LOAD_ERROR:case o.a.KEY_LOAD_TIMEOUT:i=t.frag.level,r=!0;break;case o.a.LEVEL_LOAD_ERROR:case o.a.LEVEL_LOAD_TIMEOUT:i=t.context.level,e=!0;break;case o.a.REMUX_ALLOC_ERROR:i=t.level,e=!0}void 0!==i&&this.recoverLevel(t,i,e,r)}},e.prototype.recoverLevel=function(t,e,r,i){var n=this,a=this.hls.config,o=t.details,s=this._levels[e],l=void 0,d=void 0,c=void 0;if(s.loadError++,s.fragmentError=i,r){if(!(this.levelRetryCount+1<=a.levelLoadingMaxRetry))return u.b.error("level controller, cannot recover from "+o+" error"),this.currentLevelIndex=null,this.clearTimer(),void(t.fatal=!0);d=Math.min(Math.pow(2,this.levelRetryCount)*a.levelLoadingRetryDelay,a.levelLoadingMaxRetryTimeout),this.timer=setTimeout(function(){return n.loadLevel()},d),t.levelRetry=!0,this.levelRetryCount++,u.b.warn("level controller, "+o+", retry in "+d+" ms, current retry count is "+this.levelRetryCount)}(r||i)&&((l=s.url.length)>1&&s.loadError<l?(s.urlId=(s.urlId+1)%l,s.details=void 0,u.b.warn("level controller, "+o+" for level "+e+": switching to redundant URL-id "+s.urlId)):-1===this.manualLevelIndex?(c=0===e?this._levels.length-1:e-1,u.b.warn("level controller, "+o+": switch to "+c),this.hls.nextAutoLevel=this.currentLevelIndex=c):i&&(u.b.warn("level controller, "+o+": reload a fragment"),this.currentLevelIndex=null))},e.prototype.onFragLoaded=function(t){var e=t.frag;if(void 0!==e&&"main"===e.type){var r=this._levels[e.level];void 0!==r&&(r.fragmentError=!1,r.loadError=0,this.levelRetryCount=0)}},e.prototype.onLevelLoaded=function(t){var e=this,r=t.level;if(r===this.currentLevelIndex){var i=this._levels[r];i.fragmentError||(i.loadError=0,this.levelRetryCount=0);var n=t.details;if(n.live){var a=1e3*(n.averagetargetduration?n.averagetargetduration:n.targetduration),o=a,s=i.details;s&&n.endSN===s.endSN&&(o/=2,u.b.log("same live playlist, reload twice faster")),o-=yt.now()-t.stats.trequest,o=Math.max(a/2,Math.round(o)),u.b.log("live playlist, reload in "+Math.round(o)+" ms"),this.timer=setTimeout(function(){return e.loadLevel()},o)}else this.clearTimer()}},e.prototype.onAudioTrackSwitched=function(t){var e=this.hls.audioTracks[t.id].groupId,r=this.hls.levels[this.currentLevelIndex];if(r&&r.audioGroupIds){var i=r.audioGroupIds.findIndex(function(t){return t===e});i!==r.urlId&&(r.urlId=i,this.startLoad())}},e.prototype.loadLevel=function(){if(u.b.debug("call to loadLevel"),null!==this.currentLevelIndex&&this.canload){var t=this._levels[this.currentLevelIndex];if("object"===(void 0===t?"undefined":vt(t))&&t.url.length>0){var e=this.currentLevelIndex,r=t.urlId,i=t.url[r];u.b.log("Attempt loading level index "+e+" with URL-id "+r),this.hls.trigger(l.a.LEVEL_LOADING,{url:i,level:e,id:r})}}},mt(e,[{key:"levels",get:function(){return this._levels}},{key:"level",get:function(){return this.currentLevelIndex},set:function(t){var e=this._levels;e&&(t=Math.min(t,e.length-1),this.currentLevelIndex===t&&e[t].details||this.setLevelInternal(t))}},{key:"manualLevel",get:function(){return this.manualLevelIndex},set:function(t){this.manualLevelIndex=t,void 0===this._startLevel&&(this._startLevel=t),-1!==t&&(this.level=t)}},{key:"firstLevel",get:function(){return this._firstLevel},set:function(t){this._firstLevel=t}},{key:"startLevel",get:function(){if(void 0===this._startLevel){var t=this.hls.config.startLevel;return void 0!==t?t:this._firstLevel}return this._startLevel},set:function(t){this._startLevel=t}},{key:"nextLoadLevel",get:function(){return-1!==this.manualLevelIndex?this.manualLevelIndex:this.hls.nextAutoLevel},set:function(t){this.level=t,-1===this.manualLevelIndex&&(this.hls.nextAutoLevel=t)}}]),e}(h),Et=r(6);function Tt(t,e){var r=null;try{r=new window.Event("addtrack")}catch(t){(r=document.createEvent("Event")).initEvent("addtrack",!1,!1)}r.track=t,e.dispatchEvent(r)}function St(t){if(t&&t.cues)for(;t.cues.length>0;)t.removeCue(t.cues[0])}var _t=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHED,l.a.MEDIA_DETACHING,l.a.FRAG_PARSING_METADATA));return i.id3Track=void 0,i.media=void 0,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){h.prototype.destroy.call(this)},e.prototype.onMediaAttached=function(t){this.media=t.media,this.media},e.prototype.onMediaDetaching=function(){St(this.id3Track),this.id3Track=void 0,this.media=void 0},e.prototype.getID3Track=function(t){for(var e=0;e<t.length;e++){var r=t[e];if("metadata"===r.kind&&"id3"===r.label)return Tt(r,this.media),r}return this.media.addTextTrack("metadata","id3")},e.prototype.onFragParsingMetadata=function(t){var e=t.frag,r=t.samples;this.id3Track||(this.id3Track=this.getID3Track(this.media.textTracks),this.id3Track.mode="hidden");for(var i=window.WebKitDataCue||window.VTTCue||window.TextTrackCue,n=0;n<r.length;n++){var a=Et.a.getID3Frames(r[n].data);if(a){var o=r[n].pts,s=n<r.length-1?r[n+1].pts:e.endPTS;o===s&&(s+=1e-4);for(var l=0;l<a.length;l++){var u=a[l];if(!Et.a.isTimeStampFrame(u)){var d=new i(o,s,"");d.value=u,this.id3Track.addCue(d)}}}}},e}(h);var At=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.alpha_=e?Math.exp(Math.log(.5)/e):0,this.estimate_=0,this.totalWeight_=0}return t.prototype.sample=function(t,e){var r=Math.pow(this.alpha_,t);this.estimate_=e*(1-r)+r*this.estimate_,this.totalWeight_+=t},t.prototype.getTotalWeight=function(){return this.totalWeight_},t.prototype.getEstimate=function(){if(this.alpha_){var t=1-Math.pow(this.alpha_,this.totalWeight_);return this.estimate_/t}return this.estimate_},t}();var Rt=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.hls=e,this.defaultEstimate_=n,this.minWeight_=.001,this.minDelayMs_=50,this.slow_=new At(r),this.fast_=new At(i)}return t.prototype.sample=function(t,e){var r=8e3*e/(t=Math.max(t,this.minDelayMs_)),i=t/1e3;this.fast_.sample(i,r),this.slow_.sample(i,r)},t.prototype.canEstimate=function(){var t=this.fast_;return t&&t.getTotalWeight()>=this.minWeight_},t.prototype.getEstimate=function(){return this.canEstimate()?Math.min(this.fast_.getEstimate(),this.slow_.getEstimate()):this.defaultEstimate_},t.prototype.destroy=function(){},t}(),wt=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var Lt=window.performance,Dt=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.FRAG_LOADING,l.a.FRAG_LOADED,l.a.FRAG_BUFFERED,l.a.ERROR));return i.lastLoadedFragLevel=0,i._nextAutoLevel=-1,i.hls=r,i.timer=null,i._bwEstimator=null,i.onCheck=i._abandonRulesCheck.bind(i),i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){this.clearTimer(),h.prototype.destroy.call(this)},e.prototype.onFragLoading=function(t){var e=t.frag;if("main"===e.type&&(this.timer||(this.fragCurrent=e,this.timer=setInterval(this.onCheck,100)),!this._bwEstimator)){var r=this.hls,i=r.config,n=e.level,a=void 0,o=void 0;r.levels[n].details.live?(a=i.abrEwmaFastLive,o=i.abrEwmaSlowLive):(a=i.abrEwmaFastVoD,o=i.abrEwmaSlowVoD),this._bwEstimator=new Rt(r,o,a,i.abrEwmaDefaultEstimate)}},e.prototype._abandonRulesCheck=function(){var t=this.hls,e=t.media,r=this.fragCurrent;if(r){var i=r.loader,n=t.minAutoLevel;if(!i||i.stats&&i.stats.aborted)return u.b.warn("frag loader destroy or aborted, disarm abandonRules"),this.clearTimer(),void(this._nextAutoLevel=-1);var a=i.stats;if(e&&a&&(!e.paused&&0!==e.playbackRate||!e.readyState)&&r.autoLevel&&r.level){var o=Lt.now()-a.trequest,s=Math.abs(e.playbackRate);if(o>500*r.duration/s){var d=t.levels,c=Math.max(1,a.bw?a.bw/8:1e3*a.loaded/o),h=d[r.level],f=h.realBitrate?Math.max(h.realBitrate,h.bitrate):h.bitrate,p=a.total?a.total:Math.max(a.loaded,Math.round(r.duration*f/8)),g=e.currentTime,v=(p-a.loaded)/c,m=(Y.bufferInfo(e,g,t.config.maxBufferHole).end-g)/s;if(m<2*r.duration/s&&v>m){var y=void 0,b=void 0;for(b=r.level-1;b>n;b--){var E=d[b].realBitrate?Math.max(d[b].realBitrate,d[b].bitrate):d[b].bitrate;if((y=r.duration*E/(6.4*c))<m)break}y<v&&(u.b.warn("loading too slow, abort fragment loading and switch to level "+b+":fragLoadedDelay["+b+"]<fragLoadedDelay["+(r.level-1)+"];bufferStarvationDelay:"+y.toFixed(1)+"<"+v.toFixed(1)+":"+m.toFixed(1)),t.nextLoadLevel=b,this._bwEstimator.sample(o,a.loaded),i.abort(),this.clearTimer(),t.trigger(l.a.FRAG_LOAD_EMERGENCY_ABORTED,{frag:r,stats:a}))}}}}},e.prototype.onFragLoaded=function(t){var e=t.frag;if("main"===e.type&&Object(s.a)(e.sn)){if(this.clearTimer(),this.lastLoadedFragLevel=e.level,this._nextAutoLevel=-1,this.hls.config.abrMaxWithRealBitrate){var r=this.hls.levels[e.level],i=(r.loaded?r.loaded.bytes:0)+t.stats.loaded,n=(r.loaded?r.loaded.duration:0)+t.frag.duration;r.loaded={bytes:i,duration:n},r.realBitrate=Math.round(8*i/n)}if(t.frag.bitrateTest){var a=t.stats;a.tparsed=a.tbuffered=a.tload,this.onFragBuffered(t)}}},e.prototype.onFragBuffered=function(t){var e=t.stats,r=t.frag;if(!0!==e.aborted&&"main"===r.type&&Object(s.a)(r.sn)&&(!r.bitrateTest||e.tload===e.tbuffered)){var i=e.tparsed-e.trequest;u.b.log("latency/loading/parsing/append/kbps:"+Math.round(e.tfirst-e.trequest)+"/"+Math.round(e.tload-e.tfirst)+"/"+Math.round(e.tparsed-e.tload)+"/"+Math.round(e.tbuffered-e.tparsed)+"/"+Math.round(8*e.loaded/(e.tbuffered-e.trequest))),this._bwEstimator.sample(i,e.loaded),e.bwEstimate=this._bwEstimator.getEstimate(),r.bitrateTest?this.bitrateTestDelay=i/1e3:this.bitrateTestDelay=0}},e.prototype.onError=function(t){switch(t.details){case o.a.FRAG_LOAD_ERROR:case o.a.FRAG_LOAD_TIMEOUT:this.clearTimer()}},e.prototype.clearTimer=function(){clearInterval(this.timer),this.timer=null},e.prototype._findBestLevel=function(t,e,r,i,n,a,o,s,l){for(var d=n;d>=i;d--){var c=l[d];if(c){var h=c.details,f=h?h.totalduration/h.fragments.length:e,p=!!h&&h.live,g=void 0;g=d<=t?o*r:s*r;var v=l[d].realBitrate?Math.max(l[d].realBitrate,l[d].bitrate):l[d].bitrate,m=v*f/g;if(u.b.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: "+d+"/"+Math.round(g)+"/"+v+"/"+f+"/"+a+"/"+m),g>v&&(!m||p&&!this.bitrateTestDelay||m<a))return d}}return-1},wt(e,[{key:"nextAutoLevel",get:function(){var t=this._nextAutoLevel,e=this._bwEstimator;if(!(-1===t||e&&e.canEstimate()))return t;var r=this._nextABRAutoLevel;return-1!==t&&(r=Math.min(t,r)),r},set:function(t){this._nextAutoLevel=t}},{key:"_nextABRAutoLevel",get:function(){var t=this.hls,e=t.maxAutoLevel,r=t.levels,i=t.config,n=t.minAutoLevel,a=t.media,o=this.lastLoadedFragLevel,s=this.fragCurrent?this.fragCurrent.duration:0,l=a?a.currentTime:0,d=a&&0!==a.playbackRate?Math.abs(a.playbackRate):1,c=this._bwEstimator?this._bwEstimator.getEstimate():i.abrEwmaDefaultEstimate,h=(Y.bufferInfo(a,l,i.maxBufferHole).end-l)/d,f=this._findBestLevel(o,s,c,n,e,h,i.abrBandWidthFactor,i.abrBandWidthUpFactor,r);if(f>=0)return f;u.b.trace("rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering");var p=s?Math.min(s,i.maxStarvationDelay):i.maxStarvationDelay,g=i.abrBandWidthFactor,v=i.abrBandWidthUpFactor;if(0===h){var m=this.bitrateTestDelay;if(m)p=(s?Math.min(s,i.maxLoadingDelay):i.maxLoadingDelay)-m,u.b.trace("bitrate test took "+Math.round(1e3*m)+"ms, set first fragment max fetchDuration to "+Math.round(1e3*p)+" ms"),g=v=1}return f=this._findBestLevel(o,s,c,n,e,h+p,g,v,r),Math.max(f,0)}}]),e}(h);var kt=$(),It=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHING,l.a.MEDIA_DETACHING,l.a.MANIFEST_PARSED,l.a.BUFFER_RESET,l.a.BUFFER_APPENDING,l.a.BUFFER_CODECS,l.a.BUFFER_EOS,l.a.BUFFER_FLUSHING,l.a.LEVEL_PTS_UPDATED,l.a.LEVEL_UPDATED));return i._msDuration=null,i._levelDuration=null,i._live=null,i._objectUrl=null,i.onsbue=i.onSBUpdateEnd.bind(i),i.onsbe=i.onSBUpdateError.bind(i),i.pendingTracks={},i.tracks={},i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){h.prototype.destroy.call(this)},e.prototype.onLevelPtsUpdated=function(t){var e=t.type,r=this.tracks.audio;if("audio"===e&&r&&"audio/mpeg"===r.container){var i=this.sourceBuffer.audio;if(Math.abs(i.timestampOffset-t.start)>.1){var n=i.updating;try{i.abort()}catch(t){n=!0,u.b.warn("can not abort audio buffer: "+t)}n?this.audioTimestampOffset=t.start:(u.b.warn("change mpeg audio timestamp offset from "+i.timestampOffset+" to "+t.start),i.timestampOffset=t.start)}}},e.prototype.onManifestParsed=function(t){var e=t.audio,r=t.video||t.levels.length&&t.altAudio,i=0;t.altAudio&&(e||r)&&(i=(e?1:0)+(r?1:0),u.b.log(i+" sourceBuffer(s) expected")),this.sourceBufferNb=i},e.prototype.onMediaAttaching=function(t){var e=this.media=t.media;if(e){var r=this.mediaSource=new kt;this.onmso=this.onMediaSourceOpen.bind(this),this.onmse=this.onMediaSourceEnded.bind(this),this.onmsc=this.onMediaSourceClose.bind(this),r.addEventListener("sourceopen",this.onmso),r.addEventListener("sourceended",this.onmse),r.addEventListener("sourceclose",this.onmsc),e.src=window.URL.createObjectURL(r),this._objectUrl=e.src}},e.prototype.onMediaDetaching=function(){u.b.log("media source detaching");var t=this.mediaSource;if(t){if("open"===t.readyState)try{t.endOfStream()}catch(t){u.b.warn("onMediaDetaching:"+t.message+" while calling endOfStream")}t.removeEventListener("sourceopen",this.onmso),t.removeEventListener("sourceended",this.onmse),t.removeEventListener("sourceclose",this.onmsc),this.media&&(window.URL.revokeObjectURL(this._objectUrl),this.media.src===this._objectUrl?(this.media.removeAttribute("src"),this.media.load()):u.b.warn("media.src was changed by a third party - skip cleanup")),this.mediaSource=null,this.media=null,this._objectUrl=null,this.pendingTracks={},this.tracks={},this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0}this.onmso=this.onmse=this.onmsc=null,this.hls.trigger(l.a.MEDIA_DETACHED)},e.prototype.onMediaSourceOpen=function(){u.b.log("media source opened"),this.hls.trigger(l.a.MEDIA_ATTACHED,{media:this.media});var t=this.mediaSource;t&&t.removeEventListener("sourceopen",this.onmso),this.checkPendingTracks()},e.prototype.checkPendingTracks=function(){var t=this.pendingTracks,e=Object.keys(t).length;e&&(this.sourceBufferNb<=e||0===this.sourceBufferNb)&&(this.createSourceBuffers(t),this.pendingTracks={},this.doAppending())},e.prototype.onMediaSourceClose=function(){u.b.log("media source closed")},e.prototype.onMediaSourceEnded=function(){u.b.log("media source ended")},e.prototype.onSBUpdateEnd=function(){if(this.audioTimestampOffset){var t=this.sourceBuffer.audio;u.b.warn("change mpeg audio timestamp offset from "+t.timestampOffset+" to "+this.audioTimestampOffset),t.timestampOffset=this.audioTimestampOffset,delete this.audioTimestampOffset}this._needsFlush&&this.doFlush(),this._needsEos&&this.checkEos(),this.appending=!1;var e=this.parent,r=this.segments.reduce(function(t,r){return r.parent===e?t+1:t},0),i={},n=this.sourceBuffer;for(var a in n)i[a]=n[a].buffered;this.hls.trigger(l.a.BUFFER_APPENDED,{parent:e,pending:r,timeRanges:i}),this._needsFlush||this.doAppending(),this.updateMediaElementDuration()},e.prototype.onSBUpdateError=function(t){u.b.error("sourceBuffer error:",t),this.hls.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_APPENDING_ERROR,fatal:!1})},e.prototype.onBufferReset=function(){var t=this.sourceBuffer;for(var e in t){var r=t[e];try{this.mediaSource.removeSourceBuffer(r),r.removeEventListener("updateend",this.onsbue),r.removeEventListener("error",this.onsbe)}catch(t){}}this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0},e.prototype.onBufferCodecs=function(t){if(0===Object.keys(this.sourceBuffer).length){for(var e in t)this.pendingTracks[e]=t[e];var r=this.mediaSource;r&&"open"===r.readyState&&this.checkPendingTracks()}},e.prototype.createSourceBuffers=function(t){var e=this.sourceBuffer,r=this.mediaSource;for(var i in t)if(!e[i]){var n=t[i],a=n.levelCodec||n.codec,s=n.container+";codecs="+a;u.b.log("creating sourceBuffer("+s+")");try{var d=e[i]=r.addSourceBuffer(s);d.addEventListener("updateend",this.onsbue),d.addEventListener("error",this.onsbe),this.tracks[i]={codec:a,container:n.container},n.buffer=d}catch(t){u.b.error("error while trying to add sourceBuffer:"+t.message),this.hls.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_ADD_CODEC_ERROR,fatal:!1,err:t,mimeType:s})}}this.hls.trigger(l.a.BUFFER_CREATED,{tracks:t})},e.prototype.onBufferAppending=function(t){this._needsFlush||(this.segments?this.segments.push(t):this.segments=[t],this.doAppending())},e.prototype.onBufferAppendFail=function(t){u.b.error("sourceBuffer error:",t.event),this.hls.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.BUFFER_APPENDING_ERROR,fatal:!1})},e.prototype.onBufferEos=function(t){var e=this.sourceBuffer,r=t.type;for(var i in e)r&&i!==r||e[i].ended||(e[i].ended=!0,u.b.log(i+" sourceBuffer now EOS"));this.checkEos()},e.prototype.checkEos=function(){var t=this.sourceBuffer,e=this.mediaSource;if(e&&"open"===e.readyState){for(var r in t){var i=t[r];if(!i.ended)return;if(i.updating)return void(this._needsEos=!0)}u.b.log("all media data available, signal endOfStream() to MediaSource and stop loading fragment");try{e.endOfStream()}catch(t){u.b.warn("exception while calling mediaSource.endOfStream()")}this._needsEos=!1}else this._needsEos=!1},e.prototype.onBufferFlushing=function(t){this.flushRange.push({start:t.startOffset,end:t.endOffset,type:t.type}),this.flushBufferCounter=0,this.doFlush()},e.prototype.onLevelUpdated=function(t){var e=t.details;e.fragments.length>0&&(this._levelDuration=e.totalduration+e.fragments[0].start,this._live=e.live,this.updateMediaElementDuration())},e.prototype.updateMediaElementDuration=function(){var t,e=this.hls.config;if(null!==this._levelDuration&&this.media&&this.mediaSource&&this.sourceBuffer&&0!==this.media.readyState&&"open"===this.mediaSource.readyState){for(var r in this.sourceBuffer)if(!0===this.sourceBuffer[r].updating)return;t=this.media.duration,null===this._msDuration&&(this._msDuration=this.mediaSource.duration),!0===this._live&&!0===e.liveDurationInfinity?(u.b.log("Media Source duration is set to Infinity"),this._msDuration=this.mediaSource.duration=1/0):(this._levelDuration>this._msDuration&&this._levelDuration>t||!Object(s.a)(t))&&(u.b.log("Updating Media Source duration to "+this._levelDuration.toFixed(3)),this._msDuration=this.mediaSource.duration=this._levelDuration)}},e.prototype.doFlush=function(){for(;this.flushRange.length;){var t=this.flushRange[0];if(!this.flushBuffer(t.start,t.end,t.type))return void(this._needsFlush=!0);this.flushRange.shift(),this.flushBufferCounter=0}if(0===this.flushRange.length){this._needsFlush=!1;var e=0,r=this.sourceBuffer;try{for(var i in r)e+=r[i].buffered.length}catch(t){u.b.error("error while accessing sourceBuffer.buffered")}this.appended=e,this.hls.trigger(l.a.BUFFER_FLUSHED)}},e.prototype.doAppending=function(){var t=this.hls,e=this.sourceBuffer,r=this.segments;if(Object.keys(e).length){if(this.media.error)return this.segments=[],void u.b.error("trying to append although a media error occured, flush segment and abort");if(this.appending)return;if(r&&r.length){var i=r.shift();try{var n=e[i.type];n?n.updating?r.unshift(i):(n.ended=!1,this.parent=i.parent,n.appendBuffer(i.data),this.appendError=0,this.appended++,this.appending=!0):this.onSBUpdateEnd()}catch(e){u.b.error("error while trying to append buffer:"+e.message),r.unshift(i);var a={type:o.b.MEDIA_ERROR,parent:i.parent};22!==e.code?(this.appendError?this.appendError++:this.appendError=1,a.details=o.a.BUFFER_APPEND_ERROR,this.appendError>t.config.appendErrorMaxRetry?(u.b.log("fail "+t.config.appendErrorMaxRetry+" times to append segment in sourceBuffer"),r=[],a.fatal=!0,t.trigger(l.a.ERROR,a)):(a.fatal=!1,t.trigger(l.a.ERROR,a))):(this.segments=[],a.details=o.a.BUFFER_FULL_ERROR,a.fatal=!1,t.trigger(l.a.ERROR,a))}}}},e.prototype.flushBuffer=function(t,e,r){var i=void 0,n=void 0,a=void 0,o=void 0,s=void 0,l=void 0,d=this.sourceBuffer;if(Object.keys(d).length){if(u.b.log("flushBuffer,pos/start/end: "+this.media.currentTime.toFixed(3)+"/"+t+"/"+e),this.flushBufferCounter<this.appended){for(var c in d)if(!r||c===r){if((i=d[c]).ended=!1,i.updating)return u.b.warn("cannot flush, sb updating in progress"),!1;try{for(n=0;n<i.buffered.length;n++)if(a=i.buffered.start(n),o=i.buffered.end(n),-1!==navigator.userAgent.toLowerCase().indexOf("firefox")&&e===Number.POSITIVE_INFINITY?(s=t,l=e):(s=Math.max(a,t),l=Math.min(o,e)),Math.min(l,o)-s>.5)return this.flushBufferCounter++,u.b.log("flush "+c+" ["+s+","+l+"], of ["+a+","+o+"], pos:"+this.media.currentTime),i.remove(s,l),!1}catch(t){u.b.warn("exception while accessing sourcebuffer, it might have been removed from MediaSource")}}}else u.b.warn("abort flushing too many retries");u.b.log("buffer flushed")}return!0},e}(h),Ot=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var Ct=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.FPS_DROP_LEVEL_CAPPING,l.a.MEDIA_ATTACHING,l.a.MANIFEST_PARSED,l.a.BUFFER_CODECS,l.a.MEDIA_DETACHING));return i.autoLevelCapping=Number.POSITIVE_INFINITY,i.firstLevel=null,i.levels=[],i.media=null,i.restrictedLevels=[],i.timer=null,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){this.hls.config.capLevelToPlayerSize&&(this.media=null,this._stopCapping())},e.prototype.onFpsDropLevelCapping=function(t){e.isLevelAllowed(t.droppedLevel,this.restrictedLevels)&&this.restrictedLevels.push(t.droppedLevel)},e.prototype.onMediaAttaching=function(t){this.media=t.media instanceof window.HTMLVideoElement?t.media:null},e.prototype.onManifestParsed=function(t){var e=this.hls;this.restrictedLevels=[],this.levels=t.levels,this.firstLevel=t.firstLevel,e.config.capLevelToPlayerSize&&(t.video||t.levels.length&&t.altAudio)&&this._startCapping()},e.prototype.onBufferCodecs=function(t){this.hls.config.capLevelToPlayerSize&&t.video&&this._startCapping()},e.prototype.onLevelsUpdated=function(t){this.levels=t.levels},e.prototype.onMediaDetaching=function(){this._stopCapping()},e.prototype.detectPlayerSize=function(){if(this.media){var t=this.levels?this.levels.length:0;if(t){var e=this.hls;e.autoLevelCapping=this.getMaxLevel(t-1),e.autoLevelCapping>this.autoLevelCapping&&e.streamController.nextLevelSwitch(),this.autoLevelCapping=e.autoLevelCapping}}},e.prototype.getMaxLevel=function(t){var r=this;if(!this.levels)return-1;var i=this.levels.filter(function(i,n){return e.isLevelAllowed(n,r.restrictedLevels)&&n<=t});return e.getMaxLevelByMediaSize(i,this.mediaWidth,this.mediaHeight)},e.prototype._startCapping=function(){this.timer||(this.autoLevelCapping=Number.POSITIVE_INFINITY,this.hls.firstLevel=this.getMaxLevel(this.firstLevel),clearInterval(this.timer),this.timer=setInterval(this.detectPlayerSize.bind(this),1e3),this.detectPlayerSize())},e.prototype._stopCapping=function(){this.restrictedLevels=[],this.firstLevel=null,this.autoLevelCapping=Number.POSITIVE_INFINITY,this.timer&&(this.timer=clearInterval(this.timer),this.timer=null)},e.isLevelAllowed=function(t){return-1===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).indexOf(t)},e.getMaxLevelByMediaSize=function(t,e,r){if(!t||t&&!t.length)return-1;for(var i=function(t,e){return!e||(t.width!==e.width||t.height!==e.height)},n=t.length-1,a=0;a<t.length;a+=1){var o=t[a];if((o.width>=e||o.height>=r)&&i(o,t[a+1])){n=a;break}}return n},Ot(e,[{key:"mediaWidth",get:function(){var t=void 0,r=this.media;return r&&(t=r.width||r.clientWidth||r.offsetWidth,t*=e.contentScaleFactor),t}},{key:"mediaHeight",get:function(){var t=void 0,r=this.media;return r&&(t=r.height||r.clientHeight||r.offsetHeight,t*=e.contentScaleFactor),t}}],[{key:"contentScaleFactor",get:function(){var t=1;try{t=window.devicePixelRatio}catch(t){}return t}}]),e}(h);var xt=window.performance,Pt=function(t){function e(r){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHING))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.destroy=function(){this.timer&&clearInterval(this.timer),this.isVideoPlaybackQualityAvailable=!1},e.prototype.onMediaAttaching=function(t){var e=this.hls.config;e.capLevelOnFPSDrop&&("function"==typeof(this.video=t.media instanceof window.HTMLVideoElement?t.media:null).getVideoPlaybackQuality&&(this.isVideoPlaybackQualityAvailable=!0),clearInterval(this.timer),this.timer=setInterval(this.checkFPSInterval.bind(this),e.fpsDroppedMonitoringPeriod))},e.prototype.checkFPS=function(t,e,r){var i=xt.now();if(e){if(this.lastTime){var n=i-this.lastTime,a=r-this.lastDroppedFrames,o=e-this.lastDecodedFrames,s=1e3*a/n,d=this.hls;if(d.trigger(l.a.FPS_DROP,{currentDropped:a,currentDecoded:o,totalDroppedFrames:r}),s>0&&a>d.config.fpsDroppedMonitoringThreshold*o){var c=d.currentLevel;u.b.warn("drop FPS ratio greater than max allowed value for currentLevel: "+c),c>0&&(-1===d.autoLevelCapping||d.autoLevelCapping>=c)&&(c-=1,d.trigger(l.a.FPS_DROP_LEVEL_CAPPING,{level:c,droppedLevel:d.currentLevel}),d.autoLevelCapping=c,d.streamController.nextLevelSwitch())}}this.lastTime=i,this.lastDroppedFrames=r,this.lastDecodedFrames=e}},e.prototype.checkFPSInterval=function(){var t=this.video;if(t)if(this.isVideoPlaybackQualityAvailable){var e=t.getVideoPlaybackQuality();this.checkFPS(t,e.totalVideoFrames,e.droppedVideoFrames)}else this.checkFPS(t,t.webkitDecodedFrameCount,t.webkitDroppedFrameCount)},e}(h);var Ft=window,Mt=Ft.performance,Nt=Ft.XMLHttpRequest,Ut=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e&&e.xhrSetup&&(this.xhrSetup=e.xhrSetup)}return t.prototype.destroy=function(){this.abort(),this.loader=null},t.prototype.abort=function(){var t=this.loader;t&&4!==t.readyState&&(this.stats.aborted=!0,t.abort()),window.clearTimeout(this.requestTimeout),this.requestTimeout=null,window.clearTimeout(this.retryTimeout),this.retryTimeout=null},t.prototype.load=function(t,e,r){this.context=t,this.config=e,this.callbacks=r,this.stats={trequest:Mt.now(),retry:0},this.retryDelay=e.retryDelay,this.loadInternal()},t.prototype.loadInternal=function(){var t=void 0,e=this.context;t=this.loader=new Nt;var r=this.stats;r.tfirst=0,r.loaded=0;var i=this.xhrSetup;try{if(i)try{i(t,e.url)}catch(r){t.open("GET",e.url,!0),i(t,e.url)}t.readyState||t.open("GET",e.url,!0)}catch(r){return void this.callbacks.onError({code:t.status,text:r.message},e,t)}e.rangeEnd&&t.setRequestHeader("Range","bytes="+e.rangeStart+"-"+(e.rangeEnd-1)),t.onreadystatechange=this.readystatechange.bind(this),t.onprogress=this.loadprogress.bind(this),t.responseType=e.responseType,this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),this.config.timeout),t.send()},t.prototype.readystatechange=function(t){var e=t.currentTarget,r=e.readyState,i=this.stats,n=this.context,a=this.config;if(!i.aborted&&r>=2)if(window.clearTimeout(this.requestTimeout),0===i.tfirst&&(i.tfirst=Math.max(Mt.now(),i.trequest)),4===r){var o=e.status;if(o>=200&&o<300){i.tload=Math.max(i.tfirst,Mt.now());var s=void 0,l=void 0;l="arraybuffer"===n.responseType?(s=e.response).byteLength:(s=e.responseText).length,i.loaded=i.total=l;var d={url:e.responseURL,data:s};this.callbacks.onSuccess(d,i,n,e)}else i.retry>=a.maxRetry||o>=400&&o<499?(u.b.error(o+" while loading "+n.url),this.callbacks.onError({code:o,text:e.statusText},n,e)):(u.b.warn(o+" while loading "+n.url+", retrying in "+this.retryDelay+"..."),this.destroy(),this.retryTimeout=window.setTimeout(this.loadInternal.bind(this),this.retryDelay),this.retryDelay=Math.min(2*this.retryDelay,a.maxRetryDelay),i.retry++)}else this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),a.timeout)},t.prototype.loadtimeout=function(){u.b.warn("timeout while loading "+this.context.url),this.callbacks.onTimeout(this.stats,this.context,null)},t.prototype.loadprogress=function(t){var e=t.currentTarget,r=this.stats;r.loaded=t.loaded,t.lengthComputable&&(r.total=t.total);var i=this.callbacks.onProgress;i&&i(r,this.context,null,e)},t}(),Bt=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var Gt=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MANIFEST_LOADING,l.a.MANIFEST_PARSED,l.a.AUDIO_TRACK_LOADED,l.a.AUDIO_TRACK_SWITCHED,l.a.LEVEL_LOADED,l.a.ERROR));return i._trackId=-1,i._selectDefaultTrack=!0,i.tracks=[],i.trackIdBlacklist=Object.create(null),i.audioGroupId=null,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.onManifestLoading=function(){this.tracks=[],this._trackId=-1,this._selectDefaultTrack=!0},e.prototype.onManifestParsed=function(t){var e=this.tracks=t.audioTracks||[];this.hls.trigger(l.a.AUDIO_TRACKS_UPDATED,{audioTracks:e})},e.prototype.onAudioTrackLoaded=function(t){if(t.id>=this.tracks.length)u.b.warn("Invalid audio track id:",t.id);else{if(u.b.log("audioTrack "+t.id+" loaded"),this.tracks[t.id].details=t.details,t.details.live&&!this.hasInterval()){var e=1e3*t.details.targetduration;this.setInterval(e)}!t.details.live&&this.hasInterval()&&this.clearInterval()}},e.prototype.onAudioTrackSwitched=function(t){var e=this.tracks[t.id].groupId;e&&this.audioGroupId!==e&&(this.audioGroupId=e)},e.prototype.onLevelLoaded=function(t){var e=this.hls.levels[t.level];if(e.audioGroupIds){var r=e.audioGroupIds[e.urlId];this.audioGroupId!==r&&(this.audioGroupId=r,this._selectInitialAudioTrack())}},e.prototype.onError=function(t){t.type===o.b.NETWORK_ERROR&&(t.fatal&&this.clearInterval(),t.details===o.a.AUDIO_TRACK_LOAD_ERROR&&(u.b.warn("Network failure on audio-track id:",t.context.id),this._handleLoadError()))},e.prototype._setAudioTrack=function(t){if(this._trackId===t&&this.tracks[this._trackId].details)u.b.debug("Same id as current audio-track passed, and track details available -> no-op");else if(t<0||t>=this.tracks.length)u.b.warn("Invalid id passed to audio-track controller");else{var e=this.tracks[t];u.b.log("Now switching to audio-track index "+t),this.clearInterval(),this._trackId=t;var r=e.url,i=e.type,n=e.id;this.hls.trigger(l.a.AUDIO_TRACK_SWITCHING,{id:n,type:i,url:r}),this._loadTrackDetailsIfNeeded(e)}},e.prototype.doTick=function(){this._updateTrack(this._trackId)},e.prototype._selectInitialAudioTrack=function(){var t=this,e=this.tracks;if(e.length){var r=this.tracks[this._trackId],i=null;if(r&&(i=r.name),this._selectDefaultTrack){var n=e.filter(function(t){return t.default});n.length?e=n:u.b.warn("No default audio tracks defined")}var a=!1,s=function(){e.forEach(function(e){a||t.audioGroupId&&e.groupId!==t.audioGroupId||i&&i!==e.name||(t._setAudioTrack(e.id),a=!0)})};s(),a||(i=null,s()),a||(u.b.error("No track found for running audio group-ID: "+this.audioGroupId),this.hls.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:o.a.AUDIO_TRACK_LOAD_ERROR,fatal:!0}))}},e.prototype._needsTrackLoading=function(t){var e=t.details;return!e||(!!e.live||void 0)},e.prototype._loadTrackDetailsIfNeeded=function(t){if(this._needsTrackLoading(t)){var e=t.url,r=t.id;u.b.log("loading audio-track playlist for id: "+r),this.hls.trigger(l.a.AUDIO_TRACK_LOADING,{url:e,id:r})}},e.prototype._updateTrack=function(t){if(!(t<0||t>=this.tracks.length)){this.clearInterval(),this._trackId=t,u.b.log("trying to update audio-track "+t);var e=this.tracks[t];this._loadTrackDetailsIfNeeded(e)}},e.prototype._handleLoadError=function(){this.trackIdBlacklist[this._trackId]=!0;var t=this._trackId,e=this.tracks[t],r=e.name,i=e.language,n=e.groupId;u.b.warn("Loading failed on audio track id: "+t+", group-id: "+n+', name/language: "'+r+'" / "'+i+'"');for(var a=t,o=0;o<this.tracks.length;o++){if(!this.trackIdBlacklist[o])if(this.tracks[o].name===r){a=o;break}}a!==t?(u.b.log("Attempting audio-track fallback id:",a,"group-id:",this.tracks[a].groupId),this._setAudioTrack(a)):u.b.warn('No fallback audio-track found for name/language: "'+r+'" / "'+i+'"')},Bt(e,[{key:"audioTracks",get:function(){return this.tracks}},{key:"audioTrack",get:function(){return this._trackId},set:function(t){this._setAudioTrack(t),this._selectDefaultTrack=!1}}]),e}(ut),jt=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var Kt=window.performance,Ht={STOPPED:"STOPPED",STARTING:"STARTING",IDLE:"IDLE",PAUSED:"PAUSED",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING",FRAG_LOADING_WAITING_RETRY:"FRAG_LOADING_WAITING_RETRY",WAITING_TRACK:"WAITING_TRACK",PARSING:"PARSING",PARSED:"PARSED",BUFFER_FLUSHING:"BUFFER_FLUSHING",ENDED:"ENDED",ERROR:"ERROR",WAITING_INIT_PTS:"WAITING_INIT_PTS"},Vt=function(t){function e(r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHED,l.a.MEDIA_DETACHING,l.a.AUDIO_TRACKS_UPDATED,l.a.AUDIO_TRACK_SWITCHING,l.a.AUDIO_TRACK_LOADED,l.a.KEY_LOADED,l.a.FRAG_LOADED,l.a.FRAG_PARSING_INIT_SEGMENT,l.a.FRAG_PARSING_DATA,l.a.FRAG_PARSED,l.a.ERROR,l.a.BUFFER_RESET,l.a.BUFFER_CREATED,l.a.BUFFER_APPENDED,l.a.BUFFER_FLUSHED,l.a.INIT_PTS_FOUND));return n.fragmentTracker=i,n.config=r.config,n.audioCodecSwap=!1,n._state=Ht.STOPPED,n.initPTS=[],n.waitingFragment=null,n.videoTrackCC=null,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.onHandlerDestroying=function(){this.stopLoad(),t.prototype.onHandlerDestroying.call(this)},e.prototype.onHandlerDestroyed=function(){this.state=Ht.STOPPED,this.fragmentTracker=null,t.prototype.onHandlerDestroyed.call(this)},e.prototype.onInitPtsFound=function(t){var e=t.id,r=t.frag.cc,i=t.initPTS;"main"===e&&(this.initPTS[r]=i,this.videoTrackCC=r,u.b.log("InitPTS for cc: "+r+" found from video track: "+i),this.state===Ht.WAITING_INIT_PTS&&this.tick())},e.prototype.startLoad=function(t){if(this.tracks){var e=this.lastCurrentTime;this.stopLoad(),this.setInterval(100),this.fragLoadError=0,e>0&&-1===t?(u.b.log("audio:override startPosition with lastCurrentTime @"+e.toFixed(3)),this.state=Ht.IDLE):(this.lastCurrentTime=this.startPosition?this.startPosition:t,this.state=Ht.STARTING),this.nextLoadPosition=this.startPosition=this.lastCurrentTime,this.tick()}else this.startPosition=t,this.state=Ht.STOPPED},e.prototype.stopLoad=function(){var t=this.fragCurrent;t&&(t.loader&&t.loader.abort(),this.fragmentTracker.removeFragment(t),this.fragCurrent=null),this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=Ht.STOPPED},e.prototype.doTick=function(){var t=void 0,e=void 0,r=void 0,i=this.hls,n=i.config;switch(this.state){case Ht.ERROR:case Ht.PAUSED:case Ht.BUFFER_FLUSHING:break;case Ht.STARTING:this.state=Ht.WAITING_TRACK,this.loadedmetadata=!1;break;case Ht.IDLE:var a=this.tracks;if(!a)break;if(!this.media&&(this.startFragRequested||!n.startFragPrefetch))break;if(this.loadedmetadata)t=this.media.currentTime;else if(void 0===(t=this.nextLoadPosition))break;var o=this.mediaBuffer?this.mediaBuffer:this.media,d=this.videoBuffer?this.videoBuffer:this.media,c=Y.bufferInfo(o,t,n.maxBufferHole),h=Y.bufferInfo(d,t,n.maxBufferHole),f=c.len,p=c.end,g=this.fragPrevious,v=Math.min(n.maxBufferLength,n.maxMaxBufferLength),m=Math.max(v,h.len),y=this.audioSwitch,b=this.trackId;if((f<m||y)&&b<a.length){if(void 0===(r=a[b].details)){this.state=Ht.WAITING_TRACK;break}if(!y&&!r.live&&g&&g.sn===r.endSN&&!c.nextStart&&(!this.media.seeking||this.media.duration-p<g.duration/2)){this.hls.trigger(l.a.BUFFER_EOS,{type:"audio"}),this.state=Ht.ENDED;break}var E=r.fragments,T=E.length,S=E[0].start,_=E[T-1].start+E[T-1].duration,A=void 0;if(y)if(r.live&&!r.PTSKnown)u.b.log("switching audiotrack, live stream, unknown PTS,load first fragment"),p=0;else if(p=t,r.PTSKnown&&t<S){if(!(c.end>S||c.nextStart))return;u.b.log("alt audio track ahead of main track, seek to start of alt audio track"),this.media.currentTime=S+.05}if(r.initSegment&&!r.initSegment.data)A=r.initSegment;else if(p<=S){if(A=E[0],null!==this.videoTrackCC&&A.cc!==this.videoTrackCC&&(A=function(t,e){return V.search(t,function(t){return t.cc<e?1:t.cc>e?-1:0})}(E,this.videoTrackCC)),r.live&&A.loadIdx&&A.loadIdx===this.fragLoadIdx){var R=c.nextStart?c.nextStart:S;return u.b.log("no alt audio available @currentTime:"+this.media.currentTime+", seeking @"+(R+.05)),void(this.media.currentTime=R+.05)}}else{var w=void 0,L=n.maxFragLookUpTolerance,D=g?E[g.sn-E[0].sn+1]:void 0,k=function(t){var e=Math.min(L,t.duration);return t.start+t.duration-e<=p?1:t.start-e>p&&t.start?-1:0};p<_?(p>_-L&&(L=0),w=D&&!k(D)?D:V.search(E,k)):w=E[T-1],w&&(A=w,S=w.start,g&&A.level===g.level&&A.sn===g.sn&&(A.sn<r.endSN?(A=E[A.sn+1-r.startSN],u.b.log("SN just loaded, load next one: "+A.sn)):A=null))}A&&(A.encrypted?(u.b.log("Loading key for "+A.sn+" of ["+r.startSN+" ,"+r.endSN+"],track "+b),this.state=Ht.KEY_LOADING,i.trigger(l.a.KEY_LOADING,{frag:A})):(u.b.log("Loading "+A.sn+", cc: "+A.cc+" of ["+r.startSN+" ,"+r.endSN+"],track "+b+", currentTime:"+t+",bufferEnd:"+p.toFixed(3)),(y||this.fragmentTracker.getState(A)===B)&&(this.fragCurrent=A,this.startFragRequested=!0,Object(s.a)(A.sn)&&(this.nextLoadPosition=A.start+A.duration),i.trigger(l.a.FRAG_LOADING,{frag:A}),this.state=Ht.FRAG_LOADING)))}break;case Ht.WAITING_TRACK:(e=this.tracks[this.trackId])&&e.details&&(this.state=Ht.IDLE);break;case Ht.FRAG_LOADING_WAITING_RETRY:var I=Kt.now(),O=this.retryDate,C=(o=this.media)&&o.seeking;(!O||I>=O||C)&&(u.b.log("audioStreamController: retryDate reached, switch back to IDLE state"),this.state=Ht.IDLE);break;case Ht.WAITING_INIT_PTS:var x=this.videoTrackCC;if(void 0===this.initPTS[x])break;var P=this.waitingFragment;if(P){var F=P.frag.cc;x!==F?(e=this.tracks[this.trackId]).details&&e.details.live&&(u.b.warn("Waiting fragment CC ("+F+") does not match video track CC ("+x+")"),this.waitingFragment=null,this.state=Ht.IDLE):(this.state=Ht.FRAG_LOADING,this.onFragLoaded(this.waitingFragment),this.waitingFragment=null)}else this.state=Ht.IDLE;break;case Ht.STOPPED:case Ht.FRAG_LOADING:case Ht.PARSING:case Ht.PARSED:case Ht.ENDED:}},e.prototype.onMediaAttached=function(t){var e=this.media=this.mediaBuffer=t.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvended=this.onMediaEnded.bind(this),e.addEventListener("seeking",this.onvseeking),e.addEventListener("ended",this.onvended);var r=this.config;this.tracks&&r.autoStartLoad&&this.startLoad(r.startPosition)},e.prototype.onMediaDetaching=function(){var t=this.media;t&&t.ended&&(u.b.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0),t&&(t.removeEventListener("seeking",this.onvseeking),t.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1,this.stopLoad()},e.prototype.onMediaSeeking=function(){this.state===Ht.ENDED&&(this.state=Ht.IDLE),this.media&&(this.lastCurrentTime=this.media.currentTime),this.tick()},e.prototype.onMediaEnded=function(){this.startPosition=this.lastCurrentTime=0},e.prototype.onAudioTracksUpdated=function(t){u.b.log("audio tracks updated"),this.tracks=t.audioTracks},e.prototype.onAudioTrackSwitching=function(t){var e=!!t.url;this.trackId=t.id,this.fragCurrent=null,this.state=Ht.PAUSED,this.waitingFragment=null,e?this.setInterval(100):this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),e&&(this.audioSwitch=!0,this.state=Ht.IDLE),this.tick()},e.prototype.onAudioTrackLoaded=function(t){var e=t.details,r=t.id,i=this.tracks[r],n=e.totalduration,a=0;if(u.b.log("track "+r+" loaded ["+e.startSN+","+e.endSN+"],duration:"+n),e.live){var o=i.details;o&&e.fragments.length>0?(at(o,e),a=e.fragments[0].start,e.PTSKnown?u.b.log("live audio playlist sliding:"+a.toFixed(3)):u.b.log("live audio playlist - outdated PTS, unknown sliding")):(e.PTSKnown=!1,u.b.log("live audio playlist - first load, unknown sliding"))}else e.PTSKnown=!1;if(i.details=e,!this.startFragRequested){if(-1===this.startPosition){var l=e.startTimeOffset;Object(s.a)(l)?(u.b.log("start time offset found in playlist, adjust startPosition to "+l),this.startPosition=l):this.startPosition=0}this.nextLoadPosition=this.startPosition}this.state===Ht.WAITING_TRACK&&(this.state=Ht.IDLE),this.tick()},e.prototype.onKeyLoaded=function(){this.state===Ht.KEY_LOADING&&(this.state=Ht.IDLE,this.tick())},e.prototype.onFragLoaded=function(t){var e=this.fragCurrent,r=t.frag;if(this.state===Ht.FRAG_LOADING&&e&&"audio"===r.type&&r.level===e.level&&r.sn===e.sn){var i=this.tracks[this.trackId],n=i.details,a=n.totalduration,o=e.level,s=e.sn,d=e.cc,c=this.config.defaultAudioCodec||i.audioCodec||"mp4a.40.2",h=this.stats=t.stats;if("initSegment"===s)this.state=Ht.IDLE,h.tparsed=h.tbuffered=Kt.now(),n.initSegment.data=t.payload,this.hls.trigger(l.a.FRAG_BUFFERED,{stats:h,frag:e,id:"audio"}),this.tick();else{this.state=Ht.PARSING,this.appended=!1,this.demuxer||(this.demuxer=new et(this.hls,"audio"));var f=this.initPTS[d],p=n.initSegment?n.initSegment.data:[];if(n.initSegment||void 0!==f){this.pendingBuffering=!0,u.b.log("Demuxing "+s+" of ["+n.startSN+" ,"+n.endSN+"],track "+o);this.demuxer.push(t.payload,p,c,null,e,a,!1,f)}else u.b.log("unknown video PTS for continuity counter "+d+", waiting for video PTS before demuxing audio frag "+s+" of ["+n.startSN+" ,"+n.endSN+"],track "+o),this.waitingFragment=t,this.state=Ht.WAITING_INIT_PTS}}this.fragLoadError=0},e.prototype.onFragParsingInitSegment=function(t){var e=this.fragCurrent,r=t.frag;if(e&&"audio"===t.id&&r.sn===e.sn&&r.level===e.level&&this.state===Ht.PARSING){var i=t.tracks,n=void 0;if(i.video&&delete i.video,n=i.audio){n.levelCodec=n.codec,n.id=t.id,this.hls.trigger(l.a.BUFFER_CODECS,i),u.b.log("audio track:audio,container:"+n.container+",codecs[level/parsed]=["+n.levelCodec+"/"+n.codec+"]");var a=n.initSegment;if(a){var o={type:"audio",data:a,parent:"audio",content:"initSegment"};this.audioSwitch?this.pendingData=[o]:(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(l.a.BUFFER_APPENDING,o))}this.tick()}}},e.prototype.onFragParsingData=function(t){var e=this,r=this.fragCurrent,i=t.frag;if(r&&"audio"===t.id&&"audio"===t.type&&i.sn===r.sn&&i.level===r.level&&this.state===Ht.PARSING){var n=this.trackId,a=this.tracks[n],d=this.hls;Object(s.a)(t.endPTS)||(t.endPTS=t.startPTS+r.duration,t.endDTS=t.startDTS+r.duration),r.addElementaryStream(m.ElementaryStreamTypes.AUDIO),u.b.log("parsed "+t.type+",PTS:["+t.startPTS.toFixed(3)+","+t.endPTS.toFixed(3)+"],DTS:["+t.startDTS.toFixed(3)+"/"+t.endDTS.toFixed(3)+"],nb:"+t.nb),nt(a.details,r,t.startPTS,t.endPTS);var c=this.audioSwitch,h=this.media,f=!1;if(c&&h)if(h.readyState){var p=h.currentTime;u.b.log("switching audio track : currentTime:"+p),p>=t.startPTS&&(u.b.log("switching audio track : flushing all audio"),this.state=Ht.BUFFER_FLUSHING,d.trigger(l.a.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"}),f=!0,this.audioSwitch=!1,d.trigger(l.a.AUDIO_TRACK_SWITCHED,{id:n}))}else this.audioSwitch=!1,d.trigger(l.a.AUDIO_TRACK_SWITCHED,{id:n});var g=this.pendingData;if(!g)return u.b.warn("Apparently attempt to enqueue media payload without codec initialization data upfront"),void d.trigger(l.a.ERROR,{type:o.b.MEDIA_ERROR,details:null,fatal:!0});this.audioSwitch||([t.data1,t.data2].forEach(function(e){e&&e.length&&g.push({type:t.type,data:e,parent:"audio",content:"data"})}),!f&&g.length&&(g.forEach(function(t){e.state===Ht.PARSING&&(e.pendingBuffering=!0,e.hls.trigger(l.a.BUFFER_APPENDING,t))}),this.pendingData=[],this.appended=!0)),this.tick()}},e.prototype.onFragParsed=function(t){var e=this.fragCurrent,r=t.frag;e&&"audio"===t.id&&r.sn===e.sn&&r.level===e.level&&this.state===Ht.PARSING&&(this.stats.tparsed=Kt.now(),this.state=Ht.PARSED,this._checkAppendedParsed())},e.prototype.onBufferReset=function(){this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1},e.prototype.onBufferCreated=function(t){var e=t.tracks.audio;e&&(this.mediaBuffer=e.buffer,this.loadedmetadata=!0),t.tracks.video&&(this.videoBuffer=t.tracks.video.buffer)},e.prototype.onBufferAppended=function(t){if("audio"===t.parent){var e=this.state;e!==Ht.PARSING&&e!==Ht.PARSED||(this.pendingBuffering=t.pending>0,this._checkAppendedParsed())}},e.prototype._checkAppendedParsed=function(){if(!(this.state!==Ht.PARSED||this.appended&&this.pendingBuffering)){var t=this.fragCurrent,e=this.stats,r=this.hls;if(t){this.fragPrevious=t,e.tbuffered=Kt.now(),r.trigger(l.a.FRAG_BUFFERED,{stats:e,frag:t,id:"audio"});var i=this.mediaBuffer?this.mediaBuffer:this.media;u.b.log("audio buffered : "+ot.toString(i.buffered)),this.audioSwitch&&this.appended&&(this.audioSwitch=!1,r.trigger(l.a.AUDIO_TRACK_SWITCHED,{id:this.trackId})),this.state=Ht.IDLE}this.tick()}},e.prototype.onError=function(t){var e=t.frag;if(!e||"audio"===e.type)switch(t.details){case o.a.FRAG_LOAD_ERROR:case o.a.FRAG_LOAD_TIMEOUT:var r=t.frag;if(r&&"audio"!==r.type)break;if(!t.fatal){var i=this.fragLoadError;i?i++:i=1;var n=this.config;if(i<=n.fragLoadingMaxRetry){this.fragLoadError=i;var a=Math.min(Math.pow(2,i-1)*n.fragLoadingRetryDelay,n.fragLoadingMaxRetryTimeout);u.b.warn("AudioStreamController: frag loading failed, retry in "+a+" ms"),this.retryDate=Kt.now()+a,this.state=Ht.FRAG_LOADING_WAITING_RETRY}else u.b.error("AudioStreamController: "+t.details+" reaches max retry, redispatch as fatal ..."),t.fatal=!0,this.state=Ht.ERROR}break;case o.a.AUDIO_TRACK_LOAD_ERROR:case o.a.AUDIO_TRACK_LOAD_TIMEOUT:case o.a.KEY_LOAD_ERROR:case o.a.KEY_LOAD_TIMEOUT:this.state!==Ht.ERROR&&(this.state=t.fatal?Ht.ERROR:Ht.IDLE,u.b.warn("AudioStreamController: "+t.details+" while loading frag, now switching to "+this.state+" state ..."));break;case o.a.BUFFER_FULL_ERROR:if("audio"===t.parent&&(this.state===Ht.PARSING||this.state===Ht.PARSED)){var s=this.mediaBuffer,d=this.media.currentTime;if(s&&Y.isBuffered(s,d)&&Y.isBuffered(s,d+.5)){var c=this.config;c.maxMaxBufferLength>=c.maxBufferLength&&(c.maxMaxBufferLength/=2,u.b.warn("AudioStreamController: reduce max buffer length to "+c.maxMaxBufferLength+"s")),this.state=Ht.IDLE}else u.b.warn("AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer"),this.fragCurrent=null,this.state=Ht.BUFFER_FLUSHING,this.hls.trigger(l.a.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"})}}},e.prototype.onBufferFlushed=function(){var t=this,e=this.pendingData;e&&e.length?(u.b.log("AudioStreamController: appending pending audio data after buffer flushed"),e.forEach(function(e){t.hls.trigger(l.a.BUFFER_APPENDING,e)}),this.appended=!0,this.pendingData=[],this.state=Ht.PARSED):(this.state=Ht.IDLE,this.fragPrevious=null,this.tick())},jt(e,[{key:"state",set:function(t){if(this.state!==t){var e=this.state;this._state=t,u.b.log("audio stream:"+e+"->"+t)}},get:function(){return this._state}}]),e}(ut),Yt=function(){if("undefined"!=typeof window&&window.VTTCue)return window.VTTCue;var t="auto",e={"":!0,lr:!0,rl:!0},r={start:!0,middle:!0,end:!0,left:!0,right:!0};function i(t){return"string"==typeof t&&(!!r[t.toLowerCase()]&&t.toLowerCase())}function n(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var i in r)t[i]=r[i]}return t}function a(r,a,o){var s=this,l=function(){if("undefined"!=typeof navigator)return/MSIE\s8\.0/.test(navigator.userAgent)}(),u={};l?s=document.createElement("custom"):u.enumerable=!0,s.hasBeenReset=!1;var d="",c=!1,h=r,f=a,p=o,g=null,v="",m=!0,y="auto",b="start",E=50,T="middle",S=50,_="middle";if(Object.defineProperty(s,"id",n({},u,{get:function(){return d},set:function(t){d=""+t}})),Object.defineProperty(s,"pauseOnExit",n({},u,{get:function(){return c},set:function(t){c=!!t}})),Object.defineProperty(s,"startTime",n({},u,{get:function(){return h},set:function(t){if("number"!=typeof t)throw new TypeError("Start time must be set to a number.");h=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"endTime",n({},u,{get:function(){return f},set:function(t){if("number"!=typeof t)throw new TypeError("End time must be set to a number.");f=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"text",n({},u,{get:function(){return p},set:function(t){p=""+t,this.hasBeenReset=!0}})),Object.defineProperty(s,"region",n({},u,{get:function(){return g},set:function(t){g=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"vertical",n({},u,{get:function(){return v},set:function(t){var r=function(t){return"string"==typeof t&&!!e[t.toLowerCase()]&&t.toLowerCase()}(t);if(!1===r)throw new SyntaxError("An invalid or illegal string was specified.");v=r,this.hasBeenReset=!0}})),Object.defineProperty(s,"snapToLines",n({},u,{get:function(){return m},set:function(t){m=!!t,this.hasBeenReset=!0}})),Object.defineProperty(s,"line",n({},u,{get:function(){return y},set:function(e){if("number"!=typeof e&&e!==t)throw new SyntaxError("An invalid number or illegal string was specified.");y=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"lineAlign",n({},u,{get:function(){return b},set:function(t){var e=i(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");b=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"position",n({},u,{get:function(){return E},set:function(t){if(t<0||t>100)throw new Error("Position must be between 0 and 100.");E=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"positionAlign",n({},u,{get:function(){return T},set:function(t){var e=i(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");T=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"size",n({},u,{get:function(){return S},set:function(t){if(t<0||t>100)throw new Error("Size must be between 0 and 100.");S=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"align",n({},u,{get:function(){return _},set:function(t){var e=i(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");_=e,this.hasBeenReset=!0}})),s.displayState=void 0,l)return s}return a.prototype.getCueAsHTML=function(){return window.WebVTT.convertCueToDOMTree(window,this.text)},a}(),Wt=function(){return{decode:function(t){if(!t)return"";if("string"!=typeof t)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(t))}}};function qt(){this.window=window,this.state="INITIAL",this.buffer="",this.decoder=new Wt,this.regionList=[]}function zt(){this.values=Object.create(null)}function Xt(t,e,r,i){var n=i?t.split(i):[t];for(var a in n)if("string"==typeof n[a]){var o=n[a].split(r);if(2===o.length)e(o[0],o[1])}}zt.prototype={set:function(t,e){this.get(t)||""===e||(this.values[t]=e)},get:function(t,e,r){return r?this.has(t)?this.values[t]:e[r]:this.has(t)?this.values[t]:e},has:function(t){return t in this.values},alt:function(t,e,r){for(var i=0;i<r.length;++i)if(e===r[i]){this.set(t,e);break}},integer:function(t,e){/^-?\d+$/.test(e)&&this.set(t,parseInt(e,10))},percent:function(t,e){return!!(e.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(e=parseFloat(e))>=0&&e<=100)&&(this.set(t,e),!0)}};var Qt=new Yt(0,0,0),$t="middle"===Qt.align?"middle":"center";function Jt(t,e,r){var i=t;function n(){var e=function(t){function e(t,e,r,i){return 3600*(0|t)+60*(0|e)+(0|r)+(0|i)/1e3}var r=t.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return r?r[3]?e(r[1],r[2],r[3].replace(":",""),r[4]):r[1]>59?e(r[1],r[2],0,r[4]):e(0,r[1],r[2],r[4]):null}(t);if(null===e)throw new Error("Malformed timestamp: "+i);return t=t.replace(/^[^\sa-zA-Z-]+/,""),e}function a(){t=t.replace(/^\s+/,"")}if(a(),e.startTime=n(),a(),"--\x3e"!==t.substr(0,3))throw new Error("Malformed time stamp (time stamps must be separated by '--\x3e'): "+i);t=t.substr(3),a(),e.endTime=n(),a(),function(t,e){var i=new zt;Xt(t,function(t,e){switch(t){case"region":for(var n=r.length-1;n>=0;n--)if(r[n].id===e){i.set(t,r[n].region);break}break;case"vertical":i.alt(t,e,["rl","lr"]);break;case"line":var a=e.split(","),o=a[0];i.integer(t,o),i.percent(t,o)&&i.set("snapToLines",!1),i.alt(t,o,["auto"]),2===a.length&&i.alt("lineAlign",a[1],["start",$t,"end"]);break;case"position":a=e.split(","),i.percent(t,a[0]),2===a.length&&i.alt("positionAlign",a[1],["start",$t,"end","line-left","line-right","auto"]);break;case"size":i.percent(t,e);break;case"align":i.alt(t,e,["start",$t,"end","left","right"])}},/:/,/\s/),e.region=i.get("region",null),e.vertical=i.get("vertical","");var n=i.get("line","auto");"auto"===n&&-1===Qt.line&&(n=-1),e.line=n,e.lineAlign=i.get("lineAlign","start"),e.snapToLines=i.get("snapToLines",!0),e.size=i.get("size",100),e.align=i.get("align",$t);var a=i.get("position","auto");"auto"===a&&50===Qt.position&&(a="start"===e.align||"left"===e.align?0:"end"===e.align||"right"===e.align?100:50),e.position=a}(t,e)}function Zt(t){return t.replace(/<br(?: \/)?>/gi,"\n")}qt.prototype={parse:function(t){var e=this;function r(){var t=e.buffer,r=0;for(t=Zt(t);r<t.length&&"\r"!==t[r]&&"\n"!==t[r];)++r;var i=t.substr(0,r);return"\r"===t[r]&&++r,"\n"===t[r]&&++r,e.buffer=t.substr(r),i}function i(t){Xt(t,function(t,e){t},/:/)}t&&(e.buffer+=e.decoder.decode(t,{stream:!0}));try{var n=void 0;if("INITIAL"===e.state){if(!/\r\n|\n/.test(e.buffer))return this;var a=(n=r()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);if(!a||!a[0])throw new Error("Malformed WebVTT signature.");e.state="HEADER"}for(var o=!1;e.buffer;){if(!/\r\n|\n/.test(e.buffer))return this;switch(o?o=!1:n=r(),e.state){case"HEADER":/:/.test(n)?i(n):n||(e.state="ID");continue;case"NOTE":n||(e.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(n)){e.state="NOTE";break}if(!n)continue;if(e.cue=new Yt(0,0,""),e.state="CUE",-1===n.indexOf("--\x3e")){e.cue.id=n;continue}case"CUE":try{Jt(n,e.cue,e.regionList)}catch(t){e.cue=null,e.state="BADCUE";continue}e.state="CUETEXT";continue;case"CUETEXT":var s=-1!==n.indexOf("--\x3e");if(!n||s&&(o=!0)){e.oncue&&e.oncue(e.cue),e.cue=null,e.state="ID";continue}e.cue.text&&(e.cue.text+="\n"),e.cue.text+=n;continue;case"BADCUE":n||(e.state="ID");continue}}}catch(t){"CUETEXT"===e.state&&e.cue&&e.oncue&&e.oncue(e.cue),e.cue=null,e.state="INITIAL"===e.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{if(this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new Error("Malformed WebVTT signature.")}catch(t){throw t}return this.onflush&&this.onflush(),this}};var te=qt;function ee(t,e,r,i){for(var n=void 0,a=void 0,o=void 0,s=void 0,l=void 0,u=window.VTTCue||window.TextTrackCue,d=0;d<i.rows.length;d++)if(o=!0,s=0,l="",!(n=i.rows[d]).isEmpty()){for(var c=0;c<n.chars.length;c++)n.chars[c].uchar.match(/\s/)&&o?s++:(l+=n.chars[c].uchar,o=!1);n.cueStartTime=e,e===r&&(r+=1e-4),a=new u(e,r,Zt(l.trim())),s>=16?s--:s++,navigator.userAgent.match(/Firefox\//)?a.line=d+1:a.line=d>7?d-2:d+1,a.align="left",a.position=Math.max(0,Math.min(100,s/32*100+(navigator.userAgent.match(/Firefox\//)?50:0))),t.addCue(a)}}function re(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var ie={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,128:174,129:176,130:189,131:191,132:8482,133:162,134:163,135:9834,136:224,137:32,138:232,139:226,140:234,141:238,142:244,143:251,144:193,145:201,146:211,147:218,148:220,149:252,150:8216,151:161,152:42,153:8217,154:9473,155:169,156:8480,157:8226,158:8220,159:8221,160:192,161:194,162:199,163:200,164:202,165:203,166:235,167:206,168:207,169:239,170:212,171:217,172:249,173:219,174:171,175:187,176:195,177:227,178:205,179:204,180:236,181:210,182:242,183:213,184:245,185:123,186:125,187:92,188:94,189:95,190:124,191:8764,192:196,193:228,194:214,195:246,196:223,197:165,198:164,199:9475,200:197,201:229,202:216,203:248,204:9487,205:9491,206:9495,207:9499},ne=function(t){var e=t;return ie.hasOwnProperty(t)&&(e=ie[t]),String.fromCharCode(e)},ae=15,oe=100,se={17:1,18:3,21:5,22:7,23:9,16:11,19:12,20:14},le={17:2,18:4,21:6,22:8,23:10,19:13,20:15},ue={25:1,26:3,29:5,30:7,31:9,24:11,27:12,28:14},de={25:2,26:4,29:6,30:8,31:10,27:13,28:15},ce=["white","green","blue","cyan","red","yellow","magenta","black","transparent"],he={verboseFilter:{DATA:3,DEBUG:3,INFO:2,WARNING:2,TEXT:1,ERROR:0},time:null,verboseLevel:0,setTime:function(t){this.time=t},log:function(t,e){this.verboseFilter[t];this.verboseLevel}},fe=function(t){for(var e=[],r=0;r<t.length;r++)e.push(t[r].toString(16));return e},pe=function(){function t(e,r,i,n,a){re(this,t),this.foreground=e||"white",this.underline=r||!1,this.italics=i||!1,this.background=n||"black",this.flash=a||!1}return t.prototype.reset=function(){this.foreground="white",this.underline=!1,this.italics=!1,this.background="black",this.flash=!1},t.prototype.setStyles=function(t){for(var e=["foreground","underline","italics","background","flash"],r=0;r<e.length;r++){var i=e[r];t.hasOwnProperty(i)&&(this[i]=t[i])}},t.prototype.isDefault=function(){return"white"===this.foreground&&!this.underline&&!this.italics&&"black"===this.background&&!this.flash},t.prototype.equals=function(t){return this.foreground===t.foreground&&this.underline===t.underline&&this.italics===t.italics&&this.background===t.background&&this.flash===t.flash},t.prototype.copy=function(t){this.foreground=t.foreground,this.underline=t.underline,this.italics=t.italics,this.background=t.background,this.flash=t.flash},t.prototype.toString=function(){return"color="+this.foreground+", underline="+this.underline+", italics="+this.italics+", background="+this.background+", flash="+this.flash},t}(),ge=function(){function t(e,r,i,n,a,o){re(this,t),this.uchar=e||" ",this.penState=new pe(r,i,n,a,o)}return t.prototype.reset=function(){this.uchar=" ",this.penState.reset()},t.prototype.setChar=function(t,e){this.uchar=t,this.penState.copy(e)},t.prototype.setPenState=function(t){this.penState.copy(t)},t.prototype.equals=function(t){return this.uchar===t.uchar&&this.penState.equals(t.penState)},t.prototype.copy=function(t){this.uchar=t.uchar,this.penState.copy(t.penState)},t.prototype.isEmpty=function(){return" "===this.uchar&&this.penState.isDefault()},t}(),ve=function(){function t(){re(this,t),this.chars=[];for(var e=0;e<oe;e++)this.chars.push(new ge);this.pos=0,this.currPenState=new pe}return t.prototype.equals=function(t){for(var e=!0,r=0;r<oe;r++)if(!this.chars[r].equals(t.chars[r])){e=!1;break}return e},t.prototype.copy=function(t){for(var e=0;e<oe;e++)this.chars[e].copy(t.chars[e])},t.prototype.isEmpty=function(){for(var t=!0,e=0;e<oe;e++)if(!this.chars[e].isEmpty()){t=!1;break}return t},t.prototype.setCursor=function(t){this.pos!==t&&(this.pos=t),this.pos<0?(he.log("ERROR","Negative cursor position "+this.pos),this.pos=0):this.pos>oe&&(he.log("ERROR","Too large cursor position "+this.pos),this.pos=oe)},t.prototype.moveCursor=function(t){var e=this.pos+t;if(t>1)for(var r=this.pos+1;r<e+1;r++)this.chars[r].setPenState(this.currPenState);this.setCursor(e)},t.prototype.backSpace=function(){this.moveCursor(-1),this.chars[this.pos].setChar(" ",this.currPenState)},t.prototype.insertChar=function(t){t>=144&&this.backSpace();var e=ne(t);this.pos>=oe?he.log("ERROR","Cannot insert "+t.toString(16)+" ("+e+") at position "+this.pos+". Skipping it!"):(this.chars[this.pos].setChar(e,this.currPenState),this.moveCursor(1))},t.prototype.clearFromPos=function(t){var e=void 0;for(e=t;e<oe;e++)this.chars[e].reset()},t.prototype.clear=function(){this.clearFromPos(0),this.pos=0,this.currPenState.reset()},t.prototype.clearToEndOfRow=function(){this.clearFromPos(this.pos)},t.prototype.getTextString=function(){for(var t=[],e=!0,r=0;r<oe;r++){var i=this.chars[r].uchar;" "!==i&&(e=!1),t.push(i)}return e?"":t.join("")},t.prototype.setPenStyles=function(t){this.currPenState.setStyles(t),this.chars[this.pos].setPenState(this.currPenState)},t}(),me=function(){function t(){re(this,t),this.rows=[];for(var e=0;e<ae;e++)this.rows.push(new ve);this.currRow=ae-1,this.nrRollUpRows=null,this.reset()}return t.prototype.reset=function(){for(var t=0;t<ae;t++)this.rows[t].clear();this.currRow=ae-1},t.prototype.equals=function(t){for(var e=!0,r=0;r<ae;r++)if(!this.rows[r].equals(t.rows[r])){e=!1;break}return e},t.prototype.copy=function(t){for(var e=0;e<ae;e++)this.rows[e].copy(t.rows[e])},t.prototype.isEmpty=function(){for(var t=!0,e=0;e<ae;e++)if(!this.rows[e].isEmpty()){t=!1;break}return t},t.prototype.backSpace=function(){this.rows[this.currRow].backSpace()},t.prototype.clearToEndOfRow=function(){this.rows[this.currRow].clearToEndOfRow()},t.prototype.insertChar=function(t){this.rows[this.currRow].insertChar(t)},t.prototype.setPen=function(t){this.rows[this.currRow].setPenStyles(t)},t.prototype.moveCursor=function(t){this.rows[this.currRow].moveCursor(t)},t.prototype.setCursor=function(t){he.log("INFO","setCursor: "+t),this.rows[this.currRow].setCursor(t)},t.prototype.setPAC=function(t){he.log("INFO","pacData = "+JSON.stringify(t));var e=t.row-1;if(this.nrRollUpRows&&e<this.nrRollUpRows-1&&(e=this.nrRollUpRows-1),this.nrRollUpRows&&this.currRow!==e){for(var r=0;r<ae;r++)this.rows[r].clear();var i=this.currRow+1-this.nrRollUpRows,n=this.lastOutputScreen;if(n){var a=n.rows[i].cueStartTime;if(a&&a<he.time)for(var o=0;o<this.nrRollUpRows;o++)this.rows[e-this.nrRollUpRows+o+1].copy(n.rows[i+o])}}this.currRow=e;var s=this.rows[this.currRow];if(null!==t.indent){var l=t.indent,u=Math.max(l-1,0);s.setCursor(t.indent),t.color=s.chars[u].penState.foreground}var d={foreground:t.color,underline:t.underline,italics:t.italics,background:"black",flash:!1};this.setPen(d)},t.prototype.setBkgData=function(t){he.log("INFO","bkgData = "+JSON.stringify(t)),this.backSpace(),this.setPen(t),this.insertChar(32)},t.prototype.setRollUpRows=function(t){this.nrRollUpRows=t},t.prototype.rollUp=function(){if(null!==this.nrRollUpRows){he.log("TEXT",this.getDisplayText());var t=this.currRow+1-this.nrRollUpRows,e=this.rows.splice(t,1)[0];e.clear(),this.rows.splice(this.currRow,0,e),he.log("INFO","Rolling up")}else he.log("DEBUG","roll_up but nrRollUpRows not set yet")},t.prototype.getDisplayText=function(t){t=t||!1;for(var e=[],r="",i=-1,n=0;n<ae;n++){var a=this.rows[n].getTextString();a&&(i=n+1,t?e.push("Row "+i+": '"+a+"'"):e.push(a.trim()))}return e.length>0&&(r=t?"["+e.join(" | ")+"]":e.join("\n")),r},t.prototype.getTextAndFormat=function(){return this.rows},t}(),ye=function(){function t(e,r){re(this,t),this.chNr=e,this.outputFilter=r,this.mode=null,this.verbose=0,this.displayedMemory=new me,this.nonDisplayedMemory=new me,this.lastOutputScreen=new me,this.currRollUpRow=this.displayedMemory.rows[ae-1],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null}return t.prototype.reset=function(){this.mode=null,this.displayedMemory.reset(),this.nonDisplayedMemory.reset(),this.lastOutputScreen.reset(),this.currRollUpRow=this.displayedMemory.rows[ae-1],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null,this.lastCueEndTime=null},t.prototype.getHandler=function(){return this.outputFilter},t.prototype.setHandler=function(t){this.outputFilter=t},t.prototype.setPAC=function(t){this.writeScreen.setPAC(t)},t.prototype.setBkgData=function(t){this.writeScreen.setBkgData(t)},t.prototype.setMode=function(t){t!==this.mode&&(this.mode=t,he.log("INFO","MODE="+t),"MODE_POP-ON"===this.mode?this.writeScreen=this.nonDisplayedMemory:(this.writeScreen=this.displayedMemory,this.writeScreen.reset()),"MODE_ROLL-UP"!==this.mode&&(this.displayedMemory.nrRollUpRows=null,this.nonDisplayedMemory.nrRollUpRows=null),this.mode=t)},t.prototype.insertChars=function(t){for(var e=0;e<t.length;e++)this.writeScreen.insertChar(t[e]);var r=this.writeScreen===this.displayedMemory?"DISP":"NON_DISP";he.log("INFO",r+": "+this.writeScreen.getDisplayText(!0)),"MODE_PAINT-ON"!==this.mode&&"MODE_ROLL-UP"!==this.mode||(he.log("TEXT","DISPLAYED: "+this.displayedMemory.getDisplayText(!0)),this.outputDataUpdate())},t.prototype.ccRCL=function(){he.log("INFO","RCL - Resume Caption Loading"),this.setMode("MODE_POP-ON")},t.prototype.ccBS=function(){he.log("INFO","BS - BackSpace"),"MODE_TEXT"!==this.mode&&(this.writeScreen.backSpace(),this.writeScreen===this.displayedMemory&&this.outputDataUpdate())},t.prototype.ccAOF=function(){},t.prototype.ccAON=function(){},t.prototype.ccDER=function(){he.log("INFO","DER- Delete to End of Row"),this.writeScreen.clearToEndOfRow(),this.outputDataUpdate()},t.prototype.ccRU=function(t){he.log("INFO","RU("+t+") - Roll Up"),this.writeScreen=this.displayedMemory,this.setMode("MODE_ROLL-UP"),this.writeScreen.setRollUpRows(t)},t.prototype.ccFON=function(){he.log("INFO","FON - Flash On"),this.writeScreen.setPen({flash:!0})},t.prototype.ccRDC=function(){he.log("INFO","RDC - Resume Direct Captioning"),this.setMode("MODE_PAINT-ON")},t.prototype.ccTR=function(){he.log("INFO","TR"),this.setMode("MODE_TEXT")},t.prototype.ccRTD=function(){he.log("INFO","RTD"),this.setMode("MODE_TEXT")},t.prototype.ccEDM=function(){he.log("INFO","EDM - Erase Displayed Memory"),this.displayedMemory.reset(),this.outputDataUpdate(!0)},t.prototype.ccCR=function(){he.log("CR - Carriage Return"),this.writeScreen.rollUp(),this.outputDataUpdate(!0)},t.prototype.ccENM=function(){he.log("INFO","ENM - Erase Non-displayed Memory"),this.nonDisplayedMemory.reset()},t.prototype.ccEOC=function(){if(he.log("INFO","EOC - End Of Caption"),"MODE_POP-ON"===this.mode){var t=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory,this.nonDisplayedMemory=t,this.writeScreen=this.nonDisplayedMemory,he.log("TEXT","DISP: "+this.displayedMemory.getDisplayText())}this.outputDataUpdate(!0)},t.prototype.ccTO=function(t){he.log("INFO","TO("+t+") - Tab Offset"),this.writeScreen.moveCursor(t)},t.prototype.ccMIDROW=function(t){var e={flash:!1};if(e.underline=t%2==1,e.italics=t>=46,e.italics)e.foreground="white";else{var r=Math.floor(t/2)-16;e.foreground=["white","green","blue","cyan","red","yellow","magenta"][r]}he.log("INFO","MIDROW: "+JSON.stringify(e)),this.writeScreen.setPen(e)},t.prototype.outputDataUpdate=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=he.time;null!==e&&this.outputFilter&&(null!==this.cueStartTime||this.displayedMemory.isEmpty()?this.displayedMemory.equals(this.lastOutputScreen)||(this.outputFilter.newCue&&(this.outputFilter.newCue(this.cueStartTime,e,this.lastOutputScreen),!0===t&&this.outputFilter.dispatchCue&&this.outputFilter.dispatchCue()),this.cueStartTime=this.displayedMemory.isEmpty()?null:e):this.cueStartTime=e,this.lastOutputScreen.copy(this.displayedMemory))},t.prototype.cueSplitAtTime=function(t){this.outputFilter&&(this.displayedMemory.isEmpty()||(this.outputFilter.newCue&&this.outputFilter.newCue(this.cueStartTime,t,this.displayedMemory),this.cueStartTime=t))},t}(),be=function(){function t(e,r,i){re(this,t),this.field=e||1,this.outputs=[r,i],this.channels=[new ye(1,r),new ye(2,i)],this.currChNr=-1,this.lastCmdA=null,this.lastCmdB=null,this.bufferedData=[],this.startTime=null,this.lastTime=null,this.dataCounters={padding:0,char:0,cmd:0,other:0}}return t.prototype.getHandler=function(t){return this.channels[t].getHandler()},t.prototype.setHandler=function(t,e){this.channels[t].setHandler(e)},t.prototype.addData=function(t,e){var r=void 0,i=void 0,n=void 0,a=!1;this.lastTime=t,he.setTime(t);for(var o=0;o<e.length;o+=2)if(i=127&e[o],n=127&e[o+1],0!==i||0!==n){if(he.log("DATA","["+fe([e[o],e[o+1]])+"] -> ("+fe([i,n])+")"),(r=this.parseCmd(i,n))||(r=this.parseMidrow(i,n)),r||(r=this.parsePAC(i,n)),r||(r=this.parseBackgroundAttributes(i,n)),!r)if(a=this.parseChars(i,n))if(this.currChNr&&this.currChNr>=0)this.channels[this.currChNr-1].insertChars(a);else he.log("WARNING","No channel found yet. TEXT-MODE?");r?this.dataCounters.cmd+=2:a?this.dataCounters.char+=2:(this.dataCounters.other+=2,he.log("WARNING","Couldn't parse cleaned data "+fe([i,n])+" orig: "+fe([e[o],e[o+1]])))}else this.dataCounters.padding+=2},t.prototype.parseCmd=function(t,e){var r=null;if(!((20===t||28===t)&&e>=32&&e<=47)&&!((23===t||31===t)&&e>=33&&e<=35))return!1;if(t===this.lastCmdA&&e===this.lastCmdB)return this.lastCmdA=null,this.lastCmdB=null,he.log("DEBUG","Repeated command ("+fe([t,e])+") is dropped"),!0;r=20===t||23===t?1:2;var i=this.channels[r-1];return 20===t||28===t?32===e?i.ccRCL():33===e?i.ccBS():34===e?i.ccAOF():35===e?i.ccAON():36===e?i.ccDER():37===e?i.ccRU(2):38===e?i.ccRU(3):39===e?i.ccRU(4):40===e?i.ccFON():41===e?i.ccRDC():42===e?i.ccTR():43===e?i.ccRTD():44===e?i.ccEDM():45===e?i.ccCR():46===e?i.ccENM():47===e&&i.ccEOC():i.ccTO(e-32),this.lastCmdA=t,this.lastCmdB=e,this.currChNr=r,!0},t.prototype.parseMidrow=function(t,e){var r=null;return(17===t||25===t)&&e>=32&&e<=47&&((r=17===t?1:2)!==this.currChNr?(he.log("ERROR","Mismatch channel in midrow parsing"),!1):(this.channels[r-1].ccMIDROW(e),he.log("DEBUG","MIDROW ("+fe([t,e])+")"),!0))},t.prototype.parsePAC=function(t,e){var r,i=null;if(!((t>=17&&t<=23||t>=25&&t<=31)&&e>=64&&e<=127)&&!((16===t||24===t)&&e>=64&&e<=95))return!1;if(t===this.lastCmdA&&e===this.lastCmdB)return this.lastCmdA=null,this.lastCmdB=null,!0;r=t<=23?1:2,i=e>=64&&e<=95?1===r?se[t]:ue[t]:1===r?le[t]:de[t];var n=this.interpretPAC(i,e);return this.channels[r-1].setPAC(n),this.lastCmdA=t,this.lastCmdB=e,this.currChNr=r,!0},t.prototype.interpretPAC=function(t,e){var r=e,i={color:null,italics:!1,indent:null,underline:!1,row:t};return r=e>95?e-96:e-64,i.underline=1==(1&r),r<=13?i.color=["white","green","blue","cyan","red","yellow","magenta","white"][Math.floor(r/2)]:r<=15?(i.italics=!0,i.color="white"):i.indent=4*Math.floor((r-16)/2),i},t.prototype.parseChars=function(t,e){var r=null,i=null,n=null;if(t>=25?(r=2,n=t-8):(r=1,n=t),n>=17&&n<=19){var a=e;a=17===n?e+80:18===n?e+112:e+144,he.log("INFO","Special char '"+ne(a)+"' in channel "+r),i=[a]}else t>=32&&t<=127&&(i=0===e?[t]:[t,e]);if(i){var o=fe(i);he.log("DEBUG","Char codes =  "+o.join(",")),this.lastCmdA=null,this.lastCmdB=null}return i},t.prototype.parseBackgroundAttributes=function(t,e){var r,i=void 0,n=void 0;return((16===t||24===t)&&e>=32&&e<=47||(23===t||31===t)&&e>=45&&e<=47)&&(i={},16===t||24===t?(n=Math.floor((e-32)/2),i.background=ce[n],e%2==1&&(i.background=i.background+"_semi")):45===e?i.background="transparent":(i.foreground="black",47===e&&(i.underline=!0)),r=t<24?1:2,this.channels[r-1].setBkgData(i),this.lastCmdA=null,this.lastCmdB=null,!0)},t.prototype.reset=function(){for(var t=0;t<this.channels.length;t++)this.channels[t]&&this.channels[t].reset();this.lastCmdA=null,this.lastCmdB=null},t.prototype.cueSplitAtTime=function(t){for(var e=0;e<this.channels.length;e++)this.channels[e]&&this.channels[e].cueSplitAtTime(t)},t}();var Ee=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.timelineController=e,this.trackName=r,this.startTime=null,this.endTime=null,this.screen=null}return t.prototype.dispatchCue=function(){null!==this.startTime&&(this.timelineController.addCues(this.trackName,this.startTime,this.endTime,this.screen),this.startTime=null)},t.prototype.newCue=function(t,e,r){(null===this.startTime||this.startTime>t)&&(this.startTime=t),this.endTime=e,this.screen=r,this.timelineController.createCaptionsTrack(this.trackName)},t}(),Te=function(t,e,r){return t.substr(r||0,e.length)===e},Se=function(t){for(var e=5381,r=t.length;r;)e=33*e^t.charCodeAt(--r);return(e>>>0).toString()},_e={parse:function(t,e,r,i,n,a){var o=Object(Et.b)(new Uint8Array(t)).trim().replace(/\r\n|\n\r|\n|\r/g,"\n").split("\n"),l="00:00.000",u=0,d=0,c=0,h=[],f=void 0,p=!0,g=new te;g.oncue=function(t){var e=r[i],n=r.ccOffset;e&&e.new&&(void 0!==d?n=r.ccOffset=e.start:function(t,e,r){var i=t[e],n=t[i.prevCC];if(!n||!n.new&&i.new)return t.ccOffset=t.presentationOffset=i.start,void(i.new=!1);for(;n&&n.new;)t.ccOffset+=i.start-n.start,i.new=!1,n=t[(i=n).prevCC];t.presentationOffset=r}(r,i,c)),c&&(n=c+r.ccOffset-r.presentationOffset),t.startTime+=n-d,t.endTime+=n-d,t.id=Se(t.startTime.toString())+Se(t.endTime.toString())+Se(t.text),t.text=decodeURIComponent(encodeURIComponent(t.text)),t.endTime>0&&h.push(t)},g.onparsingerror=function(t){f=t},g.onflush=function(){f&&a?a(f):n(h)},o.forEach(function(t){if(p){if(Te(t,"X-TIMESTAMP-MAP=")){p=!1,t.substr(16).split(",").forEach(function(t){Te(t,"LOCAL:")?l=t.substr(6):Te(t,"MPEGTS:")&&(u=parseInt(t.substr(7)))});try{u-=e=e<0?e+8589934592:e,d=function(t){var e=parseInt(t.substr(-3)),r=parseInt(t.substr(-6,2)),i=parseInt(t.substr(-9,2)),n=t.length>9?parseInt(t.substr(0,t.indexOf(":"))):0;return Object(s.a)(e)&&Object(s.a)(r)&&Object(s.a)(i)&&Object(s.a)(n)?(e+=1e3*r,e+=6e4*i,e+=36e5*n):-1}(l)/1e3,c=u/9e4,-1===d&&(f=new Error("Malformed X-TIMESTAMP-MAP: "+t))}catch(e){f=new Error("Malformed X-TIMESTAMP-MAP: "+t)}return}""===t&&(p=!1)}g.parse(t+"\n")}),g.flush()}};function Ae(t,e,r,i){return Math.min(e,i)-Math.max(t,r)}var Re=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHING,l.a.MEDIA_DETACHING,l.a.FRAG_PARSING_USERDATA,l.a.FRAG_DECRYPTED,l.a.MANIFEST_LOADING,l.a.MANIFEST_LOADED,l.a.FRAG_LOADED,l.a.LEVEL_SWITCHING,l.a.INIT_PTS_FOUND));if(i.hls=r,i.config=r.config,i.enabled=!0,i.Cues=r.config.cueHandler,i.textTracks=[],i.tracks=[],i.unparsedVttFrags=[],i.initPTS=void 0,i.cueRanges=[],i.captionsTracks={},i.captionsProperties={textTrack1:{label:i.config.captionsTextTrack1Label,languageCode:i.config.captionsTextTrack1LanguageCode},textTrack2:{label:i.config.captionsTextTrack2Label,languageCode:i.config.captionsTextTrack2LanguageCode}},i.config.enableCEA708Captions){var n=new Ee(i,"textTrack1"),a=new Ee(i,"textTrack2");i.cea608Parser=new be(0,n,a)}return i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.addCues=function(t,e,r,i){for(var n=this.cueRanges,a=!1,o=n.length;o--;){var s=n[o],l=Ae(s[0],s[1],e,r);if(l>=0&&(s[0]=Math.min(s[0],e),s[1]=Math.max(s[1],r),a=!0,l/(r-e)>.5))return}a||n.push([e,r]),this.Cues.newCue(this.captionsTracks[t],e,r,i)},e.prototype.onInitPtsFound=function(t){var e=this;void 0===this.initPTS&&(this.initPTS=t.initPTS),this.unparsedVttFrags.length&&(this.unparsedVttFrags.forEach(function(t){e.onFragLoaded(t)}),this.unparsedVttFrags=[])},e.prototype.getExistingTrack=function(t){var e=this.media;if(e)for(var r=0;r<e.textTracks.length;r++){var i=e.textTracks[r];if(i[t])return i}return null},e.prototype.createCaptionsTrack=function(t){var e=this.captionsProperties[t],r=e.label,i=e.languageCode,n=this.captionsTracks;if(!n[t]){var a=this.getExistingTrack(t);if(a)n[t]=a,St(n[t]),Tt(n[t],this.media);else{var o=this.createTextTrack("captions",r,i);o&&(o[t]=!0,n[t]=o)}}},e.prototype.createTextTrack=function(t,e,r){var i=this.media;if(i)return i.addTextTrack(t,e,r)},e.prototype.destroy=function(){h.prototype.destroy.call(this)},e.prototype.onMediaAttaching=function(t){this.media=t.media,this._cleanTracks()},e.prototype.onMediaDetaching=function(){var t=this.captionsTracks;Object.keys(t).forEach(function(e){St(t[e]),delete t[e]})},e.prototype.onManifestLoading=function(){this.lastSn=-1,this.prevCC=-1,this.vttCCs={ccOffset:0,presentationOffset:0},this._cleanTracks()},e.prototype._cleanTracks=function(){var t=this.media;if(t){var e=t.textTracks;if(e)for(var r=0;r<e.length;r++)St(e[r])}},e.prototype.onManifestLoaded=function(t){var e=this;if(this.textTracks=[],this.unparsedVttFrags=this.unparsedVttFrags||[],this.initPTS=void 0,this.cueRanges=[],this.config.enableWebVTT){this.tracks=t.subtitles||[];var r=this.media?this.media.textTracks:[];this.tracks.forEach(function(t,i){var n=void 0;if(i<r.length){var a=r[i];(function(t,e){return t&&t.label===e.name&&!(t.textTrack1||t.textTrack2)})(a,t)&&(n=a)}n||(n=e.createTextTrack("subtitles",t.name,t.lang)),t.default?n.mode=e.hls.subtitleDisplay?"showing":"hidden":n.mode="disabled",e.textTracks.push(n)})}},e.prototype.onLevelSwitching=function(){this.enabled="NONE"!==this.hls.currentLevel.closedCaptions},e.prototype.onFragLoaded=function(t){var e=t.frag,r=t.payload;if("main"===e.type){var i=e.sn;if(i!==this.lastSn+1){var n=this.cea608Parser;n&&n.reset()}this.lastSn=i}else if("subtitle"===e.type)if(r.byteLength){if(void 0===this.initPTS)return void this.unparsedVttFrags.push(t);var a=e.decryptdata;null!=a&&null!=a.key&&"AES-128"===a.method||this._parseVTTs(e,r)}else this.hls.trigger(l.a.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:e})},e.prototype._parseVTTs=function(t,e){var r=this.vttCCs;r[t.cc]||(r[t.cc]={start:t.start,prevCC:this.prevCC,new:!0},this.prevCC=t.cc);var i=this.textTracks,n=this.hls;_e.parse(e,this.initPTS,r,t.cc,function(e){var r=i[t.trackId];"disabled"!==r.mode?(e.forEach(function(t){if(!r.cues.getCueById(t.id))try{r.addCue(t)}catch(i){var e=new window.TextTrackCue(t.startTime,t.endTime,t.text);e.id=t.id,r.addCue(e)}}),n.trigger(l.a.SUBTITLE_FRAG_PROCESSED,{success:!0,frag:t})):n.trigger(l.a.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})},function(e){u.b.log("Failed to parse VTT cue: "+e),n.trigger(l.a.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})})},e.prototype.onFragDecrypted=function(t){var e=t.payload,r=t.frag;if("subtitle"===r.type){if(void 0===this.initPTS)return void this.unparsedVttFrags.push(t);this._parseVTTs(r,e)}},e.prototype.onFragParsingUserdata=function(t){if(this.enabled&&this.config.enableCEA708Captions)for(var e=0;e<t.samples.length;e++){var r=this.extractCea608Data(t.samples[e].bytes);this.cea608Parser.addData(t.samples[e].pts,r)}},e.prototype.extractCea608Data=function(t){for(var e=31&t[0],r=2,i=void 0,n=void 0,a=void 0,o=[],s=0;s<e;s++)i=t[r++],n=127&t[r++],a=127&t[r++],0===n&&0===a||0!=(4&i)&&0===(3&i)&&(o.push(n),o.push(a));return o},e}(h),we=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();function Le(t){for(var e=[],r=0;r<t.length;r++)"subtitles"===t[r].kind&&e.push(t[r]);return e}var De=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHED,l.a.MEDIA_DETACHING,l.a.MANIFEST_LOADING,l.a.MANIFEST_LOADED,l.a.SUBTITLE_TRACK_LOADED));return i.tracks=[],i.trackId=-1,i.media=null,i.subtitleDisplay=!0,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype._onTextTracksChanged=function(){if(this.media){for(var t=-1,e=Le(this.media.textTracks),r=0;r<e.length;r++)if("hidden"===e[r].mode)t=r;else if("showing"===e[r].mode){t=r;break}this.subtitleTrack=t}},e.prototype.destroy=function(){h.prototype.destroy.call(this)},e.prototype.onMediaAttached=function(t){var e=this;this.media=t.media,this.media&&(this.queuedDefaultTrack&&(this.subtitleTrack=this.queuedDefaultTrack,delete this.queuedDefaultTrack),this.trackChangeListener=this._onTextTracksChanged.bind(this),this.useTextTrackPolling=!(this.media.textTracks&&"onchange"in this.media.textTracks),this.useTextTrackPolling?this.subtitlePollingInterval=setInterval(function(){e.trackChangeListener()},500):this.media.textTracks.addEventListener("change",this.trackChangeListener))},e.prototype.onMediaDetaching=function(){this.media&&(this.useTextTrackPolling?clearInterval(this.subtitlePollingInterval):this.media.textTracks.removeEventListener("change",this.trackChangeListener),this.media=null)},e.prototype.onManifestLoading=function(){this.tracks=[],this.trackId=-1},e.prototype.onManifestLoaded=function(t){var e=this,r=t.subtitles||[];this.tracks=r,this.trackId=-1,this.hls.trigger(l.a.SUBTITLE_TRACKS_UPDATED,{subtitleTracks:r}),r.forEach(function(t){t.default&&(e.media?e.subtitleTrack=t.id:e.queuedDefaultTrack=t.id)})},e.prototype.onTick=function(){var t=this.trackId,e=this.tracks[t];if(e){var r=e.details;r&&!r.live||(u.b.log("(re)loading playlist for subtitle track "+t),this.hls.trigger(l.a.SUBTITLE_TRACK_LOADING,{url:e.url,id:t}))}},e.prototype.onSubtitleTrackLoaded=function(t){var e=this;t.id<this.tracks.length&&(u.b.log("subtitle track "+t.id+" loaded"),this.tracks[t.id].details=t.details,t.details.live&&!this.timer&&(this.timer=setInterval(function(){e.onTick()},1e3*t.details.targetduration,this)),!t.details.live&&this.timer&&this._stopTimer())},e.prototype.setSubtitleTrackInternal=function(t){var e=this.hls,r=this.tracks;if(!("number"!=typeof t||t<-1||t>=r.length)&&(this._stopTimer(),this.trackId=t,u.b.log("switching to subtitle track "+t),e.trigger(l.a.SUBTITLE_TRACK_SWITCH,{id:t}),-1!==t)){var i=r[t],n=i.details;n&&!n.live||(u.b.log("(re)loading playlist for subtitle track "+t),e.trigger(l.a.SUBTITLE_TRACK_LOADING,{url:i.url,id:t}))}},e.prototype._stopTimer=function(){this.timer&&(clearInterval(this.timer),this.timer=null)},e.prototype._toggleTrackModes=function(t){var e=this.media,r=this.subtitleDisplay,i=this.trackId;if(e){var n=Le(e.textTracks);if(-1===t)[].slice.call(n).forEach(function(t){t.mode="disabled"});else{var a=n[i];a&&(a.mode="disabled")}var o=n[t];o&&(o.mode=r?"showing":"hidden")}},we(e,[{key:"subtitleTracks",get:function(){return this.tracks}},{key:"subtitleTrack",get:function(){return this.trackId},set:function(t){this.trackId!==t&&(this._toggleTrackModes(t),this.setSubtitleTrackInternal(t))}}]),e}(h),ke=r(8);var Ie=window.performance,Oe={STOPPED:"STOPPED",IDLE:"IDLE",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING"},Ce=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHED,l.a.ERROR,l.a.KEY_LOADED,l.a.FRAG_LOADED,l.a.SUBTITLE_TRACKS_UPDATED,l.a.SUBTITLE_TRACK_SWITCH,l.a.SUBTITLE_TRACK_LOADED,l.a.SUBTITLE_FRAG_PROCESSED));return i.config=r.config,i.vttFragSNsProcessed={},i.vttFragQueues=void 0,i.currentlyProcessing=null,i.state=Oe.STOPPED,i.currentTrackId=-1,i.decrypter=new ke.a(r.observer,r.config),i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.onHandlerDestroyed=function(){this.state=Oe.STOPPED},e.prototype.clearVttFragQueues=function(){var t=this;this.vttFragQueues={},this.tracks.forEach(function(e){t.vttFragQueues[e.id]=[]})},e.prototype.nextFrag=function(){if(null===this.currentlyProcessing&&this.currentTrackId>-1&&this.vttFragQueues[this.currentTrackId].length){var t=this.currentlyProcessing=this.vttFragQueues[this.currentTrackId].shift();this.fragCurrent=t,this.hls.trigger(l.a.FRAG_LOADING,{frag:t}),this.state=Oe.FRAG_LOADING}},e.prototype.onSubtitleFragProcessed=function(t){t.success&&this.vttFragSNsProcessed[t.frag.trackId].push(t.frag.sn),this.currentlyProcessing=null,this.state=Oe.IDLE,this.nextFrag()},e.prototype.onMediaAttached=function(){this.state=Oe.IDLE},e.prototype.onError=function(t){var e=t.frag;e&&"subtitle"!==e.type||this.currentlyProcessing&&(this.currentlyProcessing=null,this.nextFrag())},e.prototype.doTick=function(){var t=this;switch(this.state){case Oe.IDLE:var e,r=this.tracks,i=this.currentTrackId,n=this.vttFragSNsProcessed[i],a=this.vttFragQueues[i],o=this.currentlyProcessing?this.currentlyProcessing.sn:-1;if(!r)break;if(i<r.length&&(e=r[i].details),void 0===e)break;e.fragments.forEach(function(e){(function(t){return n.indexOf(t.sn)>-1})(e)||e.sn===o||function(t){return a.some(function(e){return e.sn===t.sn})}(e)||(e.encrypted?(u.b.log("Loading key for "+e.sn),t.state=Oe.KEY_LOADING,t.hls.trigger(l.a.KEY_LOADING,{frag:e})):(e.trackId=i,a.push(e),t.nextFrag()))})}},e.prototype.onSubtitleTracksUpdated=function(t){var e=this;u.b.log("subtitle tracks updated"),this.tracks=t.subtitleTracks,this.clearVttFragQueues(),this.vttFragSNsProcessed={},this.tracks.forEach(function(t){e.vttFragSNsProcessed[t.id]=[]})},e.prototype.onSubtitleTrackSwitch=function(t){if(this.currentTrackId=t.id,this.tracks&&-1!==this.currentTrackId){var e=this.tracks[this.currentTrackId];e&&e.details&&this.tick()}},e.prototype.onSubtitleTrackLoaded=function(){this.tick()},e.prototype.onKeyLoaded=function(){this.state===Oe.KEY_LOADING&&(this.state=Oe.IDLE,this.tick())},e.prototype.onFragLoaded=function(t){var e=this.fragCurrent,r=t.frag.decryptdata,i=t.frag,n=this.hls;if(this.state===Oe.FRAG_LOADING&&e&&"subtitle"===t.frag.type&&e.sn===t.frag.sn&&t.payload.byteLength>0&&null!=r&&null!=r.key&&"AES-128"===r.method){var a=void 0;try{a=Ie.now()}catch(t){a=Date.now()}this.decrypter.decrypt(t.payload,r.key.buffer,r.iv.buffer,function(t){var e=void 0;try{e=Ie.now()}catch(t){e=Date.now()}n.trigger(l.a.FRAG_DECRYPTED,{frag:i,payload:t,stats:{tstart:a,tdecrypt:e}})})}},e}(ut),xe=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var Pe=window.XMLHttpRequest,Fe="com.widevine.alpha",Me="com.microsoft.playready",Ne=function(t){function e(r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r,l.a.MEDIA_ATTACHED,l.a.MANIFEST_PARSED));return i._widevineLicenseUrl=r.config.widevineLicenseUrl,i._licenseXhrSetup=r.config.licenseXhrSetup,i._emeEnabled=r.config.emeEnabled,i._requestMediaKeySystemAccess=r.config.requestMediaKeySystemAccessFunc,i._mediaKeysList=[],i._media=null,i._hasSetMediaKeys=!1,i._isMediaEncrypted=!1,i._requestLicenseFailureCount=0,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getLicenseServerUrl=function(t){var e=void 0;switch(t){case Fe:e=this._widevineLicenseUrl;break;default:e=null}return e||(u.b.error('No license server URL configured for key-system "'+t+'"'),this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})),e},e.prototype._attemptKeySystemAccess=function(t,e,r){var i=this,n=function(t,e,r){switch(t){case Fe:return function(t,e,r){var i={videoCapabilities:[]};return e.forEach(function(t){i.videoCapabilities.push({contentType:'video/mp4; codecs="'+t+'"'})}),[i]}(0,r);default:throw Error("Unknown key-system: "+t)}}(t,0,r);n?(u.b.log("Requesting encrypted media key-system access"),this.requestMediaKeySystemAccess(t,n).then(function(e){i._onMediaKeySystemAccessObtained(t,e)}).catch(function(e){u.b.error('Failed to obtain key-system "'+t+'" access:',e)})):u.b.warn("Can not create config for key-system (maybe because platform is not supported):",t)},e.prototype._onMediaKeySystemAccessObtained=function(t,e){var r=this;u.b.log('Access for key-system "'+t+'" obtained');var i={mediaKeys:null,mediaKeysSession:null,mediaKeysSessionInitialized:!1,mediaKeySystemAccess:e,mediaKeySystemDomain:t};this._mediaKeysList.push(i),e.createMediaKeys().then(function(e){i.mediaKeys=e,u.b.log('Media-keys created for key-system "'+t+'"'),r._onMediaKeysCreated()}).catch(function(t){u.b.error("Failed to create media-keys:",t)})},e.prototype._onMediaKeysCreated=function(){var t=this;this._mediaKeysList.forEach(function(e){e.mediaKeysSession||(e.mediaKeysSession=e.mediaKeys.createSession(),t._onNewMediaKeySession(e.mediaKeysSession))})},e.prototype._onNewMediaKeySession=function(t){var e=this;u.b.log("New key-system session "+t.sessionId),t.addEventListener("message",function(r){e._onKeySessionMessage(t,r.message)},!1)},e.prototype._onKeySessionMessage=function(t,e){u.b.log("Got EME message event, creating license request"),this._requestLicense(e,function(e){u.b.log("Received license data, updating key-session"),t.update(e)})},e.prototype._onMediaEncrypted=function(t,e){u.b.log('Media is encrypted using "'+t+'" init data type'),this._isMediaEncrypted=!0,this._mediaEncryptionInitDataType=t,this._mediaEncryptionInitData=e,this._attemptSetMediaKeys(),this._generateRequestWithPreferredKeySession()},e.prototype._attemptSetMediaKeys=function(){if(!this._hasSetMediaKeys){var t=this._mediaKeysList[0];if(!t||!t.mediaKeys)return u.b.error("Fatal: Media is encrypted but no CDM access or no keys have been obtained yet"),void this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_NO_KEYS,fatal:!0});u.b.log("Setting keys for encrypted media"),this._media.setMediaKeys(t.mediaKeys),this._hasSetMediaKeys=!0}},e.prototype._generateRequestWithPreferredKeySession=function(){var t=this,e=this._mediaKeysList[0];if(!e)return u.b.error("Fatal: Media is encrypted but not any key-system access has been obtained yet"),void this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_NO_ACCESS,fatal:!0});if(e.mediaKeysSessionInitialized)u.b.warn("Key-Session already initialized but requested again");else{var r=e.mediaKeysSession;r||(u.b.error("Fatal: Media is encrypted but no key-session existing"),this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_NO_SESSION,fatal:!0}));var i=this._mediaEncryptionInitDataType,n=this._mediaEncryptionInitData;u.b.log('Generating key-session request for "'+i+'" init data type'),e.mediaKeysSessionInitialized=!0,r.generateRequest(i,n).then(function(){u.b.debug("Key-session generation succeeded")}).catch(function(e){u.b.error("Error generating key-session request:",e),t.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_NO_SESSION,fatal:!1})})}},e.prototype._createLicenseXhr=function(t,e,r){var i=new Pe,n=this._licenseXhrSetup;try{if(n)try{n(i,t)}catch(e){i.open("POST",t,!0),n(i,t)}i.readyState||i.open("POST",t,!0)}catch(t){return u.b.error("Error setting up key-system license XHR",t),void this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})}return i.responseType="arraybuffer",i.onreadystatechange=this._onLicenseRequestReadyStageChange.bind(this,i,t,e,r),i},e.prototype._onLicenseRequestReadyStageChange=function(t,e,r,i){switch(t.readyState){case 4:if(200===t.status)this._requestLicenseFailureCount=0,u.b.log("License request succeeded"),i(t.response);else{if(u.b.error("License Request XHR failed ("+e+"). Status: "+t.status+" ("+t.statusText+")"),this._requestLicenseFailureCount++,this._requestLicenseFailureCount<=3){var n=3-this._requestLicenseFailureCount+1;return u.b.warn("Retrying license request, "+n+" attempts left"),void this._requestLicense(r,i)}this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})}}},e.prototype._generateLicenseRequestChallenge=function(t,e){var r=void 0;return t.mediaKeySystemDomain===Me?u.b.error("PlayReady is not supported (yet)"):t.mediaKeySystemDomain===Fe?r=e:u.b.error("Unsupported key-system:",t.mediaKeySystemDomain),r},e.prototype._requestLicense=function(t,e){u.b.log("Requesting content license for key-system");var r=this._mediaKeysList[0];if(!r)return u.b.error("Fatal error: Media is encrypted but no key-system access has been obtained yet"),void this.hls.trigger(l.a.ERROR,{type:o.b.KEY_SYSTEM_ERROR,details:o.a.KEY_SYSTEM_NO_ACCESS,fatal:!0});var i=this.getLicenseServerUrl(r.mediaKeySystemDomain),n=this._createLicenseXhr(i,t,e);u.b.log("Sending license request to URL: "+i),n.send(this._generateLicenseRequestChallenge(r,t))},e.prototype.onMediaAttached=function(t){var e=this;if(this._emeEnabled){var r=t.media;this._media=r,r.addEventListener("encrypted",function(t){e._onMediaEncrypted(t.initDataType,t.initData)})}},e.prototype.onManifestParsed=function(t){if(this._emeEnabled){var e=t.levels.map(function(t){return t.audioCodec}),r=t.levels.map(function(t){return t.videoCodec});this._attemptKeySystemAccess(Fe,e,r)}},xe(e,[{key:"requestMediaKeySystemAccess",get:function(){if(!this._requestMediaKeySystemAccess)throw new Error("No requestMediaKeySystemAccess function configured");return this._requestMediaKeySystemAccess}}]),e}(h),Ue={autoStartLoad:!0,startPosition:-1,defaultAudioCodec:void 0,debug:!1,capLevelOnFPSDrop:!1,capLevelToPlayerSize:!1,initialLiveManifestSize:1,maxBufferLength:30,maxBufferSize:6e7,maxBufferHole:.5,lowBufferWatchdogPeriod:.5,highBufferWatchdogPeriod:3,nudgeOffset:.1,nudgeMaxRetry:3,maxFragLookUpTolerance:.25,liveSyncDurationCount:3,liveMaxLatencyDurationCount:1/0,liveSyncDuration:void 0,liveMaxLatencyDuration:void 0,liveDurationInfinity:!1,maxMaxBufferLength:600,enableWorker:!0,enableSoftwareAES:!0,manifestLoadingTimeOut:1e4,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1e3,manifestLoadingMaxRetryTimeout:64e3,startLevel:void 0,levelLoadingTimeOut:1e4,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1e3,levelLoadingMaxRetryTimeout:64e3,fragLoadingTimeOut:2e4,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1e3,fragLoadingMaxRetryTimeout:64e3,startFragPrefetch:!1,fpsDroppedMonitoringPeriod:5e3,fpsDroppedMonitoringThreshold:.2,appendErrorMaxRetry:3,loader:Ut,fLoader:void 0,pLoader:void 0,xhrSetup:void 0,licenseXhrSetup:void 0,abrController:Dt,bufferController:It,capLevelController:Ct,fpsController:Pt,stretchShortVideoTrack:!1,maxAudioFramesDrift:1,forceKeyFrameOnDiscontinuity:!0,abrEwmaFastLive:3,abrEwmaSlowLive:9,abrEwmaFastVoD:3,abrEwmaSlowVoD:9,abrEwmaDefaultEstimate:5e5,abrBandWidthFactor:.95,abrBandWidthUpFactor:.7,abrMaxWithRealBitrate:!1,maxStarvationDelay:4,maxLoadingDelay:4,minAutoBitrate:0,emeEnabled:!1,widevineLicenseUrl:void 0,requestMediaKeySystemAccessFunc:"undefined"!=typeof window&&window.navigator&&window.navigator.requestMediaKeySystemAccess?window.navigator.requestMediaKeySystemAccess.bind(window.navigator):null};Ue.subtitleStreamController=Ce,Ue.subtitleTrackController=De,Ue.timelineController=Re,Ue.cueHandler=i,Ue.enableCEA708Captions=!0,Ue.enableWebVTT=!0,Ue.captionsTextTrack1Label="English",Ue.captionsTextTrack1LanguageCode="en",Ue.captionsTextTrack2Label="Spanish",Ue.captionsTextTrack2LanguageCode="es",Ue.audioStreamController=Vt,Ue.audioTrackController=Gt,Ue.emeController=Ne;var Be=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();r(14);var Ge=function(){function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var i=t.DefaultConfig;if((r.liveSyncDurationCount||r.liveMaxLatencyDurationCount)&&(r.liveSyncDuration||r.liveMaxLatencyDuration))throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");for(var n in i)n in r||(r[n]=i[n]);if(void 0!==r.liveMaxLatencyDurationCount&&r.liveMaxLatencyDurationCount<=r.liveSyncDurationCount)throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');if(void 0!==r.liveMaxLatencyDuration&&(r.liveMaxLatencyDuration<=r.liveSyncDuration||void 0===r.liveSyncDuration))throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');Object(u.a)(r.debug),this.config=r,this._autoLevelCapping=-1;var a=this.observer=new q.a;a.trigger=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];a.emit.apply(a,[t,t].concat(r))},a.off=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];a.removeListener.apply(a,[t].concat(r))},this.on=a.on.bind(a),this.off=a.off.bind(a),this.once=a.once.bind(a),this.trigger=a.trigger.bind(a);var o=this.abrController=new r.abrController(this),s=new r.bufferController(this),l=new r.capLevelController(this),d=new r.fpsController(this),c=new M(this),h=new N(this),f=new U(this),p=new _t(this),g=this.levelController=new bt(this),v=new H(this),m=[g,this.streamController=new gt(this,v)],y=r.audioStreamController;y&&m.push(new y(this,v)),this.networkControllers=m;var b=[c,h,f,o,s,l,d,p,v];if(y=r.audioTrackController){var E=new y(this);this.audioTrackController=E,b.push(E)}if(y=r.subtitleTrackController){var T=new y(this);this.subtitleTrackController=T,b.push(T)}if(y=r.emeController){var S=new y(this);this.emeController=S,b.push(S)}[r.subtitleStreamController,r.timelineController].forEach(function(t){t&&b.push(new t(e))}),this.coreComponents=b}return t.isSupported=function(){return function(){var t=$(),e=window.SourceBuffer||window.WebKitSourceBuffer,r=t&&"function"==typeof t.isTypeSupported&&t.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'),i=!e||e.prototype&&"function"==typeof e.prototype.appendBuffer&&"function"==typeof e.prototype.remove;return!!r&&!!i}()},Be(t,null,[{key:"version",get:function(){return"0.11.0"}},{key:"Events",get:function(){return l.a}},{key:"ErrorTypes",get:function(){return o.b}},{key:"ErrorDetails",get:function(){return o.a}},{key:"DefaultConfig",get:function(){return t.defaultConfig?t.defaultConfig:Ue},set:function(e){t.defaultConfig=e}}]),t.prototype.destroy=function(){u.b.log("destroy"),this.trigger(l.a.DESTROYING),this.detachMedia(),this.coreComponents.concat(this.networkControllers).forEach(function(t){t.destroy()}),this.url=null,this.observer.removeAllListeners(),this._autoLevelCapping=-1},t.prototype.attachMedia=function(t){u.b.log("attachMedia"),this.media=t,this.trigger(l.a.MEDIA_ATTACHING,{media:t})},t.prototype.detachMedia=function(){u.b.log("detachMedia"),this.trigger(l.a.MEDIA_DETACHING),this.media=null},t.prototype.loadSource=function(t){t=a.a.buildAbsoluteURL(window.location.href,t,{alwaysNormalize:!0}),u.b.log("loadSource:"+t),this.url=t,this.trigger(l.a.MANIFEST_LOADING,{url:t})},t.prototype.startLoad=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1;u.b.log("startLoad("+t+")"),this.networkControllers.forEach(function(e){e.startLoad(t)})},t.prototype.stopLoad=function(){u.b.log("stopLoad"),this.networkControllers.forEach(function(t){t.stopLoad()})},t.prototype.swapAudioCodec=function(){u.b.log("swapAudioCodec"),this.streamController.swapAudioCodec()},t.prototype.recoverMediaError=function(){u.b.log("recoverMediaError");var t=this.media;this.detachMedia(),this.attachMedia(t)},Be(t,[{key:"levels",get:function(){return this.levelController.levels}},{key:"currentLevel",get:function(){return this.streamController.currentLevel},set:function(t){u.b.log("set currentLevel:"+t),this.loadLevel=t,this.streamController.immediateLevelSwitch()}},{key:"nextLevel",get:function(){return this.streamController.nextLevel},set:function(t){u.b.log("set nextLevel:"+t),this.levelController.manualLevel=t,this.streamController.nextLevelSwitch()}},{key:"loadLevel",get:function(){return this.levelController.level},set:function(t){u.b.log("set loadLevel:"+t),this.levelController.manualLevel=t}},{key:"nextLoadLevel",get:function(){return this.levelController.nextLoadLevel},set:function(t){this.levelController.nextLoadLevel=t}},{key:"firstLevel",get:function(){return Math.max(this.levelController.firstLevel,this.minAutoLevel)},set:function(t){u.b.log("set firstLevel:"+t),this.levelController.firstLevel=t}},{key:"startLevel",get:function(){return this.levelController.startLevel},set:function(t){u.b.log("set startLevel:"+t);-1!==t&&(t=Math.max(t,this.minAutoLevel)),this.levelController.startLevel=t}},{key:"autoLevelCapping",get:function(){return this._autoLevelCapping},set:function(t){u.b.log("set autoLevelCapping:"+t),this._autoLevelCapping=t}},{key:"autoLevelEnabled",get:function(){return-1===this.levelController.manualLevel}},{key:"manualLevel",get:function(){return this.levelController.manualLevel}},{key:"minAutoLevel",get:function(){for(var t=this.levels,e=this.config.minAutoBitrate,r=t?t.length:0,i=0;i<r;i++){if((t[i].realBitrate?Math.max(t[i].realBitrate,t[i].bitrate):t[i].bitrate)>e)return i}return 0}},{key:"maxAutoLevel",get:function(){var t=this.levels,e=this.autoLevelCapping;return-1===e&&t&&t.length?t.length-1:e}},{key:"nextAutoLevel",get:function(){return Math.min(Math.max(this.abrController.nextAutoLevel,this.minAutoLevel),this.maxAutoLevel)},set:function(t){this.abrController.nextAutoLevel=Math.max(this.minAutoLevel,t)}},{key:"audioTracks",get:function(){var t=this.audioTrackController;return t?t.audioTracks:[]}},{key:"audioTrack",get:function(){var t=this.audioTrackController;return t?t.audioTrack:-1},set:function(t){var e=this.audioTrackController;e&&(e.audioTrack=t)}},{key:"liveSyncPosition",get:function(){return this.streamController.liveSyncPosition}},{key:"subtitleTracks",get:function(){var t=this.subtitleTrackController;return t?t.subtitleTracks:[]}},{key:"subtitleTrack",get:function(){var t=this.subtitleTrackController;return t?t.subtitleTrack:-1},set:function(t){var e=this.subtitleTrackController;e&&(e.subtitleTrack=t)}},{key:"subtitleDisplay",get:function(){var t=this.subtitleTrackController;return!!t&&t.subtitleDisplay},set:function(t){var e=this.subtitleTrackController;e&&(e.subtitleDisplay=t)}}]),t}();e.default=Ge},function(t,e,r){function i(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.i=function(t){return t},r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/",r.oe=function(t){throw console.error(t),t};var i=r(r.s=ENTRY_MODULE);return i.default||i}var n="[\\.|\\-|\\+|\\w|/|@]+",a="\\((/\\*.*?\\*/)?s?.*?("+n+").*?\\)";function o(t){return(t+"").replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}function s(t,e,i){var s={};s[i]=[];var l=e.toString(),u=l.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/);if(!u)return s;for(var d,c=u[1],h=new RegExp("(\\\\n|\\W)"+o(c)+a,"g");d=h.exec(l);)"dll-reference"!==d[3]&&s[i].push(d[3]);for(h=new RegExp("\\("+o(c)+'\\("(dll-reference\\s('+n+'))"\\)\\)'+a,"g");d=h.exec(l);)t[d[2]]||(s[i].push(d[1]),t[d[2]]=r(d[1]).m),s[d[2]]=s[d[2]]||[],s[d[2]].push(d[4]);return s}function l(t){return Object.keys(t).reduce(function(e,r){return e||t[r].length>0},!1)}t.exports=function(t,e){e=e||{};var n={main:r.m},a=e.all?{main:Object.keys(n)}:function(t,e){for(var r={main:[e]},i={main:[]},n={main:{}};l(r);)for(var a=Object.keys(r),o=0;o<a.length;o++){var u=a[o],d=r[u].pop();if(n[u]=n[u]||{},!n[u][d]&&t[u][d]){n[u][d]=!0,i[u]=i[u]||[],i[u].push(d);for(var c=s(t,t[u][d],u),h=Object.keys(c),f=0;f<h.length;f++)r[h[f]]=r[h[f]]||[],r[h[f]]=r[h[f]].concat(c[h[f]])}}return i}(n,t),o="";Object.keys(a).filter(function(t){return"main"!==t}).forEach(function(t){for(var e=0;a[t][e];)e++;a[t].push(e),n[t][e]="(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",o=o+"var "+t+" = ("+i.toString().replace("ENTRY_MODULE",JSON.stringify(e))+")({"+a[t].map(function(e){return JSON.stringify(e)+": "+n[t][e].toString()}).join(",")+"});\n"}),o=o+"("+i.toString().replace("ENTRY_MODULE",JSON.stringify(t))+")({"+a.main.map(function(t){return JSON.stringify(t)+": "+n.main[t].toString()}).join(",")+"})(self);";var u=new window.Blob([o],{type:"text/javascript"});if(e.bare)return u;var d=(window.URL||window.webkitURL||window.mozURL||window.msURL).createObjectURL(u),c=new window.Worker(d);return c.objectURL=d,c}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(10),n=r(1),a=r(0),o=r(7),s=r.n(o);e.default=function(t){var e=new s.a;e.trigger=function(t){for(var r=arguments.length,i=Array(r>1?r-1:0),n=1;n<r;n++)i[n-1]=arguments[n];e.emit.apply(e,[t,t].concat(i))},e.off=function(t){for(var r=arguments.length,i=Array(r>1?r-1:0),n=1;n<r;n++)i[n-1]=arguments[n];e.removeListener.apply(e,[t].concat(i))};var r=function(e,r){t.postMessage({event:e,data:r})};t.addEventListener("message",function(n){var o=n.data;switch(o.cmd){case"init":var s=JSON.parse(o.config);t.demuxer=new i.a(e,o.typeSupported,s,o.vendor);try{Object(a.a)(!0===s.debug)}catch(t){console.warn("demuxerWorker: unable to enable logs")}r("init",null);break;case"demux":t.demuxer.push(o.data,o.decryptdata,o.initSegment,o.audioCodec,o.videoCodec,o.timeOffset,o.discontinuity,o.trackSwitch,o.contiguous,o.duration,o.accurateTimeOffset,o.defaultInitPTS)}}),e.on(n.a.FRAG_DECRYPTED,r),e.on(n.a.FRAG_PARSING_INIT_SEGMENT,r),e.on(n.a.FRAG_PARSED,r),e.on(n.a.ERROR,r),e.on(n.a.FRAG_PARSING_METADATA,r),e.on(n.a.FRAG_PARSING_USERDATA,r),e.on(n.a.INIT_PTS_FOUND,r),e.on(n.a.FRAG_PARSING_DATA,function(e,r){var i=[],n={event:e,data:r};r.data1&&(n.data1=r.data1.buffer,i.push(r.data1.buffer),delete r.data1),r.data2&&(n.data2=r.data2.buffer,i.push(r.data2.buffer),delete r.data2),t.postMessage(n,i)})}},function(t,e){
/*! http://mths.be/endswith v0.2.0 by @mathias */
String.prototype.endsWith||function(){"use strict";var t=function(){try{var t={},e=Object.defineProperty,r=e(t,t,t)&&e}catch(t){}return r}(),e={}.toString,r=function(t){if(null==this)throw TypeError();var r=String(this);if(t&&"[object RegExp]"==e.call(t))throw TypeError();var i=r.length,n=String(t),a=n.length,o=i;if(arguments.length>1){var s=arguments[1];void 0!==s&&(o=s?Number(s):0)!=o&&(o=0)}var l=Math.min(Math.max(o,0),i)-a;if(l<0)return!1;for(var u=-1;++u<a;)if(r.charCodeAt(l+u)!=n.charCodeAt(u))return!1;return!0};t?t(String.prototype,"endsWith",{value:r,configurable:!0,writable:!0}):String.prototype.endsWith=r}()}]).default})},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=e.protocol+"//"+e.host,i=r+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(n=0===a.indexOf("//")?a:0===a.indexOf("/")?r+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(t,e,r){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function n(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}e.__esModule=!0;var a=n(r(6)),o=i(r(33)),s=i(r(1)),l=n(r(0)),u=n(r(34)),d=i(r(35));function c(){var t=new a.HandlebarsEnvironment;return l.extend(t,a),t.SafeString=o.default,t.Exception=s.default,t.Utils=l,t.escapeExpression=l.escapeExpression,t.VM=u,t.template=function(e){return u.template(e,t)},t}var h=c();h.create=c,d.default(h),h.default=h,e.default=h,t.exports=e.default},function(t,e,r){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0,e.registerDefaultHelpers=function(t){n.default(t),a.default(t),o.default(t),s.default(t),l.default(t),u.default(t),d.default(t)};var n=i(r(23)),a=i(r(24)),o=i(r(25)),s=i(r(26)),l=i(r(27)),u=i(r(28)),d=i(r(29))},function(t,e,r){"use strict";e.__esModule=!0;var i=r(0);e.default=function(t){t.registerHelper("blockHelperMissing",function(e,r){var n=r.inverse,a=r.fn;if(!0===e)return a(this);if(!1===e||null==e)return n(this);if(i.isArray(e))return e.length>0?(r.ids&&(r.ids=[r.name]),t.helpers.each(e,r)):n(this);if(r.data&&r.ids){var o=i.createFrame(r.data);o.contextPath=i.appendContextPath(r.data.contextPath,r.name),r={data:o}}return a(e,r)})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(0),n=function(t){return t&&t.__esModule?t:{default:t}}(r(1));e.default=function(t){t.registerHelper("each",function(t,e){if(!e)throw new n.default("Must pass iterator to #each");var r=e.fn,a=e.inverse,o=0,s="",l=void 0,u=void 0;function d(e,n,a){l&&(l.key=e,l.index=n,l.first=0===n,l.last=!!a,u&&(l.contextPath=u+e)),s+=r(t[e],{data:l,blockParams:i.blockParams([t[e],e],[u+e,null])})}if(e.data&&e.ids&&(u=i.appendContextPath(e.data.contextPath,e.ids[0])+"."),i.isFunction(t)&&(t=t.call(this)),e.data&&(l=i.createFrame(e.data)),t&&"object"==typeof t)if(i.isArray(t))for(var c=t.length;o<c;o++)o in t&&d(o,o,o===t.length-1);else{var h=void 0;for(var f in t)t.hasOwnProperty(f)&&(void 0!==h&&d(h,o-1),h=f,o++);void 0!==h&&d(h,o-1,!0)}return 0===o&&(s=a(this)),s})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=function(t){return t&&t.__esModule?t:{default:t}}(r(1));e.default=function(t){t.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(0);e.default=function(t){t.registerHelper("if",function(t,e){return i.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||i.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,r){return t.helpers.if.call(this,e,{fn:r.inverse,inverse:r.fn,hash:r.hash})})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("log",function(){for(var e=[void 0],r=arguments[arguments.length-1],i=0;i<arguments.length-1;i++)e.push(arguments[i]);var n=1;null!=r.hash.level?n=r.hash.level:r.data&&null!=r.data.level&&(n=r.data.level),e[0]=n,t.log.apply(t,e)})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("lookup",function(t,e){return t&&t[e]})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(0);e.default=function(t){t.registerHelper("with",function(t,e){i.isFunction(t)&&(t=t.call(this));var r=e.fn;if(i.isEmpty(t))return e.inverse(this);var n=e.data;return e.data&&e.ids&&((n=i.createFrame(e.data)).contextPath=i.appendContextPath(e.data.contextPath,e.ids[0])),r(t,{data:n,blockParams:i.blockParams([t],[n&&n.contextPath])})})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0,e.registerDefaultDecorators=function(t){i.default(t)};var i=function(t){return t&&t.__esModule?t:{default:t}}(r(31))},function(t,e,r){"use strict";e.__esModule=!0;var i=r(0);e.default=function(t){t.registerDecorator("inline",function(t,e,r,n){var a=t;return e.partials||(e.partials={},a=function(n,a){var o=r.partials;r.partials=i.extend({},o,e.partials);var s=t(n,a);return r.partials=o,s}),e.partials[n.args[0]]=n.fn,a})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(0),n={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=i.indexOf(n.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=n.lookupLevel(t),"undefined"!=typeof console&&n.lookupLevel(n.level)<=t){var e=n.methodMap[t];console[e]||(e="log");for(var r=arguments.length,i=Array(r>1?r-1:0),a=1;a<r;a++)i[a-1]=arguments[a];console[e].apply(console,i)}}};e.default=n,t.exports=e.default},function(t,e,r){"use strict";function i(t){this.string=t}e.__esModule=!0,i.prototype.toString=i.prototype.toHTML=function(){return""+this.string},e.default=i,t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0,e.checkRevision=function(t){var e=t&&t[0]||1,r=a.COMPILER_REVISION;if(e!==r){if(e<r){var i=a.REVISION_CHANGES[r],o=a.REVISION_CHANGES[e];throw new n.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+i+") or downgrade your runtime to an older version ("+o+").")}throw new n.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}},e.template=function(t,e){if(!e)throw new n.default("No environment passed to template");if(!t||!t.main)throw new n.default("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var r={strict:function(t,e){if(!(e in t))throw new n.default('"'+e+'" not defined in '+t);return t[e]},lookup:function(t,e){for(var r=t.length,i=0;i<r;i++)if(t[i]&&null!=t[i][e])return t[i][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:i.escapeExpression,invokePartial:function(r,a,o){o.hash&&(a=i.extend({},a,o.hash),o.ids&&(o.ids[0]=!0));r=e.VM.resolvePartial.call(this,r,a,o);var s=e.VM.invokePartial.call(this,r,a,o);null==s&&e.compile&&(o.partials[o.name]=e.compile(r,t.compilerOptions,e),s=o.partials[o.name](a,o));if(null!=s){if(o.indent){for(var l=s.split("\n"),u=0,d=l.length;u<d&&(l[u]||u+1!==d);u++)l[u]=o.indent+l[u];s=l.join("\n")}return s}throw new n.default("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(e){var r=t[e];return r.decorator=t[e+"_d"],r},programs:[],program:function(t,e,r,i,n){var a=this.programs[t],s=this.fn(t);return e||n||i||r?a=o(this,t,s,e,r,i,n):a||(a=this.programs[t]=o(this,t,s)),a},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var r=t||e;return t&&e&&t!==e&&(r=i.extend({},e,t)),r},nullContext:Object.seal({}),noop:e.VM.noop,compilerInfo:t.compiler};function s(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=i.data;s._setup(i),!i.partial&&t.useData&&(n=function(t,e){e&&"root"in e||((e=e?a.createFrame(e):{}).root=t);return e}(e,n));var o=void 0,u=t.useBlockParams?[]:void 0;function d(e){return""+t.main(r,e,r.helpers,r.partials,n,u,o)}return t.useDepths&&(o=i.depths?e!=i.depths[0]?[e].concat(i.depths):i.depths:[e]),(d=l(t.main,d,r,i.depths||[],n,u))(e,i)}return s.isTop=!0,s._setup=function(i){i.partial?(r.helpers=i.helpers,r.partials=i.partials,r.decorators=i.decorators):(r.helpers=r.merge(i.helpers,e.helpers),t.usePartial&&(r.partials=r.merge(i.partials,e.partials)),(t.usePartial||t.useDecorators)&&(r.decorators=r.merge(i.decorators,e.decorators)))},s._child=function(e,i,a,s){if(t.useBlockParams&&!a)throw new n.default("must pass block params");if(t.useDepths&&!s)throw new n.default("must pass parent depths");return o(r,e,t[e],i,0,a,s)},s},e.wrapProgram=o,e.resolvePartial=function(t,e,r){t?t.call||r.name||(r.name=t,t=r.partials[t]):t="@partial-block"===r.name?r.data["partial-block"]:r.partials[r.name];return t},e.invokePartial=function(t,e,r){var o=r.data&&r.data["partial-block"];r.partial=!0,r.ids&&(r.data.contextPath=r.ids[0]||r.data.contextPath);var l=void 0;r.fn&&r.fn!==s&&function(){r.data=a.createFrame(r.data);var t=r.fn;l=r.data["partial-block"]=function(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return r.data=a.createFrame(r.data),r.data["partial-block"]=o,t(e,r)},t.partials&&(r.partials=i.extend({},r.partials,t.partials))}();void 0===t&&l&&(t=l);if(void 0===t)throw new n.default("The partial "+r.name+" could not be found");if(t instanceof Function)return t(e,r)},e.noop=s;var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}(r(0)),n=function(t){return t&&t.__esModule?t:{default:t}}(r(1)),a=r(6);function o(t,e,r,i,n,a,o){function s(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=o;return!o||e==o[0]||e===t.nullContext&&null===o[0]||(s=[e].concat(o)),r(t,e,t.helpers,t.partials,n.data||i,a&&[n.blockParams].concat(a),s)}return(s=l(r,s,t,o,i,a)).program=e,s.depth=o?o.length:0,s.blockParams=n||0,s}function s(){return""}function l(t,e,r,n,a,o){if(t.decorator){var s={};e=t.decorator(e,s,r,n&&n[0],a,o,n),i.extend(e,s)}return e}},function(t,e,r){"use strict";(function(r){e.__esModule=!0,e.default=function(t){var e=void 0!==r?r:window,i=e.Handlebars;t.noConflict=function(){return e.Handlebars===t&&(e.Handlebars=i),t}},t.exports=e.default}).call(this,r(36))},function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var i=r(38);"string"==typeof i&&(i=[[t.i,i,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};r(5)(i,n);i.locals&&(t.exports=i.locals)},function(t,e,r){(t.exports=r(4)(!1)).push([t.i,"",""])},function(t,e,r){var i=r(2);t.exports=(i.default||i).template({1:function(t,e,r,i,n){var a,o=null!=e?e:t.nullContext||{},s=r.helperMissing,l=t.escapeExpression;return'  <li>\n    <a href="'+l("function"==typeof(a=null!=(a=r.url||(null!=e?e.url:e))?a:s)?a.call(o,{name:"url",hash:{},data:n}):a)+'" class="font-arial-bold nav__item">\n      '+l("function"==typeof(a=null!=(a=r.title||(null!=e?e.title:e))?a:s)?a.call(o,{name:"title",hash:{},data:n}):a)+"\n    </a>\n  </li>\n"},compiler:[7,">= 4.0.0"],main:function(t,e,r,i,n){var a;return null!=(a=r.each.call(null!=e?e:t.nullContext||{},null!=e?e.items:e,{name:"each",hash:{},fn:t.program(1,n,0),inverse:t.noop,data:n}))?a:""},useData:!0})},function(t,e,r){var i=r(41);"string"==typeof i&&(i=[[t.i,i,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};r(5)(i,n);i.locals&&(t.exports=i.locals)},function(t,e,r){(t.exports=r(4)(!1)).push([t.i,".header {\n  position : fixed;\n  left : 0;\n  top : 0;\n  height : 6rem;\n  width : 100%;\n  grid-area : header;\n  display : -ms-grid;\n  display :     grid;\n  grid-template : 'logo nav' 'icon icon';\n  grid-auto-columns : min-content;\n  grid-template-rows : auto 1px;\n  -webkit-box-align : center;\n  align-items : center;\n  border-bottom : 1px solid #f0f0f0;\n  background : white;\n  z-index : 1;\n}\n\n.header__logo {\n  grid-area : logo;\n}\n\n.header__logo_position {\n  padding-left : 2.6rem;\n}\n/*ссылка <a href=...> делаем inline-block, нельзя добавлять изображение в строчный элемент*/\n.logo__logo-href {\n  display : inline-block;\n  grid-area : logo;\n  min-width : 7rem;\n}\n\n.header__nav {\n  grid-area : nav;\n  justify-self : left;\n  position : relative;\n}\n\n.nav__nav-list {\n  list-style : none;\n  display : -ms-inline-grid;\n  display :     inline-grid;\n  grid-auto-flow : column;\n}\n\n.nav__item {\n  text-decoration : none;\n  opacity : 0.6;\n  font-family : Arial-BoldMT;\n  font-size : 16px;\n  color : #333333;\n  line-height : 20px;\n  padding-left : 1.5rem;\n}\n.nav__item:hover {\n  opacity : 1;\n}\n\n.header__menu-toggle {\n  opacity : 0;\n  grid-area : icon;\n  cursor : pointer;\n}\n/*\ninput[type='checkbox'] {\n  display : none;\n}*/\n\n.menu-toggle__checkbox {\n  display : none;\n}\n\n.menu-toggle__picture {\n  padding-right : 1.25rem;\n}\n\n@media only screen and (max-width: 599px) {\n  .header {\n    height : 4.5rem;\n    border : initial;\n    grid-template : 'logo icon'\n    'nav nav';\n    grid-auto-columns : auto;\n    grid-template-rows : auto 1px;\n  }\n  .header__logo_position {\n    padding-left : 1.25rem;\n  }\n  .header__nav {\n    opacity : 0;\n    justify-self : center;\n    top : 4.5rem;\n    position : relative;\n    left : 0;\n    right : 0;\n    bottom : 0;\n    background : white;\n    width : 100%;\n  }\n\n  .nav__nav-list {\n    display : block;\n  }\n\n  .nav__item {\n    padding-bottom : 1rem;\n    display : inline-block;\n  }\n\n  .header__menu-toggle {\n    opacity : 1;\n    justify-self : end;\n    width : 3rem;\n  }\n  .menu-icon {\n    padding-right : 3.5rem;\n  }\n  .menu-toggle__checkbox:checked ~ .header__nav {\n    opacity : 1;\n  }\n}\n",""])},function(t,e,r){var i=r(2);t.exports=(i.default||i).template({compiler:[7,">= 4.0.0"],main:function(t,e,r,i,n){var a,o=null!=e?e:t.nullContext||{},s=r.helperMissing,l=t.escapeExpression;return'<div class="device-wrap">\n  <div class="tile v">\n    <div class="title-tile-v">\n      <p>\n        '+l("function"==typeof(a=null!=(a=r.title||(null!=e?e.title:e))?a:s)?a.call(o,{name:"title",hash:{},data:n}):a)+'\n      </p>\n    </div>\n    <video class="'+l("function"==typeof(a=null!=(a=r.class||(null!=e?e.class:e))?a:s)?a.call(o,{name:"class",hash:{},data:n}):a)+' video" muted="" autoplay="" preload=""></video>\n    <div class="open">\n      <label class="label-brightness">\n        Яркость\n        <input\n          type="range"\n          class="brightness"\n          min="0"\n          max="2"\n          step="0.2"\n          value="1"\n         />\n\n      </label>\n      <label class="label-contrast">\n        Контрастность\n        <input\n          type="range"\n          class="contrast"\n          min="0"\n          max="3"\n          step="0.2"\n          value="1"\n         />\n\n      </label>\n      <div class="volume"></div>\n      <svg class="chart" width="40" height="40" role="img">\n        <rect width="0" height="8" class="bar-1"></rect>\n        <rect width="0" height="8" y="10" class="bar-2"></rect>\n        <rect width="0" height="8" y="20" class="bar-3"></rect>\n        <rect width="0" height="8" y="30" class="bar-4"></rect>\n      </svg>\n      <div class="close close-button close-button-hover">\n        <p class="close close-title">\n          Все камеры\n        </p>\n      </div>\n    </div>\n  </div>\n</div>'},useData:!0})},function(t){t.exports=[{title:"Камера 1",class:"video-1",url:"http://localhost:9191/master?url=http%3A%2F%2Flocalhost%3A3102%2Fstreams%2Fsosed%2Fmaster.m3u8"},{title:"Камера 2",class:"video-2",url:"http://localhost:9191/master?url=http%3A%2F%2Flocalhost%3A3102%2Fstreams%2Fcat%2Fmaster.m3u8"},{title:"Камера 3",class:"video-3",url:"http://localhost:9191/master?url=http%3A%2F%2Flocalhost%3A3102%2Fstreams%2Fdog%2Fmaster.m3u8"},{title:"Камера 4",class:"video-4",url:"http://localhost:9191/master?url=http%3A%2F%2Flocalhost%3A3102%2Fstreams%2Fhall%2Fmaster.m3u8"}]},,,,function(t,e,r){var i=r(48);"string"==typeof i&&(i=[[t.i,i,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};r(5)(i,n);i.locals&&(t.exports=i.locals)},function(t,e,r){(t.exports=r(4)(!1)).push([t.i,".tile {\n  background : #fafafa;\n  border-radius : 1.25rem;\n  position : relative;\n  grid-auto-rows : -webkit-min-content;\n  grid-auto-rows :         min-content;\n}\n\n.title-tile {\n  font-family : Arial-BoldMT;\n  font-size : 1.5rem;\n  color : #333333;\n  text-align : center;\n  -o-text-overflow : ellipsis;\n     text-overflow : ellipsis;\n  overflow : hidden;\n  height : 3.6rem;\n  -webkit-line-clamp : 2;\n  display : -webkit-box;\n  -webkit-box-orient : vertical;\n}\n\n.content-device {\n  display : grid;\n  grid-template-columns : repeat(2, 1fr);\n  grid-template-rows : 1fr 1fr;\n  grid-gap : 1.2rem;\n}\n\n.video {\n  width : 100%;\n  height : 80%;\n  border-radius : 1.25rem;\n}\n\n.title-tile-v {\n  text-align : center;\n  font-family : Arial-BoldMT;\n  font-size : 1.5rem;\n  color : #333333;\n  -o-text-overflow : ellipsis;\n     text-overflow : ellipsis;\n  overflow : hidden;\n  height : 3.6rem;\n  -webkit-line-clamp : 2;\n  display : -webkit-box;\n  -webkit-box-orient : vertical;\n}\n\n.v {\n  padding : 0.5rem;\n  height : 20rem;\n  transition : width, height, top, left 10s;\n  /*transition : offset-position 5s;*/\n}\n.opened.v {\n  top : 50%;\n  left : 50%;\n  -webkit-transform : translate(-50%, -50%);\n          transform : translate(-50%, -50%);\n  width : 90%;\n  height : 90%;\n  max-width : 100%;\n  max-height : 80%;\n  z-index : 1;\n  position : absolute;\n  transition : width, height, top, left 10s;\n}\n\n.close-button {\n  width : 7rem;\n  height : 3rem;\n  background-color : #e5e5e5;\n  bottom : 1rem;\n  right : 1rem;\n  z-index : 1;\n  padding : 0.5rem;\n  border-radius : 0.75rem;\n  text-align : center;\n  z-index : 2;\n}\n\n.close-button-hover:hover {\n  background-color : #ffd93e;\n}\n\n.open {\n  display : none;\n  justify-content : space-between;\n}\n.brightness,\n.label-brightness,\n.contrast,\n.label-contrast {\n  width : 7rem;\n}\n\n.opened .open {\n  display : flex;\n}\n\n@media only screen and (max-width: 800px) {\n  .content-device {\n    grid-template-columns : 1fr;\n  }\n  .opened.v {\n    position : relative;\n    height : auto;\n  }\n  .open {\n    flex-wrap : wrap;\n  }\n}\n",""])},,function(t,e,r){"use strict";r.r(e);var i=r(19),n=r(42);r(47);var a=r(8),o=r(10),s=r(3),l=r(43),u=r(12),d=r(13),c=r.n(d),h=r(14),f=r.n(h),p=r(15),g=r.n(p),v=r(16),m=r.n(v),y=r(17),b=r.n(y),E=r(18),T=r.n(E);const S={class:"logo__picture",sourceSrcset:g.a,imgSrc:c.a,imgSrcset:`${f.a} 2x`,imgAlt:"Яндекс дом"},_={class:"menu-toggle__picture",sourceSrcset:T.a,imgSrc:m.a,imgSrcset:`${b.a} 2x`,imgAlt:"menu"};s.logo=S,s.icon=_;const A=Object(o.a)(s);document.querySelector(".header-wrap").innerHTML=A,l.forEach(t=>{const e=document.querySelector(".content-device");e&&new class{constructor(t,e,r){const i=n(t);this.appendToContainer(i,e),this.tile=e.querySelector(".device-wrap:last-child  .tile"),this.video=this.tile.querySelector("video"),this.initVideoStream(this.video,r),this.addEventToVideo(),this.addEventToBtns(),this.addEventToBrightness(),this.addEventToContrast(),this.addEventToVolume()}initVideoStream(t,e){if(i.isSupported()){const r=new i;r.loadSource(e),r.attachMedia(t),r.on(i.Events.MANIFEST_PARSED,function(){t.play()})}else t.canPlayType("application/vnd.apple.mpegurl")&&(t.src="https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8",t.addEventListener("loadedmetadata",function(){t.play()}))}appendToContainer(t,e){const r=document.createElement("template");r.innerHTML=t,e.appendChild(r.content)}addEventToVideo(){this.video&&this.video.addEventListener("click",()=>{document.querySelector(".opened")&&(this.tile.classList.add("opened"),this.initAudioContext())})}addEventToBrightness(){const t=this.tile.querySelector(".brightness");t&&t.addEventListener("input",t=>{this.video.style.filter=`brightness(${t.target.value})`})}addEventToContrast(){const t=this.tile.querySelector(".contrast");null!==t&&t.addEventListener("input",t=>{this.video.style.filter=`contrast(${t.target.value})`})}addEventToBtns(){this.tile.querySelector(".close").addEventListener("click",()=>{this.tile.classList.remove("opened"),this.onVolumeMute()})}addEventToVolume(){const t=this.tile.querySelector(".volume");t&&t.addEventListener("click",e=>{t.classList.contains("up")?this.onVolumeMute():this.onVolumeUnMute()})}onVolumeUnMute(){this.tile.querySelector(".volume").classList.add("up"),this.video.muted=!1,this.analiser(this.tile.querySelector(".chart"),"running")}onVolumeMute(){this.tile.querySelector(".volume").classList.remove("up"),this.video.muted=!0,this.analiser(this.tile.querySelector(".chart"),"closed")}initAudioContext(){void 0===this.ctx&&(this.ctx=new AudioContext,this.source=this.ctx.createMediaElementSource(this.video),this.analyser=this.ctx.createAnalyser(),this.processor=this.ctx.createScriptProcessor(256,1,1))}analiser(t,e){if(void 0!==this.ctx&&void 0!==this.source&&void 0!==this.analyser&&void 0!==this.processor)if(this.source.connect(this.analyser),this.source.connect(this.processor),"running"==e){this.ctx.resume(),this.analyser.connect(this.ctx.destination),this.processor.connect(this.ctx.destination),this.analyser.fftSize=32;const e=new Uint8Array(this.analyser.frequencyBinCount);this.processor.onaudioprocess=(()=>{if(void 0!==this.analyser){this.analyser.getByteFrequencyData(e);const r=25,i=t.querySelector(".bar-4"),n=t.querySelector(".bar-2"),a=t.querySelector(".bar-3"),o=t.querySelector(".bar-1");let s=0,l=0,u=0,d=0;for(let t=0;t<4;t++)s+=e[t]/r;for(let t=4;t<8;t++)l+=e[t]/r;for(let t=8;t<12;t++)u+=e[t]/r;for(let t=12;t<16;t++)d+=e[t]/r;i.setAttribute("width",s),n.setAttribute("width",l),a.setAttribute("width",u),o.setAttribute("width",d)}})}else this.processor.onaudioprocess=null,this.source.disconnect(this.analyser),this.source.disconnect(this.processor),this.ctx.suspend()}}(t,e,t.url)});const R=Object(a.a)(u),w=document.querySelector(".foo-menu");w&&(w.innerHTML=R)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,